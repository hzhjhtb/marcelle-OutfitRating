{"version":3,"file":"chartjs-chart-matrix.min.js","sources":["../src/controller.js","../src/element.js","../src/index.js"],"sourcesContent":["import {DatasetController} from 'chart.js';\nimport {version} from '../package.json';\n\nexport default class MatrixController extends DatasetController {\n  initialize() {\n    this.enableOptionSharing = true;\n    super.initialize();\n  }\n\n  update(mode) {\n    const me = this;\n    const meta = me._cachedMeta;\n\n    me.updateElements(meta.data, 0, meta.data.length, mode);\n  }\n\n  updateElements(rects, start, count, mode) {\n    const me = this;\n    const reset = mode === 'reset';\n    const {xScale, yScale} = me._cachedMeta;\n    const firstOpts = me.resolveDataElementOptions(start, mode);\n    const sharedOptions = me.getSharedOptions(mode, rects[start], firstOpts);\n\n    for (let i = start; i < start + count; i++) {\n      const parsed = !reset && me.getParsed(i);\n      const x = reset ? xScale.getBasePixel() : xScale.getPixelForValue(parsed.x);\n      const y = reset ? yScale.getBasePixel() : yScale.getPixelForValue(parsed.y);\n      const options = me.resolveDataElementOptions(i, mode);\n      const {width, height, anchorX, anchorY} = options;\n      const properties = {\n        x: resolveX(anchorX, x, width),\n        y: resolveY(anchorY, y, height),\n        width,\n        height,\n        options\n      };\n      me.updateElement(rects[i], i, properties, mode);\n    }\n\n    me.updateSharedOptions(sharedOptions, mode);\n  }\n\n  draw() {\n    const me = this;\n    const data = me.getMeta().data || [];\n    let i, ilen;\n\n    for (i = 0, ilen = data.length; i < ilen; ++i) {\n      data[i].draw(me._ctx);\n    }\n  }\n}\n\nfunction resolveX(anchorX, x, width) {\n  if (anchorX === 'left' || anchorX === 'start') {\n    return x;\n  }\n  if (anchorX === 'right' || anchorX === 'end') {\n    return x - width;\n  }\n  return x - width / 2;\n}\n\nfunction resolveY(anchorY, y, height) {\n  if (anchorY === 'top' || anchorY === 'start') {\n    return y;\n  }\n  if (anchorY === 'bottom' || anchorY === 'end') {\n    return y - height;\n  }\n  return y - height / 2;\n}\n\nMatrixController.id = 'matrix';\n\nMatrixController.version = version;\n\nMatrixController.defaults = {\n  dataElementType: 'matrix',\n\n  animations: {\n    numbers: {\n      type: 'number',\n      properties: ['x', 'y', 'width', 'height']\n    }\n  },\n};\n\nMatrixController.overrides = {\n  interaction: {\n    mode: 'nearest',\n    intersect: true\n  },\n\n  scales: {\n    x: {\n      type: 'linear',\n      offset: true\n    },\n    y: {\n      type: 'linear',\n      reverse: true\n    }\n  },\n};\n","import {Element} from 'chart.js';\nimport {isObject, addRoundedRectPath, toTRBLCorners} from 'chart.js/helpers';\n\n/**\n * Helper function to get the bounds of the rect\n * @param {MatrixElement} rect the rect\n * @param {boolean} [useFinalPosition]\n * @return {object} bounds of the rect\n * @private\n */\nfunction getBounds(rect, useFinalPosition) {\n  const {x, y, width, height} = rect.getProps(['x', 'y', 'width', 'height'], useFinalPosition);\n  return {left: x, top: y, right: x + width, bottom: y + height};\n}\n\nfunction limit(value, min, max) {\n  return Math.max(Math.min(value, max), min);\n}\n\nfunction parseBorderWidth(rect, maxW, maxH) {\n  const value = rect.options.borderWidth;\n  let t, r, b, l;\n\n  if (isObject(value)) {\n    t = +value.top || 0;\n    r = +value.right || 0;\n    b = +value.bottom || 0;\n    l = +value.left || 0;\n  } else {\n    t = r = b = l = +value || 0;\n  }\n\n  return {\n    t: limit(t, 0, maxH),\n    r: limit(r, 0, maxW),\n    b: limit(b, 0, maxH),\n    l: limit(l, 0, maxW)\n  };\n}\n\nfunction boundingRects(rect) {\n  const bounds = getBounds(rect);\n  const width = bounds.right - bounds.left;\n  const height = bounds.bottom - bounds.top;\n  const border = parseBorderWidth(rect, width / 2, height / 2);\n\n  return {\n    outer: {\n      x: bounds.left,\n      y: bounds.top,\n      w: width,\n      h: height\n    },\n    inner: {\n      x: bounds.left + border.l,\n      y: bounds.top + border.t,\n      w: width - border.l - border.r,\n      h: height - border.t - border.b\n    }\n  };\n}\n\nfunction inRange(rect, x, y, useFinalPosition) {\n  const skipX = x === null;\n  const skipY = y === null;\n  const bounds = !rect || (skipX && skipY) ? false : getBounds(rect, useFinalPosition);\n\n  return bounds\n\t\t&& (skipX || x >= bounds.left && x <= bounds.right)\n\t\t&& (skipY || y >= bounds.top && y <= bounds.bottom);\n}\n\nexport default class MatrixElement extends Element {\n  constructor(cfg) {\n    super();\n\n    this.options = undefined;\n    this.width = undefined;\n    this.height = undefined;\n\n    if (cfg) {\n      Object.assign(this, cfg);\n    }\n  }\n\n  draw(ctx) {\n    const options = this.options;\n    const {inner, outer} = boundingRects(this);\n    const radius = toTRBLCorners(options.borderRadius);\n\n    ctx.save();\n\n    if (outer.w !== inner.w || outer.h !== inner.h) {\n      ctx.beginPath();\n      addRoundedRectPath(ctx, {x: outer.x, y: outer.y, w: outer.w, h: outer.h, radius});\n      addRoundedRectPath(ctx, {x: inner.x, y: inner.y, w: inner.w, h: inner.h, radius});\n      ctx.fillStyle = options.backgroundColor;\n      ctx.fill();\n      ctx.fillStyle = options.borderColor;\n      ctx.fill('evenodd');\n    } else {\n      ctx.beginPath();\n      addRoundedRectPath(ctx, {x: inner.x, y: inner.y, w: inner.w, h: inner.h, radius});\n      ctx.fillStyle = options.backgroundColor;\n      ctx.fill();\n    }\n\n    ctx.restore();\n  }\n\n  inRange(mouseX, mouseY, useFinalPosition) {\n    return inRange(this, mouseX, mouseY, useFinalPosition);\n  }\n\n  inXRange(mouseX, useFinalPosition) {\n    return inRange(this, mouseX, null, useFinalPosition);\n  }\n\n  inYRange(mouseY, useFinalPosition) {\n    return inRange(this, null, mouseY, useFinalPosition);\n  }\n\n  getCenterPoint(useFinalPosition) {\n    const {x, y, width, height} = this.getProps(['x', 'y', 'width', 'height'], useFinalPosition);\n    return {\n      x: x + width / 2,\n      y: y + height / 2\n    };\n  }\n\n  tooltipPosition() {\n    return this.getCenterPoint();\n  }\n\n  getRange(axis) {\n    return axis === 'x' ? this.width / 2 : this.height / 2;\n  }\n}\n\nMatrixElement.id = 'matrix';\nMatrixElement.defaults = {\n  backgroundColor: undefined,\n  borderColor: undefined,\n  borderWidth: undefined,\n  borderRadius: 0,\n  anchorX: 'center',\n  anchorY: 'center',\n  width: 20,\n  height: 20\n};\n","import Chart from 'chart.js';\nimport MatrixController from './controller';\nimport MatrixElement from './element';\n\nChart.register(MatrixController, MatrixElement);\n"],"names":["MatrixController","DatasetController","initialize","this","enableOptionSharing","super","update","mode","meta","_cachedMeta","updateElements","data","length","rects","start","count","me","reset","xScale","yScale","firstOpts","resolveDataElementOptions","sharedOptions","getSharedOptions","i","parsed","getParsed","x","getBasePixel","getPixelForValue","y","options","width","height","anchorX","anchorY","properties","resolveX","resolveY","updateElement","updateSharedOptions","draw","getMeta","ilen","_ctx","getBounds","rect","useFinalPosition","getProps","left","top","right","bottom","limit","value","min","max","Math","boundingRects","bounds","border","maxW","maxH","borderWidth","t","r","b","l","isObject","parseBorderWidth","outer","w","h","inner","inRange","skipX","skipY","id","version","defaults","dataElementType","animations","numbers","type","overrides","interaction","intersect","scales","offset","reverse","MatrixElement","Element","constructor","cfg","undefined","Object","assign","ctx","radius","toTRBLCorners","borderRadius","save","beginPath","addRoundedRectPath","fillStyle","backgroundColor","fill","borderColor","restore","mouseX","mouseY","inXRange","inYRange","getCenterPoint","tooltipPosition","getRange","axis","Chart","register"],"mappings":"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"}