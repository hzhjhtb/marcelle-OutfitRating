export declare function filter<TElement>(source: () => AsyncIterable<TElement>, predicate: (element: TElement, index: number) => boolean): () => AsyncIterable<TElement>;
export declare function map<TElement, TResult>(source: () => AsyncIterable<TElement>, transform: (element: TElement, index: number) => TResult): () => AsyncIterable<TResult>;
export declare function skip<TElement>(source: () => AsyncIterable<TElement>, count: number): () => AsyncIterable<TElement>;
export declare function take<TElement>(source: () => AsyncIterable<TElement>, count: number): () => AsyncIterable<TElement>;
export declare function concat<TElement>(left: () => AsyncIterable<TElement>, right: AsyncIterable<TElement>): () => AsyncIterable<TElement>;
export declare function forEach<T>(source: () => AsyncIterable<T>, action: (element: T, index: number) => void): Promise<void>;
export declare function toArray<T>(source: () => AsyncIterable<T>): Promise<T[]>;
