import { TensorLike } from '@tensorflow/tfjs-core';
import '@tensorflow/tfjs-core/dist/public/chained_ops/gather';
import '@tensorflow/tfjs-core/dist/public/chained_ops/arg_max';
import '@tensorflow/tfjs-core/dist/public/chained_ops/squeeze';
import '@tensorflow/tfjs-core/dist/public/chained_ops/expand_dims';
import { Dataset } from '../../core/dataset';
import { TFJSCustomModel, TFJSCustomModelOptions } from './tfjs-custom-model';
import type { ClassifierResults } from './types';
import type { Instance } from '../types';
import type { LazyIterable } from '../../utils';
export declare type TFJSCustomClassifierOptions = TFJSCustomModelOptions;
export interface ClassifierInstance extends Instance {
    x: TensorLike;
    y: string;
}
export declare abstract class TFJSCustomClassifier extends TFJSCustomModel<ClassifierInstance, ClassifierResults> {
    title: string;
    train(dataset: Dataset<ClassifierInstance> | LazyIterable<ClassifierInstance>, validationDataset?: Dataset<ClassifierInstance> | LazyIterable<ClassifierInstance>): Promise<void>;
    predict(x: TensorLike): Promise<ClassifierResults>;
}
