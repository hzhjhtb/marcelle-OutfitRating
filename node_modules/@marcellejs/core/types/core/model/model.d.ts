import type { Dataset } from '../dataset';
import type { Instance, ObjectId, Parametrable, StoredModel, TrainingStatus, Service } from '../types';
import type { DataStore } from '../data-store';
import { Stream } from '../stream';
import { Component } from '../component';
import { LazyIterable } from '../../utils';
export declare abstract class Model<T extends Instance, PredictionType> extends Component implements Parametrable {
    abstract parameters: Parametrable['parameters'];
    abstract serviceName: string;
    ready: boolean;
    protected syncData: {
        store: DataStore;
        name: string;
        service?: Service<StoredModel>;
    };
    $training: Stream<TrainingStatus>;
    constructor();
    abstract train(dataset: Dataset<T> | LazyIterable<T>, validationDataset?: Dataset<T> | LazyIterable<T>): void;
    abstract predict(x: T['x']): Promise<PredictionType>;
    abstract save(store: DataStore, name: string, metadata?: Record<string, unknown>, id?: ObjectId): Promise<ObjectId | null>;
    abstract load(store: DataStore, idOrName: ObjectId | string): Promise<StoredModel>;
    abstract download(metadata?: Record<string, unknown>): Promise<void>;
    abstract upload(...files: File[]): Promise<StoredModel>;
    sync(store: DataStore, name: string): this;
    protected setupSync(): Promise<void>;
    protected saveToDatastore(store: DataStore, model: StoredModel, id?: ObjectId): Promise<ObjectId>;
    protected loadFromDatastore(store: DataStore, idOrName: ObjectId | string): Promise<StoredModel>;
    mount(): void;
}
