import { GraphModel, loadGraphModel } from '@tensorflow/tfjs-converter';
import type { Instance, ObjectId, StoredModel } from '../types';
import type { DataStore } from '../data-store';
import { LayersModel, loadLayersModel } from '@tensorflow/tfjs-layers';
import { Model } from './model';
export declare abstract class TFJSBaseModel<T extends Instance, PredictionType> extends Model<T, PredictionType> {
    serviceName: string;
    model: LayersModel | GraphModel;
    loadFn: typeof loadLayersModel | typeof loadGraphModel;
    labels?: string[];
    protected warmup(): Promise<void>;
    save(store: DataStore, name: string, metadata?: Record<string, unknown>, id?: ObjectId): Promise<ObjectId>;
    load(store: DataStore, idOrName: ObjectId | string): Promise<StoredModel>;
    download(metadata?: Record<string, unknown>): Promise<void>;
    upload(...files: File[]): Promise<StoredModel>;
}
