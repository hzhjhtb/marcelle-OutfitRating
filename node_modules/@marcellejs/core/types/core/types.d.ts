import type { SvelteComponent } from 'svelte';
import type { Service as FeathersService } from '@feathersjs/feathers';
import type { Stream } from './stream';
import type { ServiceIterable } from './data-store/service-iterable';
export interface ComponentInternals {
    streams: Array<Stream<any>>;
    app?: SvelteComponent;
    [key: string]: unknown;
}
export interface Parametrable {
    parameters: {
        [name: string]: Stream<any>;
    };
}
export declare type ObjectId = string;
export declare type Service<T> = FeathersService<T> & {
    items: () => ServiceIterable<T>;
};
export interface User {
    email: string;
}
export interface Instance {
    id?: ObjectId;
    x: any;
    y: any;
    thumbnail?: string;
    [key: string]: any;
}
export interface TrainingStatus {
    status: 'idle' | 'start' | 'epoch' | 'success' | 'error' | 'loaded' | 'loading';
    epoch?: number;
    epochs?: number;
    data?: Record<string, unknown>;
}
export interface StoredModel {
    id?: ObjectId;
    name: string;
    files: Array<[string, string]>;
    format: string;
    metadata?: Record<string, unknown>;
    [key: string]: unknown;
}
export interface ModelCheckpoint {
    id: ObjectId;
    name: string;
    service: string;
    metadata?: Record<string, unknown>;
}
export interface TrainingRun {
    id?: ObjectId;
    name: string;
    basename: string;
    start: string;
    status: TrainingStatus['status'];
    epoch?: number;
    epochs?: number;
    params?: Record<string, unknown>;
    logs?: TrainingStatus['data'];
    checkpoints?: Array<ModelCheckpoint>;
    model?: {
        summary?: string;
        [key: string]: unknown;
    };
    [key: string]: unknown;
}
export interface Prediction {
    id?: ObjectId;
    instanceId: ObjectId;
    yTrue?: string;
    [key: string]: any;
}
export interface ClassifierPrediction extends Prediction {
    label?: string;
    confidences?: Record<string, number>;
}
