import type { Paginated, Params as FeathersParams, Query, HookContext } from '@feathersjs/feathers';
import type { Instance, ObjectId, Service } from '../types';
import { Stream } from '../stream';
import { Component } from '../component';
import { DataStore } from '../data-store';
import type { ServiceIterable } from '../data-store/service-iterable';
interface DatasetChange {
    level: 'instance' | 'dataset';
    type: 'created' | 'updated' | 'removed' | 'renamed';
    data?: any;
}
export declare class Dataset<T extends Instance> extends Component {
    #private;
    title: string;
    name: string;
    readonly isDataset = true;
    ready: Promise<void>;
    instanceService: Service<T>;
    query: Query;
    $count: Stream<number>;
    $changes: Stream<DatasetChange[]>;
    constructor(name: string, store?: DataStore);
    protected setup(): Promise<void>;
    protected reset(): Promise<void>;
    protected checkUpdates(context: HookContext): Promise<void>;
    protected watchChanges(): void;
    sift(query?: Query): Promise<void>;
    items(): ServiceIterable<T>;
    find(params?: FeathersParams): Promise<Paginated<T>>;
    get(id: ObjectId, params?: FeathersParams): Promise<T>;
    create(instance: Partial<T>, params?: FeathersParams): Promise<T>;
    update(id: ObjectId, instance: T, params?: FeathersParams): Promise<T>;
    patch(id: ObjectId, changes: Partial<T>, params?: FeathersParams): Promise<T>;
    remove(id: ObjectId, params?: FeathersParams): Promise<T>;
    clear(): Promise<void>;
    distinct(field: string): Promise<T['y'][]>;
    download(): Promise<void>;
    upload(files: File[]): Promise<void>;
    mount(): void;
}
export {};
