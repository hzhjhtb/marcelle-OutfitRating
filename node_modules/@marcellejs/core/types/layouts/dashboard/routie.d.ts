declare type RoutieKey = {
    name: string;
    optional: boolean;
};
declare type RoutieParams = unknown[];
declare type RoutieCallback = (...params: RoutieParams) => void;
declare class Route {
    path: string;
    name: string;
    keys: RoutieKey[];
    fns: RoutieCallback[];
    params: Record<string, string>;
    regex: RegExp;
    constructor(path: string, name: string);
    addHandler(fn: RoutieCallback): void;
    removeHandler(fn: RoutieCallback): void;
    run(params: RoutieParams): void;
    match(path: string, params: RoutieParams): boolean;
}
export default class Router {
    map: Record<string, Route>;
    routes: Route[];
    constructor();
    route(path: string, fn: RoutieCallback): void;
    addListener(): void;
    removeListener(): void;
    reload(): void;
    navigate(path: string, { silent }?: {
        silent?: boolean;
    }): void;
}
export {};
