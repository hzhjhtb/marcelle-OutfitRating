import { MobileNetVersion, MobileNetAlpha } from '@tensorflow-models/mobilenet';
import { ClassifierResults, Instance, Model } from '../../core';
import { Stream } from '../../core/stream';
export interface MobileNetOptions {
    version?: MobileNetVersion;
    alpha?: MobileNetAlpha;
}
export interface MobileNetInstance extends Instance {
    x: ImageData;
    y: string;
}
export declare class MobileNet extends Model<MobileNetInstance, ClassifierResults> {
    #private;
    title: string;
    parameters: {};
    serviceName: string;
    $loading: Stream<boolean>;
    readonly version: MobileNetVersion;
    readonly alpha: MobileNetAlpha;
    constructor({ version, alpha }?: MobileNetOptions);
    setup(): Promise<MobileNet>;
    process(image: ImageData): Promise<number[]>;
    predict(image: ImageData): Promise<ClassifierResults>;
    mount(target?: HTMLElement): void;
    train(): never;
    save(): never;
    load(): never;
    download(): never;
    upload(): never;
}
