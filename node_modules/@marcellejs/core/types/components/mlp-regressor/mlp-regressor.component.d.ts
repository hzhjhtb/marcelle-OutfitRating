import { type TensorLike, Tensor } from '@tensorflow/tfjs-core';
import { Stream } from '../../core/stream';
import { TFJSCustomModel, TFJSCustomModelOptions } from '../../core/model/tfjs-custom-model';
import type { Dataset, Instance } from '../../core';
import type { LazyIterable } from '../../utils';
export interface MLPRegressorOptions extends TFJSCustomModelOptions {
    units: number[];
}
export interface MLPRegressorInstance extends Instance {
    x: TensorLike;
    y: number;
}
export declare class MLPRegressor extends TFJSCustomModel<MLPRegressorInstance, number | number[]> {
    title: string;
    parameters: {
        units: Stream<number[]>;
    } & TFJSCustomModel<MLPRegressorInstance, number | number[]>['parameters'];
    constructor({ units, ...rest }?: Partial<MLPRegressorOptions>);
    train(dataset: Dataset<MLPRegressorInstance> | LazyIterable<MLPRegressorInstance>, validationDataset?: Dataset<MLPRegressorInstance> | LazyIterable<MLPRegressorInstance>): Promise<void>;
    buildModel(inputShape: Tensor['shape'], outputShape: Tensor['shape']): void;
    predict(x: TensorLike): Promise<number | number[]>;
}
