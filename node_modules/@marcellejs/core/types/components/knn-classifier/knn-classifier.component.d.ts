import type { TensorLike } from '@tensorflow/tfjs-core';
import '@tensorflow/tfjs-core/dist/public/chained_ops/flatten';
import '@tensorflow/tfjs-core/dist/public/chained_ops/norm';
import '@tensorflow/tfjs-core/dist/public/chained_ops/mat_mul';
import '@tensorflow/tfjs-core/dist/public/chained_ops/as1d';
import '@tensorflow/tfjs-core/dist/public/chained_ops/as2d';
import '@tensorflow/tfjs-core/dist/public/chained_ops/as_type';
import { KNNClassifier as TfjsKNNClassifier } from '@tensorflow-models/knn-classifier';
import { Stream, Model, ClassifierResults, StoredModel, ObjectId, Instance, DataStore } from '../../core';
import { Dataset } from '../../core/dataset';
import type { LazyIterable } from '../../utils';
export interface KNNClassifierOptions {
    k: number;
}
export interface KNNInstance extends Instance {
    x: TensorLike;
    y: string;
}
export declare class KNNClassifier extends Model<KNNInstance, ClassifierResults> {
    title: string;
    parameters: {
        k: Stream<number>;
    };
    serviceName: string;
    classifier: TfjsKNNClassifier;
    labels: string[];
    constructor({ k }?: Partial<KNNClassifierOptions>);
    train(dataset: Dataset<KNNInstance> | LazyIterable<KNNInstance>): Promise<void>;
    predict(x: TensorLike): Promise<ClassifierResults>;
    clear(): void;
    save(store: DataStore, name: string, metadata?: Record<string, unknown>, id?: ObjectId): Promise<ObjectId>;
    load(store: DataStore, idOrName?: ObjectId | string): Promise<StoredModel>;
    download(metadata?: Record<string, unknown>): Promise<void>;
    upload(...files: File[]): Promise<StoredModel>;
    private write;
    private read;
}
