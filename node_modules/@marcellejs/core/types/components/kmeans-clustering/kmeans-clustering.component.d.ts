import type { LazyIterable } from '../../utils';
import { Stream, Model, ClusteringResults, StoredModel, ObjectId, Instance, DataStore } from '../../core';
import { Dataset } from '../../core/dataset';
export interface KMeansClusteringOptions {
    k: number;
}
export interface KMeansInstance extends Instance {
    x: number[];
    y: undefined;
}
export declare class KMeansClustering extends Model<KMeansInstance, ClusteringResults> {
    title: string;
    serviceName: string;
    parameters: {
        k: Stream<number>;
    };
    $centers: Stream<number[][]>;
    $clusters: Stream<number[]>;
    extremes: {
        min: number;
        max: number;
    }[];
    dataset: number[][];
    constructor({ k }?: Partial<KMeansClusteringOptions>);
    train(dataset: Dataset<KMeansInstance> | LazyIterable<KMeansInstance>): Promise<void>;
    predict(x: number[]): Promise<ClusteringResults>;
    batchPredict(dataset: Dataset<KMeansInstance>): Promise<ClusteringResults[]>;
    save(store: DataStore, name: string, metadata?: Record<string, unknown>, id?: ObjectId): Promise<ObjectId>;
    load(store: DataStore, id?: ObjectId): Promise<StoredModel>;
    download(metadata?: Record<string, unknown>): Promise<void>;
    upload(...files: File[]): Promise<StoredModel>;
    private write;
    private read;
}
