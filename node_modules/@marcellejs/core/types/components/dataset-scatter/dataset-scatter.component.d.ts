import { Component, type Dataset, type Instance, Stream, ObjectId } from '../../core';
export interface Transforms<T extends Instance> {
    xy: (value: T) => [number, number] | Promise<[number, number]>;
    label: (value: T) => number | string | Promise<number | string>;
}
export declare class DatasetScatter<T extends Instance> extends Component {
    private dataset;
    title: string;
    transforms: Transforms<T>;
    $data: Stream<import("chart.js").ChartData<keyof import("chart.js").ChartTypeRegistry, (number | import("chart.js").ScatterDataPoint | import("chart.js").BubbleDataPoint)[], unknown>>;
    $hovered: Stream<ObjectId[]>;
    $clicked: Stream<ObjectId[]>;
    constructor(dataset: Dataset<T>);
    setTransforms(t: Partial<Transforms<T>>): void;
    updateData(): Promise<void>;
    mount(target?: HTMLElement): void;
}
