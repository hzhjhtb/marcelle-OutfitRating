import { Dataset, Instance, Model, Stream } from '../../core';
import type { LazyIterable } from '../../utils';
import { UMAP } from 'umap-js';
export interface UmapOptions {
    nComponents: number;
    nNeighbors: number;
    minDist: number;
    spread: number;
    supervised: boolean;
}
export interface UmapInstance extends Instance {
    x: number[];
    y: number;
}
/**
 * A Multi-layer Perceptron for regression with two hidden layers
 */
export declare class Umap extends Model<UmapInstance, number[]> {
    title: string;
    serviceName: string;
    parameters: {
        nComponents: Stream<number>;
        nNeighbors: Stream<number>;
        minDist: Stream<number>;
        spread: Stream<number>;
        supervised: Stream<boolean>;
    };
    model: UMAP;
    constructor({ nComponents, nNeighbors, minDist, spread, supervised, }?: Partial<UmapOptions>);
    train(dataset: Dataset<UmapInstance> | LazyIterable<UmapInstance>): Promise<void>;
    predict(x: number[]): Promise<number[]>;
    save(): never;
    load(): never;
    download(): never;
    upload(): never;
}
