import type { Prediction, Instance, Service } from '../../core/types';
import type { ServiceIterable } from '../../core/data-store/service-iterable';
import { Component } from '../../core/component';
import { Stream } from '../../core/stream';
import { DataStore } from '../../core/data-store/data-store';
import { Dataset } from '../../core/dataset';
import { Model } from '../../core';
import { LazyIterable } from '../../utils';
export interface BatchPredictionStatus {
    status: 'idle' | 'start' | 'running' | 'success' | 'error' | 'loaded' | 'loading';
    count?: number;
    total?: number;
    data?: Record<string, unknown>;
}
export declare class BatchPrediction extends Component {
    #private;
    title: string;
    name: string;
    predictionService: Service<Prediction>;
    $status: Stream<BatchPredictionStatus>;
    constructor(name: string, store?: DataStore);
    setup(): Promise<void>;
    predict<T extends Instance, PredictionType>(model: Model<T, PredictionType>, dataset: Dataset<T> | LazyIterable<T>): Promise<void>;
    clear(): Promise<void>;
    items(): ServiceIterable<Prediction>;
    mount(): void;
}
