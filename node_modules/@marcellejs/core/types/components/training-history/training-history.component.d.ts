import type { DataStore, Service } from '../../core';
import { Model, Component, Stream, TrainingRun, TrainingStatus, Instance } from '../../core';
export interface TrainingHistoryOptions {
    metrics?: string[];
    actions?: Array<string | {
        name: string;
        multiple?: boolean;
    }>;
}
export declare class TrainingHistory<T extends Instance, PredictionType> extends Component {
    dataStore: DataStore;
    title: string;
    $selection: Stream<TrainingRun[]>;
    $actions: Stream<{
        name: string;
        data: TrainingRun;
    }>;
    runService: Service<TrainingRun>;
    options: TrainingHistoryOptions;
    model: Model<T, PredictionType>;
    protected ready: Promise<void>;
    protected stopTracking: () => void;
    protected crtRun: TrainingRun;
    protected modelName: string;
    protected nextIndex: number;
    private lock;
    constructor(dataStore: DataStore, options?: TrainingHistoryOptions);
    track(model: Model<T, PredictionType>, basename?: string): this;
    protected trackTrainingStream(x: TrainingStatus): Promise<void>;
    mount(target?: HTMLElement): void;
}
