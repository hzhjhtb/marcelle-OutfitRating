import { type BlazePoseMediaPipeModelConfig, type BlazePoseTfjsModelConfig, type MoveNetModelConfig, type PosenetModelConfig, SupportedModels, type Pose } from '@tensorflow-models/pose-detection';
import { Instance, Model, Stream } from '../../core';
export declare type PoseDetectionModel = keyof typeof SupportedModels;
export declare type ModelConfig = PosenetModelConfig | BlazePoseTfjsModelConfig | BlazePoseMediaPipeModelConfig | MoveNetModelConfig;
export interface PoseDetectionInstance extends Instance {
    x: ImageData;
    y: undefined;
}
export { type Pose };
export declare class PoseDetection extends Model<PoseDetectionInstance, Pose[]> {
    #private;
    model: PoseDetectionModel;
    modelConfig?: ModelConfig;
    title: string;
    parameters: {};
    serviceName: string;
    $loading: Stream<boolean>;
    $bodyParts: Stream<string>;
    constructor(model?: PoseDetectionModel, modelConfig?: ModelConfig);
    setup(model: PoseDetectionModel, modelConfig?: ModelConfig): Promise<void>;
    predict(image: ImageData): Promise<Pose[]>;
    postprocess(poses: Pose[], indices?: number[]): number[];
    thumbnail(img: ImageData, result: Pose[]): string | ImageData;
    render(img: ImageData, result: Pose[]): string | ImageData;
    mount(target?: HTMLElement): void;
    train(): never;
    save(): never;
    load(): never;
    download(): never;
    upload(): never;
}
