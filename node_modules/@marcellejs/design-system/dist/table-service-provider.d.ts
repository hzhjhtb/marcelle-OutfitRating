import type { Query, Service } from '@feathersjs/feathers';
import type { Column, ObjectId } from './table-types';
import type { TableProviderOptions } from './table-abstract-provider';
import { TableDataProvider } from './table-abstract-provider';
export interface ServiceProviderItem {
    id?: ObjectId;
    [key: string]: unknown;
}
export interface TableServiceProviderOptions<T> extends TableProviderOptions {
    service: Service<T>;
    columns?: Column[];
    transform?: Record<string, (...args: any[]) => any>;
}
export declare class TableServiceProvider<T extends ServiceProviderItem = ServiceProviderItem> extends TableDataProvider<T> {
    service: Service<T>;
    query: Query;
    transform: TableServiceProviderOptions<T>['transform'];
    constructor({ service, columns, transform, ...options }: TableServiceProviderOptions<T>);
    paginate(n: number): void;
    update(): Promise<void>;
    page(i: number): Promise<void>;
    sort(sorting: {
        col: string;
        ascending: boolean;
    }): Promise<void>;
    delete(i: number): Promise<T>;
}
