import { get } from 'svelte/store';
import { TableDataProvider } from './table-abstract-provider';
export class TableServiceProvider extends TableDataProvider {
    service;
    query;
    transform;
    constructor({ service, columns, transform, ...options }) {
        super(options);
        this.service = service;
        this.transform = transform || {};
        this.query = {
            $sort: {
                updatedAt: -1,
            },
            $limit: this.options.itemsPerPage,
        };
        if (columns) {
            this.query.$select = columns.map((x) => x.name).concat(['id']);
        }
        this.update();
        this.service.on('created', this.update.bind(this));
        this.service.on('patched', this.update.bind(this));
        this.service.on('updated', this.update.bind(this));
        this.service.on('removed', this.update.bind(this));
    }
    paginate(n) {
        super.paginate(n);
        this.query.$limit = this.options.itemsPerPage;
        this.update();
    }
    async update() {
        try {
            const res = (await this.service.find({ query: this.query }));
            const data = res.data.map((x, i) => {
                const z = Object.entries(this.transform)
                    .map(([target, f]) => {
                    try {
                        return { [target]: f(x, i) };
                    }
                    catch (error) {
                        return { [target]: 'transform error' };
                    }
                })
                    .reduce((o, y) => ({ ...o, ...y }), {});
                return { ...x, ...z };
            });
            this.data.set(data);
            this.total.set(res.total);
            this.error.set(null);
        }
        catch (error) {
            this.data.set([]);
            this.total.set(0);
            this.error.set(error);
        }
    }
    async page(i) {
        this.query.$skip = (i - 1) * this.query.$limit;
        this.update();
    }
    async sort(sorting) {
        const { col, ascending } = sorting;
        if (col) {
            this.query.$sort = {
                [col]: ascending ? 1 : -1,
            };
        }
        else {
            delete this.query.$sort;
        }
        this.update();
    }
    async delete(i) {
        const removed = get(this.data)[i];
        await this.service.remove(removed.id);
        this.update();
        return removed;
    }
}
