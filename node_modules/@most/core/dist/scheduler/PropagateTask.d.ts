/** @license MIT License (c) copyright 2010-2016 original author or authors */
/** @author Brian Cavalier */
/** @author John Hann */
import { Sink, Time, Task, Disposable } from '@most/types';
export declare type PropagateTaskRun<A> = (time: number, value: A, sink: Sink<A>) => void;
export declare const propagateTask: <A>(run: PropagateTaskRun<A>, value: A, sink: Sink<A>) => PropagateTask;
export declare const propagateEventTask: <A>(value: A, sink: Sink<A>) => PropagateTask;
export declare const propagateEndTask: (sink: Sink<unknown>) => PropagateTask;
export declare const propagateErrorTask: (value: Error, sink: Sink<Error>) => PropagateTask;
export declare abstract class PropagateTask implements Task, Disposable {
    protected readonly sink: Sink<unknown>;
    active: boolean;
    constructor(sink: Sink<unknown>);
    protected abstract runIfActive(t: Time): void;
    dispose(): void;
    run(t: Time): void;
    error(t: Time, e: Error): void;
}
