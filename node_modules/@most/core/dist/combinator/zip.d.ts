/** @license MIT License (c) copyright 2010 original author or authors */
import { Stream } from '@most/types';
import { ToStreamsArray } from './variadic';
/**
 * Combine two streams pairwise by index by applying f to values at corresponding
 * indices.  The returned stream ends when either of the input streams ends.
 * @param {function} f function to combine values
 * @returns {Stream} new stream with items at corresponding indices combined
 *  using f
 */
export declare function zip<A, B, R>(f: (a: A, b: B) => R, stream1: Stream<A>, stream2: Stream<B>): Stream<R>;
/**
* Combine streams pairwise (or tuple-wise) by index by applying f to values
* at corresponding indices.  The returned stream ends when any of the input
* streams ends.
* @param {function} f function to combine values
* @param {[Stream]} streams streams to zip using f
* @returns {Stream} new stream with items at corresponding indices combined
*  using f
*/
export declare const zipArray: <Args extends unknown[], R>(f: (...args: Args) => R, streams: ToStreamsArray<Args>) => Stream<R>;
