/** @license MIT License (c) copyright 2010 original author or authors */
import Pipe from '../sink/Pipe';
import { Stream, Sink, Scheduler, Time, Disposable } from '@most/types';
export declare const sample: <A, B>(values: Stream<A>, sampler: Stream<B>) => Stream<A>;
export declare const snapshot: <A, B, C>(f: (a: A, b: B) => C, values: Stream<A>, sampler: Stream<B>) => Stream<C>;
export declare class Snapshot<A, B, C> implements Stream<C> {
    private readonly f;
    private readonly values;
    private readonly sampler;
    constructor(f: (a: A, b: B) => C, values: Stream<A>, sampler: Stream<B>);
    run(sink: Sink<C>, scheduler: Scheduler): Disposable;
}
export declare class SnapshotSink<A, B, C> extends Pipe<B, C> implements Sink<B> {
    private readonly f;
    readonly latest: LatestValueSink<A>;
    constructor(f: (a: A, b: B) => C, sink: Sink<C>);
    event(t: Time, x: B): void;
}
export declare class LatestValueSink<A> extends Pipe<A, A> implements Sink<A> {
    hasValue: boolean;
    value?: A;
    constructor(sink: Sink<unknown>);
    event(_t: Time, x: A): void;
    end(): void;
}
