/** @license MIT License (c) copyright 2010 original author or authors */
import { Stream } from '@most/types';
export interface SeedValue<S, V> {
    seed: S;
    value: V;
}
/**
 * Generalized feedback loop. Call a stepper function for each event. The stepper
 * will be called with 2 params: the current seed and the an event value.  It must
 * return a new { seed, value } pair. The `seed` will be fed back into the next
 * invocation of stepper, and the `value` will be propagated as the event value.
 * @param stepper loop step function
 * @param seed initial seed value passed to first stepper call
 * @param stream event stream
 * @returns new stream whose values are the `value` field of the objects
 * returned by the stepper
 */
export declare const loop: <A, B, S>(stepper: (seed: S, a: A) => SeedValue<S, B>, seed: S, stream: Stream<A>) => Stream<B>;
