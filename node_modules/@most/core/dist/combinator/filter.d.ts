/** @license MIT License (c) copyright 2010-2016 original author or authors */
/** @author Brian Cavalier */
/** @author John Hann */
import { Stream } from '@most/types';
/**
 * Retain only items matching a predicate
 * @param p filtering predicate called for each item
 * @param stream stream to filter
 * @returns stream containing only items for which predicate returns truthy
 */
export declare function filter<A, B extends A>(p: (a: A) => a is B, stream: Stream<A>): Stream<B>;
export declare function filter<A>(p: (a: A) => boolean, stream: Stream<A>): Stream<A>;
/**
 * Skip repeated events, using === to detect duplicates
 * @param stream stream from which to omit repeated events
 * @returns stream without repeated events
 */
export declare const skipRepeats: <A>(stream: Stream<A>) => Stream<A>;
/**
 * Skip repeated events using the provided equals function to detect duplicates
 * @param equals optional function to compare items
 * @param stream stream from which to omit repeated events
 * @returns stream without repeated events
 */
export declare const skipRepeatsWith: <A>(equals: (a1: A, a2: A) => boolean, stream: Stream<A>) => Stream<A>;
