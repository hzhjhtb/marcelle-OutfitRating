/** @license MIT License (c) copyright 2010-2017 original author or authors */
import { Stream, Sink, Scheduler, Disposable } from '@most/types';
/**
 * Limit the rate of events by suppressing events that occur too often
 * @param period time to suppress events
 * @param stream
 */
export declare const throttle: <A>(period: number, stream: Stream<A>) => Stream<A>;
export declare class Throttle<A> implements Stream<A> {
    readonly period: number;
    readonly source: Stream<A>;
    constructor(period: number, source: Stream<A>);
    run(sink: Sink<A>, scheduler: Scheduler): Disposable;
}
/**
 * Wait for a burst of events to subside and emit only the last event in the burst
 * @param period events occuring more frequently than this will be suppressed
 * @param stream stream to debounce
 * @returns new debounced stream
 */
export declare const debounce: <A>(period: number, stream: Stream<A>) => Stream<A>;
