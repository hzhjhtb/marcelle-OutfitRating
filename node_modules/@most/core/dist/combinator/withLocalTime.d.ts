import { Time, Stream, Sink } from '@most/types';
/**
 * Create a stream with its own local clock
 * This transforms time from the provided scheduler's clock to a stream-local
 * clock (which starts at 0), and then *back* to the scheduler's clock before
 * propagating events to sink.  In other words, upstream sources will see local times,
 * and downstream sinks will see non-local (original) times.
 */
export declare const withLocalTime: <A>(origin: Time, stream: Stream<A>) => Stream<A>;
/**
 * Accumulate offsets instead of nesting RelativeSinks, which can happen
 * with higher-order stream and combinators like continueWith when they're
 * applied recursively.
 */
export declare const relativeSink: <A>(origin: Time, sink: Sink<A>) => Sink<A>;
