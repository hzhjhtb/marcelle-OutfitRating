/** @license MIT License (c) copyright 2010-2016 original author or authors */
/** @author Brian Cavalier */
/** @author John Hann */
import { Stream } from '@most/types';
/**
 * If stream encounters an error, recover and continue with items from stream
 * returned by f.
 * @param f which returns a new stream
 * @param stream
 * @returns new stream which will recover from an error by calling f
 */
export declare const recoverWith: <A, E extends Error, B = A>(f: (error: E) => Stream<B>, stream: Stream<A>) => Stream<A | B>;
/**
 * Create a stream containing only an error
 * @param e error value, preferably an Error or Error subtype
 * @returns new stream containing only an error
 */
export declare const throwError: (e: Error) => Stream<never>;
