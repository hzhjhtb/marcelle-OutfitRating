import { Bounds } from './bounds';
import { Stream, Sink, Scheduler, Disposable } from '@most/types';
/**
 * @param n
 * @param stream
 * @returns new stream containing only up to the first n items from stream
 */
export declare const take: <A>(n: number, stream: Stream<A>) => Stream<A>;
/**
 * @param n
 * @param stream
 * @returns new stream with the first n items removed
 */
export declare const skip: <A>(n: number, stream: Stream<A>) => Stream<A>;
/**
 * Slice a stream by index. Negative start/end indexes are not supported
 * @param start
 * @param end
 * @param stream
 * @returns stream containing items where start <= index < end
 */
export declare const slice: <A>(start: number, end: number, stream: Stream<A>) => Stream<A>;
export declare class Slice<A> implements Stream<A> {
    readonly bounds: Bounds;
    readonly source: Stream<A>;
    constructor(bounds: Bounds, source: Stream<A>);
    run(sink: Sink<A>, scheduler: Scheduler): Disposable;
}
export declare const takeWhile: <A>(p: (a: A) => boolean, stream: Stream<A>) => Stream<A>;
export declare const skipWhile: <A>(p: (a: A) => boolean, stream: Stream<A>) => Stream<A>;
export declare const skipAfter: <A>(p: (a: A) => boolean, stream: Stream<A>) => Stream<A>;
