/** @license MIT License (c) copyright 2010-2016 original author or authors */
/** @author Brian Cavalier */
/** @author John Hann */
import { Stream } from '@most/types';
/**
 * @returns stream containing events from two streams in time order.
 * If two events are simultaneous they will be merged in arbitrary order.
 */
export declare function merge<A, B>(stream1: Stream<A>, stream2: Stream<B>): Stream<A | B>;
declare type MergeArray<S extends ReadonlyArray<Stream<any>>> = Value<S[number]>;
declare type Value<S> = S extends Stream<infer A> ? A : never;
/**
 * @param streams array of stream to merge
 * @returns stream containing events from all input observables
 * in time order.  If two events are simultaneous they will be merged in
 * arbitrary order.
 */
export declare const mergeArray: <S extends readonly Stream<any>[]>(streams: S) => Stream<Value<S[number]>>;
export {};
