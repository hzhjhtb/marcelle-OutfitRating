{"version":3,"file":"index.js","sources":["../src/fatalError.ts","../src/scheduler/PropagateTask.ts","../src/source/empty.ts","../src/source/never.ts","../src/source/at.ts","../src/source/now.ts","../src/source/periodic.ts","../src/source/newStream.ts","../src/disposable/SettableDisposable.ts","../src/runEffects.ts","../src/run.ts","../src/sink/RelativeSink.ts","../src/combinator/withLocalTime.ts","../src/sink/Pipe.ts","../src/combinator/loop.ts","../src/combinator/scan.ts","../src/combinator/continueWith.ts","../src/combinator/startWith.ts","../src/fusion/Filter.ts","../src/fusion/FilterMap.ts","../src/fusion/Map.ts","../src/combinator/transform.ts","../src/sink/IndexSink.ts","../src/invoke.ts","../src/combinator/combine.ts","../src/combinator/applicative.ts","../src/combinator/mergeConcurrently.ts","../src/combinator/chain.ts","../src/combinator/concatMap.ts","../src/combinator/merge.ts","../src/combinator/snapshot.ts","../src/combinator/slice/bounds.ts","../src/combinator/slice/index.ts","../src/combinator/zipItems.ts","../src/Queue.ts","../src/combinator/zip.ts","../src/combinator/switch.ts","../src/combinator/filter.ts","../src/combinator/timeslice.ts","../src/combinator/delay.ts","../src/combinator/limit.ts","../src/combinator/promises.ts","../src/sink/SafeSink.ts","../src/source/tryEvent.ts","../src/combinator/errors.ts","../src/combinator/multicast.ts","../src/index.ts"],"sourcesContent":["/** @license MIT License (c) copyright 2010-2016 original author or authors */\n/** @author Brian Cavalier */\n/** @author John Hann */\n\nexport default function fatalError(e: unknown): void {\n  setTimeout(rethrow, 0, e)\n}\n\nfunction rethrow(e: unknown): never {\n  throw e\n}\n","/** @license MIT License (c) copyright 2010-2016 original author or authors */\n/** @author Brian Cavalier */\n/** @author John Hann */\n\nimport fatal from '../fatalError'\nimport { Sink, Time, Task, Disposable } from '@most/types'\n\nexport type PropagateTaskRun<A> =\n  (time: number, value: A, sink: Sink<A>) => void\n\nexport const propagateTask = <A>(run: PropagateTaskRun<A>, value: A, sink: Sink<A>): PropagateTask => new PropagateRunEventTask(run, value, sink)\n\nexport const propagateEventTask = <A>(value: A, sink: Sink<A>): PropagateTask => new PropagateEventTask(value, sink)\n\nexport const propagateEndTask = (sink: Sink<unknown>): PropagateTask => new PropagateEndTask(sink)\n\nexport const propagateErrorTask = (value: Error, sink: Sink<Error>): PropagateTask => new PropagateErrorTask(value, sink)\n\nexport abstract class PropagateTask implements Task, Disposable {\n  active: boolean = true\n\n  constructor(protected readonly sink: Sink<unknown>) {}\n\n  protected abstract runIfActive(t: Time): void\n\n  dispose(): void {\n    this.active = false\n  }\n\n  run(t: Time): void {\n    if (!this.active) {\n      return\n    }\n    this.runIfActive(t)\n  }\n\n  error(t: Time, e: Error): void {\n    // TODO: Remove this check and just do this.sink.error(t, e)?\n    if (!this.active) {\n      return fatal(e)\n    }\n    this.sink.error(t, e)\n  }\n}\n\nclass PropagateRunEventTask<A> extends PropagateTask implements Task, Disposable {\n  constructor(private readonly runEvent: PropagateTaskRun<A>, private readonly value: A, sink: Sink<A>) {\n    super(sink)\n  }\n\n  protected runIfActive(t: Time): void {\n    this.runEvent(t, this.value, this.sink)\n  }\n}\n\nclass PropagateEventTask<A> extends PropagateTask implements Task, Disposable {\n  constructor(private readonly value: A, sink: Sink<A>) {\n    super(sink)\n  }\n\n  protected runIfActive(t: Time): void {\n    this.sink.event(t, this.value)\n  }\n}\n\nclass PropagateEndTask extends PropagateTask implements Task, Disposable {\n  protected runIfActive(t: Time): void {\n    this.sink.end(t)\n  }\n}\n\nclass PropagateErrorTask extends PropagateTask implements Task, Disposable {\n  constructor(private readonly value: Error, sink: Sink<never>) {\n    super(sink)\n  }\n\n  protected runIfActive(t: Time): void {\n    this.sink.error(t, this.value)\n  }\n}\n","/** @license MIT License (c) copyright 2010-2017 original author or authors */\n\nimport { propagateEndTask } from '../scheduler/PropagateTask'\nimport { asap } from '@most/scheduler'\nimport { Stream, Sink, Scheduler, Disposable } from '@most/types'\n\nexport const empty = (): Stream<never> => EMPTY\n\nexport const isCanonicalEmpty = (stream: Stream<unknown>): boolean =>\n  stream === EMPTY\n\nexport const containsCanonicalEmpty = <A>(streams: ReadonlyArray<Stream<A>>): boolean =>\n  streams.some(isCanonicalEmpty)\n\nclass Empty implements Stream<never> {\n  run(sink: Sink<never>, scheduler: Scheduler): Disposable {\n    return asap(propagateEndTask(sink), scheduler)\n  }\n}\n\nconst EMPTY = new Empty()\n","/** @license MIT License (c) copyright 2010-2017 original author or authors */\n\nimport { disposeNone } from '@most/disposable'\nimport { Disposable, Stream } from '@most/types'\n\nexport const never = (): Stream<never> => NEVER\n\nclass Never implements Stream<never> {\n  run(): Disposable {\n    return disposeNone()\n  }\n}\n\nconst NEVER = new Never()\n","/** @license MIT License (c) copyright 2010-2017 original author or authors */\n\nimport { propagateTask } from '../scheduler/PropagateTask'\nimport { delay } from '@most/scheduler'\nimport { Time, Stream, Sink, Scheduler, Disposable } from '@most/types'\n\nexport const at = <A>(t: Time, x: A): Stream<A> => new At(t, x)\n\nclass At<A> implements Stream<A> {\n  private readonly time: Time;\n  private readonly value: A;\n\n  constructor(t: Time, x: A) {\n    this.time = t\n    this.value = x\n  }\n\n  run(sink: Sink<A>, scheduler: Scheduler): Disposable {\n    return delay(this.time, propagateTask(runAt, this.value, sink), scheduler)\n  }\n}\n\nfunction runAt<A>(t: Time, x: A, sink: Sink<A>): void {\n  sink.event(t, x)\n  sink.end(t)\n}\n","/** @license MIT License (c) copyright 2010-2017 original author or authors */\n\nimport { at } from './at'\nimport { Stream } from '@most/types'\n\nexport const now = <A>(x: A): Stream<A> => at(0, x)\n","/** @license MIT License (c) copyright 2010-2016 original author or authors */\n/** @author Brian Cavalier */\n/** @author John Hann */\n\nimport { propagateEventTask } from '../scheduler/PropagateTask'\nimport { periodic as schedulePeriodic } from '@most/scheduler'\nimport { Stream, Sink, Scheduler, Disposable } from '@most/types'\n\n/**\n * Create a stream of events that occur at a regular period\n * @param {Number} period periodicity of events\n * @returns {Stream} new stream of periodic events, the event value is undefined\n */\nexport const periodic = (period: number): Stream<void> =>\n  new Periodic(period)\n\nclass Periodic implements Stream<void> {\n  private readonly period: number;\n\n  constructor(period: number) {\n    this.period = period\n  }\n\n  run(sink: Sink<void>, scheduler: Scheduler): Disposable {\n    return schedulePeriodic(this.period, propagateEventTask(undefined, sink), scheduler)\n  }\n}\n","import { Sink, Scheduler, Disposable, Stream } from '@most/types'\n\n/** @license MIT License (c) copyright 2010-2017 original author or authors */\n\nexport type RunStream<A> = (sink: Sink<A>, scheduler: Scheduler) => Disposable\n\nexport const newStream = <A>(run: RunStream<A>): Stream<A> => new StreamImpl(run)\n\nclass StreamImpl<A> {\n  readonly run: RunStream<A>;\n  constructor(run: RunStream<A>) {\n    this.run = run\n  }\n}\n","/** @license MIT License (c) copyright 2010-2017 original author or authors */\nimport { Disposable } from '@most/types'\n\nexport default class SettableDisposable implements Disposable {\n  private disposable?: Disposable;\n  private disposed: boolean;\n\n  constructor() {\n    this.disposable = undefined\n    this.disposed = false\n  }\n\n  setDisposable(disposable: Disposable): void {\n    if (this.disposable !== undefined) {\n      throw new Error('setDisposable called more than once')\n    }\n\n    this.disposable = disposable\n\n    if (this.disposed) {\n      disposable.dispose()\n    }\n  }\n\n  dispose(): void {\n    if (this.disposed) {\n      return\n    }\n\n    this.disposed = true\n\n    if (this.disposable !== undefined) {\n      this.disposable.dispose()\n    }\n  }\n}\n","/** @license MIT License (c) copyright 2010-2017 original author or authors */\n\nimport { curry2 } from '@most/prelude'\nimport SettableDisposable from './disposable/SettableDisposable'\nimport { Stream, Scheduler, Time, Disposable, Sink } from '@most/types'\n\nexport interface RunEffects {\n  <A>(stream: Stream<A>, scheduler: Scheduler): Promise<void>\n  <A>(stream: Stream<A>): (scheduler: Scheduler) => Promise<void>\n}\n\nexport const runEffects: RunEffects = curry2((stream: Stream<unknown>, scheduler: Scheduler): Promise<void> =>\n  new Promise((resolve, reject) =>\n    runStream(stream, scheduler, resolve, reject)))\n\nfunction runStream <A>(stream: Stream<A>, scheduler: Scheduler, resolve: (a: A | undefined) => void, reject: (e: Error) => void): void {\n  const disposable = new SettableDisposable()\n  const observer = new RunEffectsSink(resolve, reject, disposable)\n\n  disposable.setDisposable(stream.run(observer, scheduler))\n}\n\nclass RunEffectsSink<A> implements Sink<A> {\n  private readonly _disposable: Disposable\n  private active: boolean;\n  private _error: (e: Error) => void\n  private _end: (x: A | undefined) => void\n\n  constructor(end: (x: A | undefined) => void, error: (e: Error) => void, disposable: Disposable) {\n    this._end = end\n    this._error = error\n    this._disposable = disposable\n    this.active = true\n  }\n\n  event(): void {}\n\n  end(): void {\n    if (!this.active) {\n      return\n    }\n    this.dispose(this._error, this._end, undefined)\n  }\n\n  error(_t: Time, e: Error): void {\n    this.dispose(this._error, this._error, e)\n  }\n\n  private dispose <X>(error: (e: Error) => void, end: (x: X) => void, x: X): void {\n    this.active = false\n    tryDispose(error, end, x, this._disposable)\n  }\n}\n\nfunction tryDispose <X>(error: (e: Error) => void, end: (x: X) => void, x: X, disposable: Disposable): void {\n  try {\n    disposable.dispose()\n  } catch (e) {\n    error(e)\n    return\n  }\n\n  end(x)\n}\n","/** @license MIT License (c) copyright 2010-2017 original author or authors */\nimport { Sink, Scheduler, Stream, Disposable } from '@most/types'\n\n/**\n * Run a Stream, sending all its events to the provided Sink.\n */\nexport const run = <A>(sink: Sink<A>, scheduler: Scheduler, stream: Stream<A>): Disposable =>\n  stream.run(sink, scheduler)\n","import { Sink, Time } from '@most/types'\n\nexport default class RelativeSink<A> implements Sink<A> {\n  readonly offset: number\n  readonly sink: Sink<A>\n\n  constructor(offset: number, sink: Sink<A>) {\n    this.sink = sink\n    this.offset = offset\n  }\n\n  event(t: Time, x: A): void {\n    this.sink.event(t + this.offset, x)\n  }\n\n  error(t: Time, e: Error): void {\n    this.sink.error(t + this.offset, e)\n  }\n\n  end(t: Time): void {\n    this.sink.end(t + this.offset)\n  }\n}\n","import RelativeSink from '../sink/RelativeSink'\nimport { schedulerRelativeTo } from '@most/scheduler'\nimport { Time, Stream, Sink, Scheduler, Disposable } from '@most/types'\n\n/**\n * Create a stream with its own local clock\n * This transforms time from the provided scheduler's clock to a stream-local\n * clock (which starts at 0), and then *back* to the scheduler's clock before\n * propagating events to sink.  In other words, upstream sources will see local times,\n * and downstream sinks will see non-local (original) times.\n */\nexport const withLocalTime = <A>(origin: Time, stream: Stream<A>): Stream<A> =>\n  new WithLocalTime(origin, stream)\n\nclass WithLocalTime<A> implements Stream<A> {\n  private readonly origin: Time;\n  private readonly source: Stream<A>;\n\n  constructor(origin: Time, source: Stream<A>) {\n    this.origin = origin\n    this.source = source\n  }\n\n  run(sink: Sink<A>, scheduler: Scheduler): Disposable {\n    return this.source.run(relativeSink(this.origin, sink), schedulerRelativeTo(this.origin, scheduler))\n  }\n}\n\n/**\n * Accumulate offsets instead of nesting RelativeSinks, which can happen\n * with higher-order stream and combinators like continueWith when they're\n * applied recursively.\n */\nexport const relativeSink = <A>(origin: Time, sink: Sink<A>): Sink<A> =>\n  sink instanceof RelativeSink\n    ? new RelativeSink(origin + sink.offset, sink.sink)\n    : new RelativeSink(origin, sink)\n","/** @license MIT License (c) copyright 2010-2017 original author or authors */\n/** @author Brian Cavalier */\nimport { Sink, Time } from '@most/types'\n\nexport default abstract class Pipe<A, B> implements Sink<A> {\n  protected readonly sink: Sink<B>\n\n  constructor(sink: Sink<B>) {\n    this.sink = sink\n  }\n\n  abstract event (t: Time, x: A): void\n\n  end(t: Time): void {\n    return this.sink.end(t)\n  }\n\n  error(t: Time, e: Error): void {\n    return this.sink.error(t, e)\n  }\n}\n","/** @license MIT License (c) copyright 2010 original author or authors */\n\nimport Pipe from '../sink/Pipe'\nimport { empty, isCanonicalEmpty } from '../source/empty'\nimport { Stream, Sink, Scheduler, Time, Disposable } from '@most/types'\n\nexport interface SeedValue<S, V> { seed: S, value: V }\n\n/**\n * Generalized feedback loop. Call a stepper function for each event. The stepper\n * will be called with 2 params: the current seed and the an event value.  It must\n * return a new { seed, value } pair. The `seed` will be fed back into the next\n * invocation of stepper, and the `value` will be propagated as the event value.\n * @param stepper loop step function\n * @param seed initial seed value passed to first stepper call\n * @param stream event stream\n * @returns new stream whose values are the `value` field of the objects\n * returned by the stepper\n */\nexport const loop = <A, B, S>(stepper: (seed: S, a: A) => SeedValue<S, B>, seed: S, stream: Stream<A>): Stream<B> =>\n  isCanonicalEmpty(stream) ? empty()\n    : new Loop(stepper, seed, stream)\n\nclass Loop<A, B, S> implements Stream<B> {\n  private readonly step: (seed: S, a: A) => SeedValue<S, B>\n  private readonly seed: S;\n  private readonly source: Stream<A>\n\n  constructor(stepper: (seed: S, a: A) => SeedValue<S, B>, seed: S, source: Stream<A>) {\n    this.step = stepper\n    this.seed = seed\n    this.source = source\n  }\n\n  run(sink: Sink<B>, scheduler: Scheduler): Disposable {\n    return this.source.run(new LoopSink(this.step, this.seed, sink), scheduler)\n  }\n}\n\nclass LoopSink<A, B, S> extends Pipe<A, B> implements Sink<A> {\n  private readonly step: (seed: S, a: A) => SeedValue<S, B>;\n  private seed: S;\n  constructor(stepper: (seed: S, a: A) => SeedValue<S, B>, seed: S, sink: Sink<B>) {\n    super(sink)\n    this.step = stepper\n    this.seed = seed\n  }\n\n  event(t: Time, x: A): void {\n    const result = this.step(this.seed, x)\n    this.seed = result.seed\n    this.sink.event(t, result.value)\n  }\n}\n","/** @license MIT License (c) copyright 2010-2016 original author or authors */\n/** @author Brian Cavalier */\n/** @author John Hann */\n\nimport Pipe from '../sink/Pipe'\nimport { disposeBoth } from '@most/disposable'\nimport { asap } from '@most/scheduler'\nimport { propagateEventTask } from '../scheduler/PropagateTask'\nimport { Stream, Sink, Scheduler, Time, Disposable } from '@most/types'\n\n/**\n * Create a stream containing successive reduce results of applying f to\n * the previous reduce result and the current stream item.\n * @param f reducer function\n * @param initial initial value\n * @param stream stream to scan\n * @returns new stream containing successive reduce results\n */\nexport const scan = <A, B>(f: (b: B, a: A) => B, initial: B, stream: Stream<A>): Stream<B> =>\n  new Scan(f, initial, stream)\n\nclass Scan<A, B> implements Stream<B> {\n  private readonly source: Stream<A>;\n  private readonly f: (b: B, a: A) => B;\n  private readonly value: B;\n\n  constructor(f: (b: B, a: A) => B, z: B, source: Stream<A>) {\n    this.source = source\n    this.f = f\n    this.value = z\n  }\n\n  run(sink: Sink<B>, scheduler: Scheduler): Disposable {\n    const d1 = asap(propagateEventTask(this.value, sink), scheduler)\n    const d2 = this.source.run(new ScanSink(this.f, this.value, sink), scheduler)\n    return disposeBoth(d1, d2)\n  }\n}\n\nclass ScanSink<A, B> extends Pipe<A, B> implements Sink<A> {\n  private readonly f: (b: B, a: A) => B\n  private value: B;\n\n  constructor(f: (b: B, a: A) => B, z: B, sink: Sink<B>) {\n    super(sink)\n    this.f = f\n    this.value = z\n  }\n\n  event(t: Time, x: A): void {\n    const f = this.f\n    this.value = f(this.value, x)\n    this.sink.event(t, this.value)\n  }\n}\n","/** @license MIT License (c) copyright 2010-2016 original author or authors */\n/** @author Brian Cavalier */\n/** @author John Hann */\n\nimport Pipe from '../sink/Pipe'\nimport { run } from '../run'\nimport { withLocalTime } from './withLocalTime'\nimport { disposeOnce, tryDispose } from '@most/disposable'\nimport { Stream, Scheduler, Time, Disposable, Sink } from '@most/types'\n\nexport const continueWith = <A, B = A>(f: () => Stream<B>, stream: Stream<A>): Stream<A | B> =>\n  new ContinueWith(f, stream)\n\nclass ContinueWith<A, B> implements Stream<A | B> {\n  private readonly f: () => Stream<B>\n  private readonly source: Stream<A>\n\n  constructor(f: () => Stream<B>, source: Stream<A>) {\n    this.f = f\n    this.source = source\n  }\n\n  run(sink: Sink<A | B>, scheduler: Scheduler): Disposable {\n    return new ContinueWithSink(this.f, this.source, sink, scheduler)\n  }\n}\n\nclass ContinueWithSink<A, B> extends Pipe<A, A | B> implements Sink<A>, Disposable {\n  private readonly f: () => Stream<B>;\n  private readonly scheduler: Scheduler;\n  private active: boolean;\n  private disposable: Disposable\n\n  constructor(f: () => Stream<B>, source: Stream<A>, sink: Sink<A | B>, scheduler: Scheduler) {\n    super(sink)\n    this.f = f\n    this.scheduler = scheduler\n    this.active = true\n    this.disposable = disposeOnce(source.run(this, scheduler))\n  }\n\n  event(t: Time, x: A): void {\n    if (!this.active) {\n      return\n    }\n    this.sink.event(t, x)\n  }\n\n  end(t: Time): void {\n    if (!this.active) {\n      return\n    }\n\n    tryDispose(t, this.disposable, this.sink)\n\n    this.startNext(t, this.sink)\n  }\n\n  private startNext(t: Time, sink: Sink<A | B>): void {\n    try {\n      this.disposable = this.continue(this.f, t, sink)\n    } catch (e) {\n      sink.error(t, e)\n    }\n  }\n\n  private continue(f: () => Stream<B>, t: Time, sink: Sink<A | B>): Disposable {\n    return run(sink, this.scheduler, withLocalTime(t, f()))\n  }\n\n  dispose(): void {\n    this.active = false\n    return this.disposable.dispose()\n  }\n}\n","/** @license MIT License (c) copyright 2010-2017 original author or authors */\n\nimport { now } from '../source/now'\nimport { continueWith } from './continueWith'\nimport { Stream } from '@most/types'\n\nexport const startWith = <A>(x: A, stream: Stream<A>): Stream<A> =>\n  continueWith(() => stream, now(x))\n","/** @license MIT License (c) copyright 2010-2016 original author or authors */\n/** @author Brian Cavalier */\n/** @author John Hann */\n\nimport Pipe from '../sink/Pipe'\nimport { isCanonicalEmpty } from '../source/empty'\nimport { Stream, Sink, Scheduler, Time, Disposable } from '@most/types'\n\nexport default class Filter<A> implements Stream<A> {\n  readonly p: (a: A) => boolean\n  readonly source: Stream<A>\n\n  constructor(p: (a: A) => boolean, source: Stream<A>) {\n    this.p = p\n    this.source = source\n  }\n\n  run(sink: Sink<A>, scheduler: Scheduler): Disposable {\n    return this.source.run(new FilterSink(this.p, sink), scheduler)\n  }\n\n  /**\n   * Create a filtered source, fusing adjacent filter.filter if possible\n   * @param {function(x:*):boolean} p filtering predicate\n   * @param {{run:function}} source source to filter\n   * @returns {Filter} filtered source\n   */\n  static create <A>(p: (a: A) => boolean, source: Stream<A>): Stream<A> {\n    if (isCanonicalEmpty(source)) {\n      return source\n    }\n\n    if (source instanceof Filter) {\n      return new Filter(and(source.p, p), source.source)\n    }\n\n    return new Filter(p, source)\n  }\n}\n\nclass FilterSink<A> extends Pipe<A, A> implements Sink<A> {\n  private readonly p: (a: A) => boolean\n\n  constructor(p: (a: A) => boolean, sink: Sink<A>) {\n    super(sink)\n    this.p = p\n  }\n\n  event(t: Time, x: A): void {\n    const p = this.p\n    p(x) && this.sink.event(t, x)\n  }\n}\n\nconst and = <A>(p: (a: A) => boolean, q: (a: A) => boolean) => (x: A): boolean => p(x) && q(x)\n","/** @license MIT License (c) copyright 2010-2016 original author or authors */\n/** @author Brian Cavalier */\n/** @author John Hann */\n\nimport Pipe from '../sink/Pipe'\nimport { Stream, Sink, Scheduler, Time, Disposable } from '@most/types'\n\nexport default class FilterMap<A, B> implements Stream<B> {\n  private readonly p: (a: A) => boolean;\n  private readonly f: (a: A) => B;\n  private readonly source: Stream<A>;\n\n  constructor(p: (a: A) => boolean, f: (a: A) => B, source: Stream<A>) {\n    this.p = p\n    this.f = f\n    this.source = source\n  }\n\n  run(sink: Sink<B>, scheduler: Scheduler): Disposable {\n    return this.source.run(new FilterMapSink(this.p, this.f, sink), scheduler)\n  }\n}\n\nclass FilterMapSink<A, B> extends Pipe<A, B> implements Sink<A> {\n  private readonly p: (a: A) => boolean;\n  private readonly f: (a: A) => B;\n\n  constructor(p: (a: A) => boolean, f: (a: A) => B, sink: Sink<B>) {\n    super(sink)\n    this.p = p\n    this.f = f\n  }\n\n  event(t: Time, x: A): void {\n    const f = this.f\n    const p = this.p\n    p(x) && this.sink.event(t, f(x))\n  }\n}\n","/** @license MIT License (c) copyright 2010-2016 original author or authors */\n/** @author Brian Cavalier */\n/** @author John Hann */\n\nimport Pipe from '../sink/Pipe'\nimport Filter from './Filter'\nimport FilterMap from './FilterMap'\nimport { compose } from '@most/prelude'\nimport { isCanonicalEmpty, empty } from '../source/empty'\nimport { Stream, Sink, Scheduler, Time, Disposable } from '@most/types'\n\nexport default class Map<A, B> implements Stream<B> {\n  readonly f: (a: A) => B;\n  readonly source: Stream<A>;\n\n  constructor(f: (a: A) => B, source: Stream<A>) {\n    this.f = f\n    this.source = source\n  }\n\n  run(sink: Sink<B>, scheduler: Scheduler): Disposable {\n    return this.source.run(new MapSink(this.f, sink), scheduler)\n  }\n\n  /**\n   * Create a mapped source, fusing adjacent map.map, filter.map,\n   * and filter.map.map if possible\n   * @param {function(*):*} f mapping function\n   * @param {{run:function}} source source to map\n   * @returns {Map|FilterMap} mapped source, possibly fused\n   */\n  static create <A, B>(f: (a: A) => B, source: Stream<A>): Stream<B> {\n    if (isCanonicalEmpty(source)) {\n      return empty()\n    }\n\n    if (source instanceof Map) {\n      return new Map(compose(f, source.f), source.source)\n    }\n\n    if (source instanceof Filter) {\n      return new FilterMap(source.p, f, source.source)\n    }\n\n    return new Map(f, source)\n  }\n}\n\nclass MapSink<A, B> extends Pipe<A, B> implements Sink<A> {\n  private readonly f: (a: A) => B;\n\n  constructor(f: (a: A) => B, sink: Sink<B>) {\n    super(sink)\n    this.f = f\n  }\n\n  event(t: Time, x: A): void {\n    const f = this.f\n    this.sink.event(t, f(x))\n  }\n}\n","/** @license MIT License (c) copyright 2010-2016 original author or authors */\n/** @author Brian Cavalier */\n/** @author John Hann */\n\nimport Map from '../fusion/Map'\nimport Pipe from '../sink/Pipe'\nimport { Stream, Sink, Scheduler, Time, Disposable } from '@most/types'\n\n/**\n * Transform each value in the stream by applying f to each\n * @param f mapping function\n * @param stream stream to map\n * @returns stream containing items transformed by f\n */\nexport const map = <A, B>(f: (a: A) => B, stream: Stream<A>): Stream<B> =>\n  Map.create(f, stream)\n\n/**\n* Replace each value in the stream with x\n* @param x\n* @param stream\n* @returns stream containing items replaced with x\n*/\nexport const constant = <A, B>(x: B, stream: Stream<A>): Stream<B> =>\n  map(() => x, stream)\n\n/**\n* Perform a side effect for each item in the stream\n* @param f side effect to execute for each item. The return value will be discarded.\n* @param stream stream to tap\n* @returns new stream containing the same items as this stream\n*/\nexport const tap = <A>(f: (a: A) => unknown, stream: Stream<A>): Stream<A> =>\n  new Tap(f, stream)\n\nclass Tap<A> implements Stream<A> {\n  private readonly f: (a: A) => unknown;\n  private readonly source: Stream<A>;\n\n  constructor(f: (a: A) => unknown, source: Stream<A>) {\n    this.source = source\n    this.f = f\n  }\n\n  run(sink: Sink<A>, scheduler: Scheduler): Disposable {\n    return this.source.run(new TapSink(this.f, sink), scheduler)\n  }\n}\n\nclass TapSink<A> extends Pipe<A, A> implements Sink<A> {\n  private readonly f: (a: A) => unknown;\n\n  constructor(f: (a: A) => unknown, sink: Sink<A>) {\n    super(sink)\n    this.f = f\n  }\n\n  event(t: Time, x: A): void {\n    const f = this.f\n    f(x)\n    this.sink.event(t, x)\n  }\n}\n","/** @license MIT License (c) copyright 2010-2016 original author or authors */\n/** @author Brian Cavalier */\n/** @author John Hann */\n\nimport Pipe from './Pipe'\nimport { Time, Sink } from '@most/types'\n\nexport interface IndexedValue<A> {\n  readonly index: number\n  readonly value: A\n  readonly active: boolean\n}\n\nexport class IndexSink<A> extends Pipe<A, IndexedValue<A | undefined>> implements Sink<A> {\n  readonly index: number\n  active: boolean\n  value: A | undefined\n\n  constructor(i: number, sink: Sink<IndexedValue<A | undefined>>) {\n    super(sink)\n    this.index = i\n    this.active = true\n    this.value = undefined\n  }\n\n  event(t: Time, x: A): void {\n    if (!this.active) {\n      return\n    }\n    this.value = x\n    this.sink.event(t, this)\n  }\n\n  end(t: Time): void {\n    if (!this.active) {\n      return\n    }\n    this.active = false\n    this.sink.event(t, this)\n  }\n}\n","/** @license MIT License (c) copyright 2010-2016 original author or authors */\n/** @author Brian Cavalier */\n/** @author John Hann */\n\n/**\n * TODO: find a better way (without `any`)\n */\nexport default function invoke <F extends(...args: any[]) => any>(f: F, args: Parameters<F>): ReturnType<F> {\n  /* eslint complexity: [2,7] */\n  switch (args.length) {\n    case 0: return f()\n    case 1: return f(args[0])\n    case 2: return f(args[0], args[1])\n    case 3: return f(args[0], args[1], args[2])\n    case 4: return f(args[0], args[1], args[2], args[3])\n    case 5: return f(args[0], args[1], args[2], args[3], args[4])\n    default:\n      return f.apply(undefined, args)\n  }\n}\n","/** @license MIT License (c) copyright 2010 original author or authors */\n\nimport { map } from './transform'\nimport { empty, containsCanonicalEmpty } from '../source/empty'\nimport Pipe from '../sink/Pipe'\nimport { IndexSink, IndexedValue } from '../sink/IndexSink'\nimport { disposeAll, tryDispose } from '@most/disposable'\nimport invoke from '../invoke'\nimport { Stream, Sink, Scheduler, Disposable, Time } from '@most/types'\nimport { ToStreamsArray } from './variadic'\n\n/**\n * Combine latest events from two streams\n * @param f function to combine most recent events\n * @param stream1\n * @param stream2\n * @returns stream containing the result of applying f to the most recent\n *  event of each input stream, whenever a new event arrives on any stream.\n */\nexport const combine = <A, B, C>(f: (a: A, b: B) => C, stream1: Stream<A>, stream2: Stream<B>): Stream<C> =>\n  combineArray(f, [stream1, stream2])\n\n/**\n* Combine latest events from all input streams\n* @param f function to combine most recent events\n* @param streams most recent events\n* @returns stream containing the result of applying f to the most recent\n*  event of each input stream, whenever a new event arrives on any stream.\n*/\nexport const combineArray = <Args extends unknown[], R>(f: (...args: Args) => R, streams: ToStreamsArray<Args>): Stream<R> =>\n  streams.length === 0 || containsCanonicalEmpty(streams) ? empty()\n    : streams.length === 1 ? map(f as any, streams[0])\n      : new Combine(f, streams)\n\nclass Combine<Args extends unknown[], B> implements Stream<B> {\n  private readonly f: (...args: Args) => B\n  private readonly sources: ToStreamsArray<Args>;\n\n  constructor(f: (...args: Args) => B, sources: ToStreamsArray<Args>) {\n    this.f = f\n    this.sources = sources\n  }\n\n  run(sink: Sink<B>, scheduler: Scheduler): Disposable {\n    const l = this.sources.length\n    const disposables = new Array(l)\n    const sinks = new Array(l)\n\n    const mergeSink = new CombineSink(disposables, sinks.length, sink, this.f)\n\n    for (let indexSink, i = 0; i < l; ++i) {\n      indexSink = sinks[i] = new IndexSink(i, mergeSink)\n      disposables[i] = this.sources[i].run(indexSink, scheduler)\n    }\n\n    return disposeAll(disposables)\n  }\n}\n\nclass CombineSink<A, Args extends A[], B> extends Pipe<IndexedValue<A>, B> implements Sink<IndexedValue<A>> {\n  private readonly disposables: Disposable[]\n  private readonly f: (...args: Args) => B\n  private awaiting: number\n  private readonly hasValue: boolean[]\n  private activeCount: number\n  private readonly values: Args\n\n  constructor(disposables: Disposable[], length: number, sink: Sink<B>, f: (...args: Args) => B) {\n    super(sink)\n    this.disposables = disposables\n    this.f = f\n\n    this.awaiting = length\n    this.values = new Array(length) as Args\n    this.hasValue = new Array(length).fill(false)\n    this.activeCount = length\n  }\n\n  event(t: Time, indexedValue: IndexedValue<A>): void {\n    if (!indexedValue.active) {\n      this.dispose(t, indexedValue.index)\n      return\n    }\n\n    const i = indexedValue.index\n    const awaiting = this.updateReady(i)\n\n    this.values[i] = indexedValue.value\n    if (awaiting === 0) {\n      this.sink.event(t, invoke(this.f, this.values))\n    }\n  }\n\n  private updateReady(index: number): number {\n    if (this.awaiting > 0) {\n      if (!this.hasValue[index]) {\n        this.hasValue[index] = true\n        this.awaiting -= 1\n      }\n    }\n    return this.awaiting\n  }\n\n  private dispose(t: Time, index: number): void {\n    tryDispose(t, this.disposables[index], this.sink)\n    if (--this.activeCount === 0) {\n      this.sink.end(t)\n    }\n  }\n}\n","/** @license MIT License (c) copyright 2010-2016 original author or authors */\n/** @author Brian Cavalier */\n/** @author John Hann */\n\nimport { combine } from './combine'\nimport { apply } from '@most/prelude'\nimport { Stream } from '@most/types'\n\n/**\n * Assume fs is a stream containing functions, and apply the latest function\n * in fs to the latest value in xs.\n * fs:         --f---------g--------h------>\n * xs:         -a-------b-------c-------d-->\n * ap(fs, xs): --fa-----fb-gb---gc--hc--hd->\n * @param {Stream} fs stream of functions to apply to the latest x\n * @param {Stream} xs stream of values to which to apply all the latest f\n * @returns {Stream} stream containing all the applications of fs to xs\n */\nexport function ap<A, B>(fs: Stream<(a: A) => B>, xs: Stream<A>): Stream<B> {\n  return combine(apply, fs, xs)\n}\n","/** @license MIT License (c) copyright 2010 original author or authors */\n\nimport { disposeAll, disposeNone, disposeOnce, tryDispose } from '@most/disposable'\nimport { empty, isCanonicalEmpty } from '../source/empty'\nimport { id as identity } from '@most/prelude'\nimport { schedulerRelativeTo } from '@most/scheduler'\nimport { Time, Disposable, Sink, Scheduler, Stream } from '@most/types'\n\nexport const mergeConcurrently = <A>(concurrency: number, stream: Stream<Stream<A>>): Stream<A> =>\n  mergeMapConcurrently(identity, concurrency, stream)\n\nexport const mergeMapConcurrently = <A, B>(f: (a: A) => Stream<B>, concurrency: number, stream: Stream<A>): Stream<B> =>\n  isCanonicalEmpty(stream) ? empty()\n    : new MergeConcurrently(f, concurrency, stream)\n\nclass MergeConcurrently<A, B> implements Stream<B> {\n  private readonly concurrency: number;\n  private readonly f: (a: A) => Stream<B>\n  private readonly source: Stream<A>\n\n  constructor(f: (a: A) => Stream<B>, concurrency: number, source: Stream<A>) {\n    this.f = f\n    this.concurrency = concurrency\n    this.source = source\n  }\n\n  run(sink: Sink<B>, scheduler: Scheduler): Disposable {\n    return new Outer(this.f, this.concurrency, this.source, sink, scheduler)\n  }\n}\n\ninterface NonEmptyArray<A> extends Array<A> {\n  readonly [0]: A\n  shift(): A\n}\nconst isNonEmpty = <A>(array: A[]): array is NonEmptyArray<A> => array.length > 0\n\nclass Outer<A, B> implements Sink<A>, Disposable {\n  private readonly scheduler: Scheduler;\n  private readonly disposable: Disposable;\n  private active: boolean;\n  private readonly concurrency: number;\n  private readonly f: (a: A) => Stream<B>;\n  private readonly sink: Sink<B>;\n  private readonly current: Disposable[];\n  private readonly pending: A[];\n\n  constructor(f: (a: A) => Stream<B>, concurrency: number, source: Stream<A>, sink: Sink<B>, scheduler: Scheduler) {\n    this.f = f\n    this.concurrency = concurrency\n    this.sink = sink\n    this.scheduler = scheduler\n    this.pending = []\n    this.current = []\n    this.disposable = disposeOnce(source.run(this, scheduler))\n    this.active = true\n  }\n\n  event(t: Time, x: A): void {\n    this.addInner(t, x)\n  }\n\n  private addInner(t: Time, x: A): void {\n    if (this.current.length < this.concurrency) {\n      this.startInner(t, x)\n    } else {\n      this.pending.push(x)\n    }\n  }\n\n  private startInner(t: Time, x: A): void {\n    try {\n      this.initInner(t, x)\n    } catch (e) {\n      this.error(t, e)\n    }\n  }\n\n  private initInner(t: Time, x: A): void {\n    const innerSink = new Inner(t, this, this.sink)\n    innerSink.disposable = mapAndRun(this.f, t, x, innerSink, this.scheduler)\n    this.current.push(innerSink)\n  }\n\n  end(t: Time): void {\n    this.active = false\n    tryDispose(t, this.disposable, this.sink)\n    this.checkEnd(t)\n  }\n\n  error(t: Time, e: Error): void{\n    this.active = false\n    this.sink.error(t, e)\n  }\n\n  dispose(): void {\n    this.active = false\n    this.pending.length = 0\n    this.disposable.dispose()\n    disposeAll(this.current).dispose()\n  }\n\n  endInner(t: Time, inner: Disposable): void {\n    const i = this.current.indexOf(inner)\n    if (i >= 0) {\n      this.current.splice(i, 1)\n    }\n    tryDispose(t, inner, this)\n\n    const pending = this.pending\n    if (isNonEmpty(pending)) {\n      this.startInner(t, pending.shift())\n    } else {\n      this.checkEnd(t)\n    }\n  }\n\n  private checkEnd(t: Time): void {\n    if (!this.active && this.current.length === 0) {\n      this.sink.end(t)\n    }\n  }\n}\n\nconst mapAndRun = <A, B>(f: (a: A) => Stream<B>, t: Time, x: A, sink: Sink<B>, scheduler: Scheduler): Disposable =>\n  f(x).run(sink, schedulerRelativeTo(t, scheduler))\n\nclass Inner<A, B> implements Sink<B>, Disposable {\n  private readonly time: number;\n  private readonly outer: Outer<A, B>;\n  disposable: Disposable;\n  private readonly sink: Sink<B>;\n\n  constructor(time: Time, outer: Outer<A, B>, sink: Sink<B>) {\n    this.time = time\n    this.outer = outer\n    this.sink = sink\n    this.disposable = disposeNone()\n  }\n\n  event(t: Time, x: B): void {\n    this.sink.event(t + this.time, x)\n  }\n\n  end(t: Time): void {\n    this.outer.endInner(t + this.time, this)\n  }\n\n  error(t: Time, e: Error): void {\n    this.outer.error(t + this.time, e)\n  }\n\n  dispose(): void {\n    return this.disposable.dispose()\n  }\n}\n","/** @license MIT License (c) copyright 2010-2016 original author or authors */\n/** @author Brian Cavalier */\n/** @author John Hann */\n\nimport { mergeConcurrently, mergeMapConcurrently } from './mergeConcurrently'\nimport { Stream } from '@most/types'\n\n/**\n * Map each value in the stream to a new stream, and merge it into the\n * returned outer stream. Event arrival times are preserved.\n * @param f chaining function, must return a Stream\n * @param stream\n * @returns new stream containing all events from each stream returned by f\n */\nexport const chain = <A, B>(f: (value: A) => Stream<B>, stream: Stream<A>): Stream<B> => mergeMapConcurrently(f, Infinity, stream)\n\n/**\n * Monadic join. Flatten a Stream<Stream<X>> to Stream<X> by merging inner\n * streams to the outer. Event arrival times are preserved.\n * @param stream stream of streams\n * @returns new stream containing all events of all inner streams\n */\nexport const join = <A>(stream: Stream<Stream<A>>): Stream<A> => mergeConcurrently(Infinity, stream)\n","/** @license MIT License (c) copyright 2010-2016 original author or authors */\n/** @author Brian Cavalier */\n/** @author John Hann */\n\nimport { mergeMapConcurrently } from './mergeConcurrently'\nimport { Stream } from '@most/types'\n\n/**\n * Map each value in stream to a new stream, and concatenate them all\n * stream:              -a---b---cX\n * f(a):                 1-1-1-1X\n * f(b):                        -2-2-2-2X\n * f(c):                                -3-3-3-3X\n * stream.concatMap(f): -1-1-1-1-2-2-2-2-3-3-3-3X\n * @param f function to map each value to a stream\n * @param stream\n * @returns new stream containing all events from each stream returned by f\n */\nexport const concatMap = <A, B>(f: (a: A) => Stream<B>, stream: Stream<A>): Stream<B> =>\n  mergeMapConcurrently(f, 1, stream)\n","/** @license MIT License (c) copyright 2010-2016 original author or authors */\n/** @author Brian Cavalier */\n/** @author John Hann */\n\nimport Pipe from '../sink/Pipe'\nimport { IndexSink, IndexedValue } from '../sink/IndexSink'\nimport { empty, isCanonicalEmpty } from '../source/empty'\nimport { disposeAll, tryDispose } from '@most/disposable'\nimport { reduce } from '@most/prelude'\nimport { Stream, Time, Disposable, Sink, Scheduler } from '@most/types'\n\n/**\n * @returns stream containing events from two streams in time order.\n * If two events are simultaneous they will be merged in arbitrary order.\n */\nexport function merge <A, B>(stream1: Stream<A>, stream2: Stream<B>): Stream<A | B> {\n  return mergeArray([stream1, stream2])\n}\n\n// TODO: use readonly Stream<any>[] once TS 3.4.x has been in the wild for \"enough\" time\ntype MergeArray<S extends ReadonlyArray<Stream<any>>> = Value<S[number]>\ntype Value<S> = S extends Stream<infer A> ? A : never\n\n/**\n * @param streams array of stream to merge\n * @returns stream containing events from all input observables\n * in time order.  If two events are simultaneous they will be merged in\n * arbitrary order.\n */\nexport const mergeArray = <S extends ReadonlyArray<Stream<any>>>(streams: S): Stream<MergeArray<S>> =>\n  mergeStreams(withoutCanonicalEmpty(streams))\n\n/**\n * This implements fusion/flattening for merge.  It will\n * fuse adjacent merge operations.  For example:\n * - a.merge(b).merge(c) effectively becomes merge(a, b, c)\n * - merge(a, merge(b, c)) effectively becomes merge(a, b, c)\n * It does this by concatenating the sources arrays of\n * any nested Merge sources, in effect \"flattening\" nested\n * merge operations into a single merge.\n * TODO: use {@link MergeArray}\n */\nconst mergeStreams = <A>(streams: Stream<A>[]): Stream<A> =>\n  streams.length === 0 ? empty()\n    : streams.length === 1 ? streams[0]\n      : new Merge(reduce<Stream<A>[], Stream<A>>(appendSources, [], streams))\n\nconst withoutCanonicalEmpty = <A>(streams: ReadonlyArray<Stream<A>>): Stream<A>[] =>\n  streams.filter(isNotCanonicalEmpty)\n\nconst isNotCanonicalEmpty = <A>(stream: Stream<A>): boolean =>\n  !isCanonicalEmpty(stream)\n\nconst appendSources = <A>(sources: Stream<A>[], stream: Stream<A>): Stream<A>[] =>\n  sources.concat(stream instanceof Merge ? stream.sources : stream)\n\nclass Merge<A> implements Stream<A> {\n  readonly sources: Stream<A>[];\n\n  constructor(sources: Stream<A>[]) {\n    this.sources = sources\n  }\n\n  run(sink: Sink<A>, scheduler: Scheduler): Disposable {\n    const l = this.sources.length\n    const disposables: Disposable[] = new Array(l)\n    const sinks: Sink<A>[] = new Array(l)\n\n    const mergeSink = new MergeSink(disposables, sinks, sink)\n\n    for (let indexSink, i = 0; i < l; ++i) {\n      indexSink = sinks[i] = new IndexSink(i, mergeSink)\n      disposables[i] = this.sources[i].run(indexSink, scheduler)\n    }\n\n    return disposeAll(disposables)\n  }\n}\n\nclass MergeSink<A> extends Pipe<IndexedValue<A>, A> implements Sink<IndexedValue<A>> {\n  private readonly disposables: Disposable[];\n  private activeCount: number;\n\n  constructor(disposables: Disposable[], sinks: Sink<unknown>[], sink: Sink<A>) {\n    super(sink)\n    this.disposables = disposables\n    this.activeCount = sinks.length\n  }\n\n  event(t: Time, indexValue: IndexedValue<A>): void {\n    if (!indexValue.active) {\n      this.dispose(t, indexValue.index)\n      return\n    }\n    this.sink.event(t, indexValue.value)\n  }\n\n  private dispose(t: Time, index: number): void {\n    tryDispose(t, this.disposables[index], this.sink)\n    if (--this.activeCount === 0) {\n      this.sink.end(t)\n    }\n  }\n}\n","/** @license MIT License (c) copyright 2010 original author or authors */\n\nimport Pipe from '../sink/Pipe'\nimport { disposeBoth } from '@most/disposable'\nimport { empty, isCanonicalEmpty } from '../source/empty'\nimport { Stream, Sink, Scheduler, Time, Disposable } from '@most/types'\n\nexport const sample = <A, B>(values: Stream<A>, sampler: Stream<B>): Stream<A> =>\n  snapshot(x => x, values, sampler)\n\nexport const snapshot = <A, B, C>(f: (a: A, b: B) => C, values: Stream<A>, sampler: Stream<B>): Stream<C> =>\n  isCanonicalEmpty(sampler) || isCanonicalEmpty(values)\n    ? empty()\n    : new Snapshot(f, values, sampler)\n\nexport class Snapshot<A, B, C> implements Stream<C> {\n  private readonly f: (a: A, b: B) => C\n  private readonly values: Stream<A>\n  private readonly sampler: Stream<B>\n\n  constructor(f: (a: A, b: B) => C, values: Stream<A>, sampler: Stream<B>) {\n    this.f = f\n    this.values = values\n    this.sampler = sampler\n  }\n\n  run(sink: Sink<C>, scheduler: Scheduler): Disposable {\n    const sampleSink = new SnapshotSink(this.f, sink)\n    const valuesDisposable = this.values.run(sampleSink.latest, scheduler)\n    const samplerDisposable = this.sampler.run(sampleSink, scheduler)\n\n    return disposeBoth(samplerDisposable, valuesDisposable)\n  }\n}\n\nexport class SnapshotSink<A, B, C> extends Pipe<B, C> implements Sink<B> {\n  private readonly f: (a: A, b: B) => C\n  readonly latest: LatestValueSink<A>;\n\n  constructor(f: (a: A, b: B) => C, sink: Sink<C>) {\n    super(sink)\n    this.f = f\n    this.latest = new LatestValueSink(this)\n  }\n\n  event(t: Time, x: B): void {\n    if (this.latest.hasValue) {\n      const f = this.f\n      // TODO: value should be boxed to avoid ! bang\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      this.sink.event(t, f(this.latest.value!, x))\n    }\n  }\n}\n\nexport class LatestValueSink<A> extends Pipe<A, A> implements Sink<A> {\n  hasValue: boolean;\n  value?: A;\n\n  constructor(sink: Sink<unknown>) {\n    super(sink)\n    this.hasValue = false\n  }\n\n  event(_t: Time, x: A): void {\n    this.value = x\n    this.hasValue = true\n  }\n\n  end(): void {}\n}\n","/** @license MIT License (c) copyright 2010 original author or authors */\n\n// A slice Bounds type that narrows min values via accumulation\n// and max values via Math.min.\n// type Bounds = { min: number, max: number }\n// Notes:\n// 0 <= min <= max\n// slice(min2, max2, slice(min1, max1, s)) ~ slice(min1 + min2, Math.min(max1, min1 + max2), s)\n// A bounds has a 1d coord system with origin 0, extending to Infinity.  Both min and max\n// are relative to the origin (0).  However, when merging bounds b1 and b2, we\n// *interpret* b2 as being relative to b1, hence adding min1 to *both* min2 and max2.\n// This essentially translates b2's coordinates back into origin coordinates\n// as bounds are merged.\n\nexport interface Bounds {\n  readonly min: number\n  readonly max: number\n}\n\n// Construct a constrained bounds\nexport const boundsFrom = (unsafeMin: number, unsafeMax: number): Bounds => {\n  const min = Math.max(0, unsafeMin)\n  const max = Math.max(min, unsafeMax)\n  return { min, max }\n}\n\n// Combine 2 bounds by narrowing min and max\nexport const mergeBounds = (b1: Bounds, b2: Bounds): Bounds =>\n  boundsFrom(b1.min + b2.min, Math.min(b1.max, b1.min + b2.max))\n\n// Nil bounds excludes all slice indices\nexport const isNilBounds = (b: Bounds): boolean =>\n  b.min >= b.max\n\n// Infinite bounds includes all slice indices\nexport const isInfiniteBounds = (b: Bounds): boolean =>\n  b.min <= 0 && b.max === Infinity\n","import { empty, isCanonicalEmpty } from '../../source/empty'\nimport { boundsFrom, isNilBounds, isInfiniteBounds, mergeBounds, Bounds } from './bounds'\nimport Map from '../../fusion/Map'\nimport Pipe from '../../sink/Pipe'\nimport SettableDisposable from '../../disposable/SettableDisposable'\nimport { Stream, Sink, Scheduler, Disposable, Time } from '@most/types'\n\n// TODO: split into smaller files\n\n/**\n * @param n\n * @param stream\n * @returns new stream containing only up to the first n items from stream\n */\nexport const take = <A>(n: number, stream: Stream<A>): Stream<A> =>\n  slice(0, n, stream)\n\n/**\n * @param n\n * @param stream\n * @returns new stream with the first n items removed\n */\nexport const skip = <A>(n: number, stream: Stream<A>): Stream<A> =>\n  slice(n, Infinity, stream)\n\n/**\n * Slice a stream by index. Negative start/end indexes are not supported\n * @param start\n * @param end\n * @param stream\n * @returns stream containing items where start <= index < end\n */\nexport const slice = <A>(start: number, end: number, stream: Stream<A>): Stream<A> =>\n  sliceBounds(boundsFrom(start, end), stream)\n\nconst sliceBounds = <A>(bounds: Bounds, stream: Stream<A>): Stream<A> =>\n  isSliceEmpty(bounds, stream) ? empty()\n    : stream instanceof Map ? commuteMapSlice(bounds, stream)\n      : stream instanceof Slice ? fuseSlice(bounds, stream)\n        : createSlice(bounds, stream)\n\nconst isSliceEmpty = <A>(bounds: Bounds, stream: Stream<A>): boolean =>\n  isCanonicalEmpty(stream) || isNilBounds(bounds)\n\nconst createSlice = <A>(bounds: Bounds, stream: Stream<A>): Stream<A> =>\n  isInfiniteBounds(bounds) ? stream : new Slice(bounds, stream)\n\nconst commuteMapSlice = <A, B>(bounds: Bounds, mapStream: Map<A, B>): Stream<B> =>\n  Map.create(mapStream.f, sliceBounds(bounds, mapStream.source))\n\nconst fuseSlice = <A>(bounds: Bounds, sliceStream: Slice<A>): Stream<A> =>\n  sliceBounds(mergeBounds(sliceStream.bounds, bounds), sliceStream.source)\n\nexport class Slice<A> implements Stream<A> {\n  readonly bounds: Bounds;\n  readonly source: Stream<A>;\n\n  constructor(bounds: Bounds, source: Stream<A>) {\n    this.source = source\n    this.bounds = bounds\n  }\n\n  run(sink: Sink<A>, scheduler: Scheduler): Disposable {\n    const disposable = new SettableDisposable()\n    const sliceSink = new SliceSink(this.bounds.min, this.bounds.max - this.bounds.min, sink, disposable)\n\n    disposable.setDisposable(this.source.run(sliceSink, scheduler))\n\n    return disposable\n  }\n}\n\nclass SliceSink<A> extends Pipe<A, A> implements Sink<A> {\n  private skip: number\n  private take: number\n  private readonly disposable: Disposable\n  constructor(skip: number, take: number, sink: Sink<A>, disposable: Disposable) {\n    super(sink)\n    this.skip = skip\n    this.take = take\n    this.disposable = disposable\n  }\n\n  event(t: Time, x: A): void {\n    /* eslint complexity: [1, 4] */\n    if (this.skip > 0) {\n      this.skip -= 1\n      return\n    }\n\n    if (this.take === 0) {\n      return\n    }\n\n    this.take -= 1\n    this.sink.event(t, x)\n    if (this.take === 0) {\n      this.disposable.dispose()\n      this.sink.end(t)\n    }\n  }\n}\n\nexport const takeWhile = <A>(p: (a: A) => boolean, stream: Stream<A>): Stream<A> =>\n  isCanonicalEmpty(stream) ? empty()\n    : new TakeWhile(p, stream)\n\nclass TakeWhile<A> implements Stream<A> {\n  private readonly p: (a: A) => boolean;\n  private readonly source: Stream<A>;\n\n  constructor(p: (a: A) => boolean, source: Stream<A>) {\n    this.p = p\n    this.source = source\n  }\n\n  run(sink: Sink<A>, scheduler: Scheduler): Disposable {\n    const disposable = new SettableDisposable()\n    const takeWhileSink = new TakeWhileSink(this.p, sink, disposable)\n\n    disposable.setDisposable(this.source.run(takeWhileSink, scheduler))\n\n    return disposable\n  }\n}\n\nclass TakeWhileSink<A> extends Pipe<A, A> implements Sink<A> {\n  private readonly p: (a: A) => boolean\n  private readonly disposable: Disposable\n  private active: boolean;\n\n  constructor(p: (a: A) => boolean, sink: Sink<A>, disposable: Disposable) {\n    super(sink)\n    this.p = p\n    this.active = true\n    this.disposable = disposable\n  }\n\n  event(t: Time, x: A): void {\n    if (!this.active) {\n      return\n    }\n\n    const p = this.p\n    this.active = p(x)\n\n    if (this.active) {\n      this.sink.event(t, x)\n    } else {\n      this.disposable.dispose()\n      this.sink.end(t)\n    }\n  }\n}\n\nexport const skipWhile = <A>(p: (a: A) => boolean, stream: Stream<A>): Stream<A> =>\n  isCanonicalEmpty(stream) ? empty()\n    : new SkipWhile(p, stream)\n\nclass SkipWhile<A> implements Stream<A> {\n  private readonly p: (a: A) => boolean\n  private readonly source: Stream<A>\n\n  constructor(p: (a: A) => boolean, source: Stream<A>) {\n    this.p = p\n    this.source = source\n  }\n\n  run(sink: Sink<A>, scheduler: Scheduler): Disposable {\n    return this.source.run(new SkipWhileSink(this.p, sink), scheduler)\n  }\n}\n\nclass SkipWhileSink<A> extends Pipe<A, A> implements Sink<A> {\n  private readonly p: (a: A) => boolean;\n  private skipping: boolean;\n\n  constructor(p: (a: A) => boolean, sink: Sink<A>) {\n    super(sink)\n    this.p = p\n    this.skipping = true\n  }\n\n  event(t: Time, x: A): void {\n    if (this.skipping) {\n      const p = this.p\n      this.skipping = p(x)\n      if (this.skipping) {\n        return\n      }\n    }\n\n    this.sink.event(t, x)\n  }\n}\n\nexport const skipAfter = <A>(p: (a: A) => boolean, stream: Stream<A>): Stream<A> =>\n  isCanonicalEmpty(stream) ? empty()\n    : new SkipAfter(p, stream)\n\nclass SkipAfter<A> implements Stream<A> {\n  private readonly p: (a: A) => boolean\n  private readonly source: Stream<A>\n\n  constructor(p: (a: A) => boolean, source: Stream<A>) {\n    this.p = p\n    this.source = source\n  }\n\n  run(sink: Sink<A>, scheduler: Scheduler): Disposable {\n    return this.source.run(new SkipAfterSink(this.p, sink), scheduler)\n  }\n}\n\nclass SkipAfterSink<A> extends Pipe<A, A> implements Sink<A> {\n  private readonly p: (a: A) => boolean;\n  private skipping: boolean;\n\n  constructor(p: (a: A) => boolean, sink: Sink<A>) {\n    super(sink)\n    this.p = p\n    this.skipping = false\n  }\n\n  event(t: Time, x: A): void {\n    if (this.skipping) {\n      return\n    }\n\n    const p = this.p\n    this.skipping = p(x)\n    this.sink.event(t, x)\n\n    if (this.skipping) {\n      this.sink.end(t)\n    }\n  }\n}\n","/** @license MIT License (c) copyright 2017 original author or authors */\n\nimport Pipe from '../sink/Pipe'\nimport { empty, isCanonicalEmpty } from '../source/empty'\nimport { take } from './slice'\nimport { Stream, Sink, Scheduler, Disposable, Time } from '@most/types'\n\nexport const withItems = <A> (items: Array<A>, stream: Stream<unknown>): Stream<A> =>\n  zipItems(keepLeft, items, stream)\n\nexport const zipItems = <A, B, C> (f: (a: A, b: B) => C, items: ArrayLike<A>, stream: Stream<B>): Stream<C> =>\n  isCanonicalEmpty(stream) || items.length === 0\n    ? empty()\n    : new ZipItems(f, items, take(items.length, stream))\n\nconst keepLeft = <A>(a: A): A => a\n\nclass ZipItems<A, B, C> implements Stream<C> {\n  private readonly f: (a: A, b: B) => C\n  private readonly items: ArrayLike<A>\n  private readonly source: Stream<B>\n\n  constructor(f: (a: A, b: B) => C, items: ArrayLike<A>, source: Stream<B>) {\n    this.f = f\n    this.items = items\n    this.source = source\n  }\n\n  run(sink: Sink<C>, scheduler: Scheduler): Disposable {\n    return this.source.run(new ZipItemsSink(this.f, this.items, sink), scheduler)\n  }\n}\n\nclass ZipItemsSink<A, B, C> extends Pipe<B, C> implements Sink<B> {\n  private readonly f: (a: A, b: B) => C\n  private readonly items: ArrayLike<A>\n  private index: number;\n\n  constructor(f: (a: A, b: B) => C, items: ArrayLike<A>, sink: Sink<C>) {\n    super(sink)\n    this.f = f\n    this.items = items\n    this.index = 0\n  }\n\n  event(t: Time, b: B): void {\n    const f = this.f\n    this.sink.event(t, f(this.items[this.index], b))\n    this.index += 1\n  }\n}\n","// Copied and modified from https://github.com/invertase/denque\n// MIT License\n\n// These constants were extracted directly from denque's shift()\n// It's not clear exactly why the authors chose these particular\n// values, but given denque's stated goals, it seems likely that\n// they were chosen for speed/memory reasons.\n\n// Max value of _head at which Queue is willing to shink\n// its internal array\nconst HEAD_MAX_SHRINK = 2\n\n// Min value of _tail at which Queue is willing to shink\n// its internal array\nconst TAIL_MIN_SHRINK = 10000\n\nexport default class Queue<A> {\n  private head: number;\n  private tail: number;\n  private capacityMask: number;\n  private list: Array<A | undefined>;\n\n  constructor() {\n    this.head = 0\n    this.tail = 0\n    this.capacityMask = 0x3\n    this.list = new Array(4)\n  }\n\n  push(x: A): number {\n    const tail = this.tail\n    this.list[tail] = x\n    this.tail = (tail + 1) & this.capacityMask\n    if (this.tail === this.head) {\n      this.growArray()\n    }\n\n    if (this.head < this.tail) {\n      return this.tail - this.head\n    } else {\n      return this.capacityMask + 1 - (this.head - this.tail)\n    }\n  }\n\n  shift(): A | undefined {\n    const head = this.head\n    if (head === this.tail) {\n      return undefined\n    }\n\n    const x = this.list[head]\n    this.list[head] = undefined\n    this.head = (head + 1) & this.capacityMask\n    if (head < HEAD_MAX_SHRINK &&\n      this.tail > TAIL_MIN_SHRINK &&\n      this.tail <= this.list.length >>> 2) {\n      this.shrinkArray()\n    }\n\n    return x\n  }\n\n  isEmpty(): boolean {\n    return this.head === this.tail\n  }\n\n  length(): number {\n    if (this.head === this.tail) {\n      return 0\n    } else if (this.head < this.tail) {\n      return this.tail - this.head\n    } else {\n      return this.capacityMask + 1 - (this.head - this.tail)\n    }\n  }\n\n  private growArray(): void {\n    if (this.head) {\n      // copy existing data, head to end, then beginning to tail.\n      this.list = this.copyArray()\n      this.head = 0\n    }\n\n    // head is at 0 and array is now full, safe to extend\n    this.tail = this.list.length\n\n    this.list.length *= 2\n    this.capacityMask = (this.capacityMask << 1) | 1\n  }\n\n  private shrinkArray(): void {\n    this.list.length >>>= 1\n    this.capacityMask >>>= 1\n  }\n\n  private copyArray(): Array<A | undefined> {\n    const newArray: Array<A | undefined> = []\n    const list = this.list\n    const len = list.length\n\n    let i\n    for (i = this.head; i < len; i++) {\n      newArray.push(list[i])\n    }\n    for (i = 0; i < this.tail; i++) {\n      newArray.push(list[i])\n    }\n\n    return newArray\n  }\n}\n","/** @license MIT License (c) copyright 2010 original author or authors */\n\nimport { map } from './transform'\nimport { empty, containsCanonicalEmpty } from '../source/empty'\nimport Pipe from '../sink/Pipe'\nimport { IndexSink, IndexedValue } from '../sink/IndexSink'\nimport { disposeAll } from '@most/disposable'\nimport { map as mapArray } from '@most/prelude'\nimport invoke from '../invoke'\nimport Queue from '../Queue'\nimport { Stream, Sink, Scheduler, Disposable, Time } from '@most/types'\nimport { ToStreamsArray } from './variadic'\n\ninterface NonEmptyQueue<A> extends Queue<A> {\n  shift(): A\n}\n\n/**\n * Combine two streams pairwise by index by applying f to values at corresponding\n * indices.  The returned stream ends when either of the input streams ends.\n * @param {function} f function to combine values\n * @returns {Stream} new stream with items at corresponding indices combined\n *  using f\n */\nexport function zip <A, B, R>(f: (a: A, b: B) => R, stream1: Stream<A>, stream2: Stream<B>): Stream<R> {\n  return zipArray(f, [stream1, stream2])\n}\n\n/**\n* Combine streams pairwise (or tuple-wise) by index by applying f to values\n* at corresponding indices.  The returned stream ends when any of the input\n* streams ends.\n* @param {function} f function to combine values\n* @param {[Stream]} streams streams to zip using f\n* @returns {Stream} new stream with items at corresponding indices combined\n*  using f\n*/\nexport const zipArray = <Args extends unknown[], R>(f: (...args: Args) => R, streams: ToStreamsArray<Args>): Stream<R> =>\n  streams.length === 0 || containsCanonicalEmpty(streams) ? empty()\n    : streams.length === 1 ? map(f as any, streams[0])\n      : new Zip(f as any, streams)\n\nclass Zip<A, R> implements Stream<R> {\n  private readonly f: (...args: ReadonlyArray<A>) => R\n  private readonly sources: ArrayLike<Stream<A>>\n\n  constructor(f: (...args: ReadonlyArray<A>) => R, sources: ArrayLike<Stream<A>>) {\n    this.f = f\n    this.sources = sources\n  }\n\n  run(sink: Sink<R>, scheduler: Scheduler): Disposable {\n    const l = this.sources.length\n    const disposables = new Array(l)\n    const sinks = new Array(l)\n    const buffers = new Array(l)\n\n    const zipSink = new ZipSink(this.f, buffers, sinks, sink)\n\n    for (let indexSink, i = 0; i < l; ++i) {\n      buffers[i] = new Queue()\n      indexSink = sinks[i] = new IndexSink(i, zipSink)\n      disposables[i] = this.sources[i].run(indexSink, scheduler)\n    }\n\n    return disposeAll(disposables)\n  }\n}\n\nclass ZipSink<A, R> extends Pipe<IndexedValue<A>, R> implements Sink<IndexedValue<A>> {\n  private readonly f: (...args: ReadonlyArray<A>) => R\n  private readonly buffers: ArrayLike<Queue<A>>\n  private readonly sinks: ArrayLike<IndexSink<A>>\n\n  constructor(f: (...args: ReadonlyArray<A>) => R, buffers: ArrayLike<Queue<A>>, sinks: ArrayLike<IndexSink<A>>, sink: Sink<R>) {\n    super(sink)\n    this.f = f\n    this.sinks = sinks\n    this.buffers = buffers\n  }\n\n  event(t: Time, indexedValue: IndexedValue<A>): void {\n    /* eslint complexity: [1, 5] */\n    if (!indexedValue.active) {\n      this.dispose(t, indexedValue.index)\n      return\n    }\n\n    const buffers = this.buffers\n    const buffer = buffers[indexedValue.index]\n\n    buffer.push(indexedValue.value)\n\n    if (buffer.length() === 1) {\n      if (!ready(buffers)) {\n        return\n      }\n\n      emitZipped(this.f, t, buffers, this.sink)\n\n      if (ended(this.buffers, this.sinks)) {\n        this.sink.end(t)\n      }\n    }\n  }\n\n  private dispose(t: Time, index: number): void {\n    const buffer = this.buffers[index]\n    if (buffer.isEmpty()) {\n      this.sink.end(t)\n    }\n  }\n}\n\nconst emitZipped = <A, R>(f: (...args: A[]) => R, t: Time, buffers: ArrayLike<NonEmptyQueue<A>>, sink: Sink<R>): void =>\n  sink.event(t, invoke(f, mapArray(head, buffers)))\n\nconst head = <A>(buffer: NonEmptyQueue<A>): A => buffer.shift()\n\nfunction ended <A>(buffers: ArrayLike<Queue<unknown>>, sinks: ArrayLike<IndexSink<A>>): boolean {\n  for (let i = 0, l = buffers.length; i < l; ++i) {\n    if (buffers[i].isEmpty() && !sinks[i].active) {\n      return true\n    }\n  }\n  return false\n}\n\nfunction ready <A>(buffers: ArrayLike<Queue<A>>): buffers is ArrayLike<NonEmptyQueue<A>> {\n  for (let i = 0, l = buffers.length; i < l; ++i) {\n    if (buffers[i].isEmpty()) {\n      return false\n    }\n  }\n  return true\n}\n","/** @license MIT License (c) copyright 2010-2016 original author or authors */\n/** @author Brian Cavalier */\n/** @author John Hann */\n\nimport { disposeBoth, tryDispose } from '@most/disposable'\nimport { schedulerRelativeTo, currentTime } from '@most/scheduler'\nimport { empty, isCanonicalEmpty } from '../source/empty'\nimport { Stream, Sink, Scheduler, Disposable, Time } from '@most/types'\n\n/**\n * Given a stream of streams, return a new stream that adopts the behavior\n * of the most recent inner stream.\n * @param stream of streams on which to switch\n * @returns switching stream\n */\nexport const switchLatest = <A>(stream: Stream<Stream<A>>): Stream<A> =>\n  isCanonicalEmpty(stream)\n    ? empty()\n    : new Switch(stream)\n\nclass Switch<A> implements Stream<A> {\n  private readonly source: Stream<Stream<A>>\n\n  constructor(source: Stream<Stream<A>>) {\n    this.source = source\n  }\n\n  run(sink: Sink<A>, scheduler: Scheduler): Disposable {\n    const switchSink = new SwitchSink(sink, scheduler)\n    return disposeBoth(switchSink, this.source.run(switchSink, scheduler))\n  }\n}\n\nclass SwitchSink<A> implements Sink<Stream<A>>, Disposable {\n  private readonly sink: Sink<A>\n  private readonly scheduler: Scheduler\n  private ended: boolean\n  private current: Segment<A> | null\n\n  constructor(sink: Sink<A>, scheduler: Scheduler) {\n    this.sink = sink\n    this.scheduler = scheduler\n    this.current = null\n    this.ended = false\n  }\n\n  event(t: Time, stream: Stream<A>): void {\n    this.disposeCurrent(t)\n    this.current = new Segment(stream, t, Infinity, this, this.sink, this.scheduler)\n  }\n\n  end(t: Time): void {\n    this.ended = true\n    this.checkEnd(t)\n  }\n\n  error(t: Time, e: Error): void {\n    this.ended = true\n    this.sink.error(t, e)\n  }\n\n  dispose(): void {\n    return this.disposeCurrent(currentTime(this.scheduler))\n  }\n\n  private disposeCurrent(t: Time): void {\n    if (this.current !== null) {\n      return this.current.dispose(t)\n    }\n  }\n\n  private disposeInner(t: Time, inner: Segment<A>): void {\n    inner.dispose(t)\n    if (inner === this.current) {\n      this.current = null\n    }\n  }\n\n  private checkEnd(t: Time): void {\n    if (this.ended && this.current === null) {\n      this.sink.end(t)\n    }\n  }\n\n  endInner(t: Time, inner: Segment<A>): void {\n    this.disposeInner(t, inner)\n    this.checkEnd(t)\n  }\n\n  errorInner(t: Time, e: Error, inner: Segment<A>): void {\n    this.disposeInner(t, inner)\n    this.sink.error(t, e)\n  }\n}\n\nclass Segment<A> implements Sink<A> {\n  private readonly min: Time\n  private readonly max: Time\n  private readonly outer: SwitchSink<A>\n  private readonly sink: Sink<A>\n  private readonly disposable: Disposable\n\n  constructor(source: Stream<A>, min: Time, max: Time, outer: SwitchSink<A>, sink: Sink<A>, scheduler: Scheduler) {\n    this.min = min\n    this.max = max\n    this.outer = outer\n    this.sink = sink\n    this.disposable = source.run(this, schedulerRelativeTo(min, scheduler))\n  }\n\n  event(t: Time, x: A): void {\n    const time = Math.max(0, t + this.min)\n    if (time < this.max) {\n      this.sink.event(time, x)\n    }\n  }\n\n  end(t: Time): void {\n    this.outer.endInner(t + this.min, this)\n  }\n\n  error(t: Time, e: Error): void {\n    this.outer.errorInner(t + this.min, e, this)\n  }\n\n  dispose(t: Time): void {\n    tryDispose(t, this.disposable, this.sink)\n  }\n}\n","/** @license MIT License (c) copyright 2010-2016 original author or authors */\n/** @author Brian Cavalier */\n/** @author John Hann */\n\nimport Pipe from '../sink/Pipe'\nimport Filter from '../fusion/Filter'\nimport { empty, isCanonicalEmpty } from '../source/empty'\nimport { Stream, Sink, Scheduler, Time, Disposable } from '@most/types'\n\n/**\n * Retain only items matching a predicate\n * @param p filtering predicate called for each item\n * @param stream stream to filter\n * @returns stream containing only items for which predicate returns truthy\n */\nexport function filter<A, B extends A>(p: (a: A) => a is B, stream: Stream<A>): Stream<B>\nexport function filter<A>(p: (a: A) => boolean, stream: Stream<A>): Stream<A>\nexport function filter<A>(p: (a: A) => boolean, stream: Stream<A>): Stream<A> {\n  return Filter.create(p, stream)\n}\n\n/**\n * Skip repeated events, using === to detect duplicates\n * @param stream stream from which to omit repeated events\n * @returns stream without repeated events\n */\nexport const skipRepeats = <A>(stream: Stream<A>): Stream<A> =>\n  skipRepeatsWith(same, stream)\n\n/**\n * Skip repeated events using the provided equals function to detect duplicates\n * @param equals optional function to compare items\n * @param stream stream from which to omit repeated events\n * @returns stream without repeated events\n */\nexport const skipRepeatsWith = <A>(equals: (a1: A, a2: A) => boolean, stream: Stream<A>): Stream<A> =>\n  isCanonicalEmpty(stream) ? empty()\n    : new SkipRepeats(equals, stream)\n\nclass SkipRepeats<A> implements Stream<A> {\n  private readonly equals: (a1: A, a2: A) => boolean\n  private readonly source: Stream<A>\n  constructor(equals: (a1: A, a2: A) => boolean, source: Stream<A>) {\n    this.equals = equals\n    this.source = source\n  }\n\n  run(sink: Sink<A>, scheduler: Scheduler): Disposable {\n    return this.source.run(new SkipRepeatsSink(this.equals, sink), scheduler)\n  }\n}\n\nclass SkipRepeatsSink<A> extends Pipe<A, A> implements Sink<A> {\n  private readonly equals: (a1: A, a2: A) => boolean\n  private value?: A;\n  private init: boolean;\n  constructor(equals: (a1: A, a2: A) => boolean, sink: Sink<A>) {\n    super(sink)\n    this.equals = equals\n    this.value = undefined\n    this.init = true\n  }\n\n  event(t: Time, x: A): void {\n    if (this.init) {\n      this.init = false\n      this.value = x\n      this.sink.event(t, x)\n      // TODO: value should be boxed to avoid ! bang\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    } else if (!this.equals(this.value!, x)) {\n      this.value = x\n      this.sink.event(t, x)\n    }\n  }\n}\n\nfunction same <A>(a: A, b: A): boolean {\n  return a === b\n}\n","/** @license MIT License (c) copyright 2010-2016 original author or authors */\n/** @author Brian Cavalier */\n/** @author John Hann */\n\nimport Pipe from '../sink/Pipe'\nimport { disposeBoth } from '@most/disposable'\nimport { join } from './chain'\nimport SettableDisposable from '../disposable/SettableDisposable'\nimport { Stream, Scheduler, Sink, Disposable, Time } from '@most/types'\n\nexport const until = <A>(signal: Stream<unknown>, stream: Stream<A>): Stream<A> =>\n  new Until(signal, stream)\n\nexport const since = <A>(signal: Stream<unknown>, stream: Stream<A>): Stream<A> =>\n  new Since(signal, stream)\n\nexport const during = <A>(timeWindow: Stream<Stream<unknown>>, stream: Stream<A>): Stream<A> =>\n  until(join(timeWindow), since(timeWindow, stream))\n\nclass Until<A> implements Stream<A> {\n  private readonly maxSignal: Stream<unknown>\n  private readonly source: Stream<A>\n\n  constructor(maxSignal: Stream<unknown>, source: Stream<A>) {\n    this.maxSignal = maxSignal\n    this.source = source\n  }\n\n  run(sink: Sink<A>, scheduler: Scheduler): Disposable {\n    const disposable = new SettableDisposable()\n\n    const d1 = this.source.run(sink, scheduler)\n    const d2 = this.maxSignal.run(new UntilSink(sink, disposable), scheduler)\n    disposable.setDisposable(disposeBoth(d1, d2))\n\n    return disposable\n  }\n}\n\nclass Since<A> implements Stream<A> {\n  private readonly minSignal: Stream<Stream<unknown>>\n  private readonly source: Stream<A>\n\n  constructor(minSignal: Stream<Stream<unknown>>, source: Stream<A>) {\n    this.minSignal = minSignal\n    this.source = source\n  }\n\n  run(sink: Sink<A>, scheduler: Scheduler): Disposable {\n    const min = new LowerBoundSink(this.minSignal, sink, scheduler)\n    const d = this.source.run(new SinceSink(min, sink), scheduler)\n\n    return disposeBoth(min, d)\n  }\n}\n\nclass SinceSink<A> extends Pipe<A, A> implements Sink<A> {\n  private readonly min: LowerBoundSink<A>\n\n  constructor(min: LowerBoundSink<A>, sink: Sink<A>) {\n    super(sink)\n    this.min = min\n  }\n\n  event(t: Time, x: A): void {\n    if (this.min.allow) {\n      this.sink.event(t, x)\n    }\n  }\n}\n\nclass LowerBoundSink<A> extends Pipe<A, A> implements Sink<A>, Disposable {\n  allow: boolean\n  private disposable: Disposable\n\n  constructor(signal: Stream<unknown>, sink: Sink<A>, scheduler: Scheduler) {\n    super(sink)\n    this.allow = false\n    this.disposable = signal.run(this, scheduler)\n  }\n\n  event(): void {\n    this.allow = true\n    this.dispose()\n  }\n\n  end(): void {}\n\n  dispose(): void {\n    this.disposable.dispose()\n  }\n}\n\nclass UntilSink<A> extends Pipe<A, A> implements Sink<A> {\n  private readonly disposable: Disposable\n\n  constructor(sink: Sink<A>, disposable: Disposable) {\n    super(sink)\n    this.disposable = disposable\n  }\n\n  event(t: Time): void {\n    this.disposable.dispose()\n    this.sink.end(t)\n  }\n\n  end(): void {}\n}\n","/** @license MIT License (c) copyright 2010-2016 original author or authors */\n/** @author Brian Cavalier */\n/** @author John Hann */\n\nimport Pipe from '../sink/Pipe'\nimport { disposeBoth } from '@most/disposable'\nimport { cancelTask, delay as scheduleDelay } from '@most/scheduler'\nimport { propagateEndTask, propagateEventTask } from '../scheduler/PropagateTask'\nimport { Stream, Sink, Scheduler, Disposable, ScheduledTask, Time } from '@most/types'\n\n/**\n * @param delayTime milliseconds to delay each item\n * @param stream\n * @returns new stream containing the same items, but delayed by ms\n */\nexport const delay = <A>(delayTime: number, stream: Stream<A>): Stream<A> =>\n  delayTime <= 0 ? stream : new Delay(delayTime, stream)\n\nclass Delay<A> implements Stream<A> {\n  private readonly dt: number\n  private readonly source: Stream<A>\n\n  constructor(dt: number, source: Stream<A>) {\n    this.dt = dt\n    this.source = source\n  }\n\n  run(sink: Sink<A>, scheduler: Scheduler): Disposable {\n    const delaySink = new DelaySink(this.dt, sink, scheduler)\n    return disposeBoth(delaySink, this.source.run(delaySink, scheduler))\n  }\n}\n\nclass DelaySink<A> extends Pipe<A, A> implements Sink<A>, Disposable {\n  private readonly dt: number;\n  private readonly scheduler: Scheduler;\n  private readonly tasks: ScheduledTask[];\n  constructor(dt: number, sink: Sink<A>, scheduler: Scheduler) {\n    super(sink)\n    this.dt = dt\n    this.scheduler = scheduler\n    this.tasks = []\n  }\n\n  dispose(): void {\n    this.tasks.forEach(cancelTask)\n  }\n\n  event(_t: Time, x: A): void {\n    this.tasks.push(scheduleDelay(this.dt, propagateEventTask(x, this.sink), this.scheduler))\n  }\n\n  end(): void {\n    this.tasks.push(scheduleDelay(this.dt, propagateEndTask(this.sink), this.scheduler))\n  }\n}\n","/** @license MIT License (c) copyright 2010-2017 original author or authors */\n\nimport Pipe from '../sink/Pipe'\nimport Map from '../fusion/Map'\nimport { empty, isCanonicalEmpty } from '../source/empty'\nimport { delay } from '@most/scheduler'\nimport { Stream, Time, Sink, Scheduler, Disposable, ScheduledTask, Task } from '@most/types'\n\n/**\n * Limit the rate of events by suppressing events that occur too often\n * @param period time to suppress events\n * @param stream\n */\nexport const throttle = <A>(period: number, stream: Stream<A>): Stream<A> =>\n  isCanonicalEmpty(stream) ? empty()\n    : stream instanceof Map ? commuteMapThrottle(period, stream)\n      : stream instanceof Throttle ? fuseThrottle(period, stream)\n        : new Throttle(period, stream)\n\nconst commuteMapThrottle = <A, B>(period: number, mapStream: Map<A, B>): Stream<B> =>\n  Map.create(mapStream.f, throttle(period, mapStream.source))\n\nconst fuseThrottle = <A>(period: number, throttleStream: Throttle<A>): Stream<A> =>\n  new Throttle(Math.max(period, throttleStream.period), throttleStream.source)\n\nexport class Throttle<A> implements Stream<A> {\n  readonly period: number;\n  readonly source: Stream<A>;\n\n  constructor(period: number, source: Stream<A>) {\n    this.period = period\n    this.source = source\n  }\n\n  run(sink: Sink<A>, scheduler: Scheduler): Disposable {\n    return this.source.run(new ThrottleSink(this.period, sink), scheduler)\n  }\n}\n\nclass ThrottleSink<A> extends Pipe<A, A> implements Sink<A> {\n  private time: Time\n  private readonly period: number;\n\n  constructor(period: number, sink: Sink<A>) {\n    super(sink)\n    this.time = 0\n    this.period = period\n  }\n\n  event(t: Time, x: A): void {\n    if (t >= this.time) {\n      this.time = t + this.period\n      this.sink.event(t, x)\n    }\n  }\n}\n/**\n * Wait for a burst of events to subside and emit only the last event in the burst\n * @param period events occuring more frequently than this will be suppressed\n * @param stream stream to debounce\n * @returns new debounced stream\n */\nexport const debounce = <A>(period: number, stream: Stream<A>): Stream<A> =>\n  isCanonicalEmpty(stream) ? empty()\n    : new Debounce(period, stream)\n\nclass Debounce<A> implements Stream<A> {\n  private readonly dt: number;\n  private readonly source: Stream<A>\n\n  constructor(dt: number, source: Stream<A>) {\n    this.dt = dt\n    this.source = source\n  }\n\n  run(sink: Sink<A>, scheduler: Scheduler): Disposable {\n    return new DebounceSink(this.dt, this.source, sink, scheduler)\n  }\n}\n\nclass DebounceSink<A> implements Sink<A>, Disposable {\n  private readonly dt: number;\n  private readonly sink: Sink<A>;\n  private readonly scheduler: Scheduler\n  private value: A | undefined;\n  private timer: ScheduledTask | null\n  private disposable: Disposable\n\n  constructor(dt: number, source: Stream<A>, sink: Sink<A>, scheduler: Scheduler) {\n    this.dt = dt\n    this.sink = sink\n    this.scheduler = scheduler\n    this.timer = null\n\n    this.disposable = source.run(this, scheduler)\n  }\n\n  event(_t: Time, x: A): void {\n    this.clearTimer()\n    this.value = x\n    this.timer = delay(this.dt, new DebounceTask(this, x), this.scheduler)\n  }\n\n  handleEventFromTask(t: Time, x: A): void {\n    this.clearTimer()\n    this.sink.event(t, x)\n  }\n\n  end(t: Time): void {\n    if (this.clearTimer()) {\n      // TODO: value should be boxed to avoid ! bang\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      this.sink.event(t, this.value!)\n      this.value = undefined\n    }\n    this.sink.end(t)\n  }\n\n  error(t: Time, x: Error): void {\n    this.clearTimer()\n    this.sink.error(t, x)\n  }\n\n  dispose(): void {\n    this.clearTimer()\n    this.disposable.dispose()\n  }\n\n  private clearTimer(): boolean {\n    if (this.timer === null) {\n      return false\n    }\n    this.timer.dispose()\n    this.timer = null\n    return true\n  }\n}\n\nclass DebounceTask<A> implements Task {\n  private readonly sink: DebounceSink<A>;\n  private readonly value: A;\n\n  constructor(sink: DebounceSink<A>, value: A) {\n    this.sink = sink\n    this.value = value\n  }\n\n  run(t: Time): void {\n    this.sink.handleEventFromTask(t, this.value)\n  }\n\n  error(t: Time, e: Error): void {\n    this.sink.error(t, e)\n  }\n\n  dispose(): void {}\n}\n","/** @license MIT License (c) copyright 2010-2016 original author or authors */\n/** @author Brian Cavalier */\n/** @author John Hann */\n\nimport fatal from '../fatalError'\nimport { now } from '../source/now'\nimport { empty, isCanonicalEmpty } from '../source/empty'\nimport { currentTime } from '@most/scheduler'\nimport { Stream, Sink, Scheduler, Time, Disposable } from '@most/types'\n\n/**\n * Turn a Stream<Promise<T>> into Stream<T> by awaiting each promise.\n * Event order is preserved. The stream will fail if any promise rejects.\n */\nexport const awaitPromises = <A>(stream: Stream<Promise<A>>): Stream<A> =>\n  isCanonicalEmpty(stream) ? empty() : new Await(stream)\n\n/**\n * Create a stream containing only the promise's fulfillment\n * value at the time it fulfills.\n * @param promise\n * @return stream containing promise's fulfillment value.\n *  If the promise rejects, the stream will error\n */\nexport const fromPromise = <A>(promise: Promise<A>): Stream<A> => awaitPromises(now(promise))\n\nclass Await<A> implements Stream<A> {\n  private readonly source: Stream<Promise<A>>\n\n  constructor(source: Stream<Promise<A>>) {\n    this.source = source\n  }\n\n  run(sink: Sink<A>, scheduler: Scheduler): Disposable {\n    return this.source.run(new AwaitSink(sink, scheduler), scheduler)\n  }\n}\n\nclass AwaitSink<A> implements Sink<Promise<A>> {\n  private readonly sink: Sink<A>;\n  private readonly scheduler: Scheduler;\n  private queue: Promise<unknown>;\n\n  constructor(sink: Sink<A>, scheduler: Scheduler) {\n    this.sink = sink\n    this.scheduler = scheduler\n    this.queue = Promise.resolve()\n  }\n\n  event(_t: Time, promise: Promise<A>): void {\n    this.queue = this.queue.then(() => this.handlePromise(promise))\n      .catch(this.errorBound)\n  }\n\n  end(): void {\n    this.queue = this.queue.then(this.endBound)\n      .catch(this.errorBound)\n  }\n\n  error(_t: Time, e: Error): void {\n    // Don't resolve error values, propagate directly\n    this.queue = this.queue.then(() => this.errorBound(e))\n      .catch(fatal)\n  }\n\n  private handlePromise(promise: Promise<A>): Promise<void> {\n    return promise.then(this.eventBound)\n  }\n\n  // Pre-create closures, to avoid creating them per event\n  private eventBound = (x: A): void => this.sink.event(currentTime(this.scheduler), x)\n  private endBound = (): void => this.sink.end(currentTime(this.scheduler))\n  private errorBound = (e: Error): void => this.sink.error(currentTime(this.scheduler), e)\n}\n","/** @license MIT License (c) copyright 2010-2016 original author or authors */\n/** @author Brian Cavalier */\n/** @author John Hann */\nimport { Sink, Time } from '@most/types'\n\nexport default class SafeSink<A> implements Sink<A> {\n  private readonly sink: Sink<A>\n  private active: boolean;\n\n  constructor(sink: Sink<A>) {\n    this.sink = sink\n    this.active = true\n  }\n\n  event(t: Time, x: A): void {\n    if (!this.active) {\n      return\n    }\n    this.sink.event(t, x)\n  }\n\n  end(t: Time): void{\n    if (!this.active) {\n      return\n    }\n    this.disable()\n    this.sink.end(t)\n  }\n\n  error(t: Time, e: Error): void{\n    this.disable()\n    this.sink.error(t, e)\n  }\n\n  disable(): Sink<A> {\n    this.active = false\n    return this.sink\n  }\n}\n","/** @license MIT License (c) copyright 2010-2016 original author or authors */\n/** @author Brian Cavalier */\n/** @author John Hann */\n\nimport { Time, Sink } from '@most/types'\n\nexport function tryEvent <A>(t: Time, x: A, sink: Sink<A>): void {\n  try {\n    sink.event(t, x)\n  } catch (e) {\n    sink.error(t, e)\n  }\n}\n\nexport function tryEnd(t: Time, sink: Sink<unknown>): void {\n  try {\n    sink.end(t)\n  } catch (e) {\n    sink.error(t, e)\n  }\n}\n","/** @license MIT License (c) copyright 2010-2016 original author or authors */\n/** @author Brian Cavalier */\n/** @author John Hann */\n\nimport SafeSink from '../sink/SafeSink'\nimport { tryDispose } from '@most/disposable'\nimport { asap } from '@most/scheduler'\nimport { tryEvent, tryEnd } from '../source/tryEvent'\nimport { empty, isCanonicalEmpty } from '../source/empty'\nimport { propagateErrorTask } from '../scheduler/PropagateTask'\nimport { run } from '../run'\nimport { withLocalTime } from './withLocalTime'\nimport { Stream, Sink, Scheduler, Disposable, Time } from '@most/types'\n\n/**\n * If stream encounters an error, recover and continue with items from stream\n * returned by f.\n * @param f which returns a new stream\n * @param stream\n * @returns new stream which will recover from an error by calling f\n */\nexport const recoverWith = <A, E extends Error, B = A>(f: (error: E) => Stream<B>, stream: Stream<A>): Stream<A | B> =>\n  isCanonicalEmpty(stream) ? empty()\n    : new RecoverWith(f, stream)\n\n/**\n * Create a stream containing only an error\n * @param e error value, preferably an Error or Error subtype\n * @returns new stream containing only an error\n */\nexport const throwError = (e: Error): Stream<never> =>\n  new ErrorStream(e)\n\nclass ErrorStream implements Stream<never> {\n  private readonly value: Error;\n\n  constructor(e: Error) {\n    this.value = e\n  }\n\n  run(sink: Sink<never>, scheduler: Scheduler): Disposable {\n    return asap(propagateErrorTask(this.value, sink), scheduler)\n  }\n}\n\nclass RecoverWith<A, E extends Error, B> implements Stream<A | B> {\n  private readonly f: (error: E) => Stream<B>;\n  private readonly source: Stream<A>;\n\n  constructor(f: (error: E) => Stream<B>, source: Stream<A>) {\n    this.f = f\n    this.source = source\n  }\n\n  run(sink: Sink<A>, scheduler: Scheduler): Disposable {\n    return new RecoverWithSink(this.f, this.source, sink, scheduler)\n  }\n}\n\nclass RecoverWithSink<A, E extends Error, B> implements Sink<A>, Disposable {\n  private readonly f: (error: E) => Stream<B>\n  private readonly sink: SafeSink<A>\n  private readonly scheduler: Scheduler\n  private disposable: Disposable\n\n  constructor(f: (error: E) => Stream<B>, source: Stream<A>, sink: Sink<A | B>, scheduler: Scheduler) {\n    this.f = f\n    this.sink = new SafeSink(sink)\n    this.scheduler = scheduler\n    this.disposable = source.run(this, scheduler)\n  }\n\n  event(t: Time, x: A): void {\n    tryEvent(t, x, this.sink)\n  }\n\n  end(t: Time): void {\n    tryEnd(t, this.sink)\n  }\n\n  error(t: Time, e: E): void {\n    const nextSink = this.sink.disable()\n\n    tryDispose(t, this.disposable, this.sink)\n\n    this._startNext(t, e, nextSink)\n  }\n\n  private _startNext(t: Time, x: E, sink: Sink<A>): void {\n    try {\n      this.disposable = this._continue(this.f, t, x, sink)\n    } catch (e) {\n      sink.error(t, e)\n    }\n  }\n\n  private _continue(f: (error: E) => Stream<B>, t: Time, x: E, sink: Sink<A | B>): Disposable {\n    return run(sink, this.scheduler, withLocalTime(t, f(x)))\n  }\n\n  dispose(): void {\n    return this.disposable.dispose()\n  }\n}\n","import { append, findIndex, remove } from '@most/prelude'\nimport { disposeNone, disposeOnce } from '@most/disposable'\nimport { tryEnd, tryEvent } from '../source/tryEvent'\nimport { isCanonicalEmpty } from '../source/empty'\nimport { Stream, Scheduler, Sink, Disposable, Time } from '@most/types'\n\nexport const multicast = <A>(stream: Stream<A>): Stream<A> =>\n  stream instanceof Multicast || isCanonicalEmpty(stream)\n    ? stream\n    : new Multicast(stream)\n\nclass Multicast<A> implements Stream<A> {\n  private readonly source: Stream<A>;\n  constructor(source: Stream<A>) {\n    this.source = new MulticastSource(source)\n  }\n  run(sink: Sink<A>, scheduler: Scheduler): Disposable {\n    return this.source.run(sink, scheduler)\n  }\n}\n\nexport class MulticastSource<A> implements Stream<A>, Disposable {\n  private readonly source: Stream<A>;\n  private sinks: Sink<A>[];\n  private disposable: Disposable;\n\n  constructor(source: Stream<A>) {\n    this.source = source\n    this.sinks = []\n    this.disposable = disposeNone()\n  }\n\n  run(sink: Sink<A>, scheduler: Scheduler): Disposable {\n    const n = this.add(sink)\n    if (n === 1) {\n      this.disposable = this.source.run(this, scheduler)\n    }\n    return disposeOnce(new MulticastDisposable(this, sink))\n  }\n\n  dispose(): void {\n    const disposable = this.disposable\n    this.disposable = disposeNone()\n    return disposable.dispose()\n  }\n\n  add(sink: Sink<A>): number {\n    this.sinks = append(sink, this.sinks)\n    return this.sinks.length\n  }\n\n  remove(sink: Sink<A>): number {\n    const i = findIndex(sink, this.sinks)\n    // istanbul ignore next\n    if (i >= 0) {\n      this.sinks = remove(i, this.sinks)\n    }\n\n    return this.sinks.length\n  }\n\n  event(time: Time, value: A): void {\n    const s = this.sinks\n    if (s.length === 1) {\n      return s[0].event(time, value)\n    }\n    for (let i = 0; i < s.length; ++i) {\n      tryEvent(time, value, s[i])\n    }\n  }\n\n  end(time: Time): void {\n    const s = this.sinks\n    for (let i = 0; i < s.length; ++i) {\n      tryEnd(time, s[i])\n    }\n  }\n\n  error(time: Time, err: Error): void {\n    const s = this.sinks\n    for (let i = 0; i < s.length; ++i) {\n      s[i].error(time, err)\n    }\n  }\n}\n\nexport class MulticastDisposable<A> implements Disposable {\n  private readonly source: MulticastSource<A>\n  private readonly sink: Sink<A>\n\n  constructor(source: MulticastSource<A>, sink: Sink<A>) {\n    this.source = source\n    this.sink = sink\n  }\n\n  dispose(): void {\n    if (this.source.remove(this.sink) === 0) {\n      this.source.dispose()\n    }\n  }\n}\n","/** @license MIT License (c) copyright 2016 original author or authors */\n/* eslint-disable import/first */\nimport { curry2, curry3, Curried2 } from '@most/prelude'\n\nexport { empty } from './source/empty'\nexport { never } from './source/never'\nexport { now } from './source/now'\nexport { at } from './source/at'\n\nexport { periodic } from './source/periodic'\n\nexport { newStream } from './source/newStream'\n\n// -----------------------------------------------------------------------\n// Observing\n\nexport { runEffects } from './runEffects'\nimport { run as _run } from './run'\n\ninterface Run {\n  <A> (sink: Sink<A>, scheduler: Scheduler, s: Stream<A>): Disposable\n  <A> (sink: Sink<A>, scheduler: Scheduler): (s: Stream<A>) => Disposable\n  <A> (sink: Sink<A>): Curried2<Scheduler, Stream<A>, Disposable>\n}\nexport const run: Run = curry3(_run)\n\n// -------------------------------------------------------\n\nimport { withLocalTime as _withLocalTime } from './combinator/withLocalTime'\n\ninterface WithLocalTime {\n  <A>(origin: Time, s: Stream<A>): Stream<A>\n  <A>(origin: Time): (s: Stream<A>) => Stream<A>\n}\nexport const withLocalTime: WithLocalTime = curry2(_withLocalTime)\n\n// -------------------------------------------------------\n\nimport { loop as _loop, SeedValue } from './combinator/loop'\n\ninterface Loop {\n  <A, B, S>(f: (seed: S, a: A) => SeedValue<S, B>, seed: S, s: Stream<A>): Stream<B>\n  <A, B, S>(f: (seed: S, a: A) => SeedValue<S, B>, seed: S): (s: Stream<A>) => Stream<B>\n  <A, B, S>(f: (seed: S, a: A) => SeedValue<S, B>): Curried2<S, Stream<A>, Stream<B>>\n}\nexport const loop: Loop = curry3(_loop)\n\n// -------------------------------------------------------\n\nimport { scan as _scan } from './combinator/scan'\n\ninterface Scan {\n  <A, B>(f: (b: B, a: A) => B, b: B, s: Stream<A>): Stream<B>\n  <A, B>(f: (b: B, a: A) => B, b: B): (s: Stream<A>) => Stream<B>\n  <A, B>(f: (b: B, a: A) => B): Curried2<B, Stream<A>, Stream<B>>\n}\nexport const scan: Scan = curry3(_scan)\n\n// -----------------------------------------------------------------------\n// Extending\n\nimport { startWith as _startWith } from './combinator/startWith'\n\ninterface StartWith {\n  <A>(value: A, stream: Stream<A>): Stream<A>\n  <A>(value: A): (stream: Stream<A>) => Stream<A>\n}\nexport const startWith: StartWith = curry2(_startWith)\n\n// -----------------------------------------------------------------------\n// Transforming\n\nimport { map as _map, constant as _constant, tap as _tap } from './combinator/transform'\nimport { ap as _ap } from './combinator/applicative'\n\ninterface Map {\n  <A, B>(f: (a: A) => B, s: Stream<A>): Stream<B>\n  <A, B>(f: (a: A) => B): (s: Stream<A>) => Stream<B>\n}\nexport const map: Map = curry2(_map)\ninterface Constant {\n  <A, B>(b: B, s: Stream<A>): Stream<B>\n  <A, B>(b: B): (s: Stream<A>) => Stream<B>\n}\nexport const constant: Constant = curry2(_constant)\ninterface Tap {\n  <A>(f: (a: A) => any, s: Stream<A>): Stream<A>\n  <A>(f: (a: A) => any): (s: Stream<A>) => Stream<A>\n}\nexport const tap: Tap = curry2(_tap)\ninterface Ap {\n  <A, B>(streamofFunctions: Stream<(a: A) => B>, streamOfValues: Stream<A>): Stream<B>\n  <A, B>(streamofFunctions: Stream<(a: A) => B>): (streamOfValues: Stream<A>) => Stream<B>\n}\nexport const ap: Ap = curry2(_ap)\n\n// -----------------------------------------------------------------------\n// FlatMapping\n\nimport { chain as _chain, join } from './combinator/chain'\ninterface Chain {\n  <A, B>(f: (value: A) => Stream<B>, stream: Stream<A>): Stream<B>\n  <A, B>(f: (value: A) => Stream<B>): (stream: Stream<A>) => Stream<B>\n}\nexport const chain: Chain = curry2(_chain)\nexport { join }\n\nimport { continueWith as _continueWith } from './combinator/continueWith'\ninterface ContinueWith {\n  <A, B = A>(f: () => Stream<B>, s: Stream<A>): Stream<A | B>\n  <A, B = A>(f: () => Stream<B>): (s: Stream<A>) => Stream<A | B>\n}\nexport const continueWith: ContinueWith = curry2(_continueWith)\n\nimport { concatMap as _concatMap } from './combinator/concatMap'\ninterface ConcatMap {\n  <A, B>(f: (a: A) => Stream<B>, stream: Stream<A>): Stream<B>\n  <A, B>(f: (a: A) => Stream<B>): (stream: Stream<A>) => Stream<B>\n}\nexport const concatMap: ConcatMap = curry2(_concatMap)\n\n// -----------------------------------------------------------------------\n// Concurrent merging\n\nimport { mergeConcurrently as _mergeConcurrently, mergeMapConcurrently as _mergeMapConcurrently } from './combinator/mergeConcurrently'\n\ninterface MergeConcurrently {\n  <A>(concurrency: number, s: Stream<Stream<A>>): Stream<A>\n  <A>(concurrency: number): (s: Stream<Stream<A>>) => Stream<A>\n}\nexport const mergeConcurrently: MergeConcurrently = curry2<number, Stream<Stream<unknown>>, Stream<unknown>>(_mergeConcurrently)\ninterface MergeMapConcurrently {\n  <A, B>(f: (a: A) => Stream<B>, concurrency: number, s: Stream<A>): Stream<B>\n  <A, B>(f: (a: A) => Stream<B>, concurrency: number): (s: Stream<A>) => Stream<B>\n  <A, B>(f: (a: A) => Stream<B>): Curried2<number, Stream<A>, Stream<B>>\n}\nexport const mergeMapConcurrently: MergeMapConcurrently = curry3(_mergeMapConcurrently)\n\n// -----------------------------------------------------------------------\n// Merging\n\nimport { merge as _merge, mergeArray } from './combinator/merge'\n\ninterface Merge {\n  <A, B>(s1: Stream<A>, s2: Stream<B>): Stream<A | B>\n  <A, B>(s1: Stream<A>): (s2: Stream<B>) => Stream<A | B>\n}\nexport const merge: Merge = curry2(_merge)\nexport { mergeArray }\n\n// -----------------------------------------------------------------------\n// Combining\n\nimport { combine as _combine, combineArray as _combineArray } from './combinator/combine'\n\ninterface Combine {\n  <A, B, R>(fn: (a: A, b: B) => R, a: Stream<A>, b: Stream<B>): Stream<R>\n  <A, B, R>(fn: (a: A, b: B) => R, a: Stream<A>): (b: Stream<B>) => Stream<R>\n  <A, B, R>(fn: (a: A, b: B) => R): Curried2<Stream<A>, Stream<B>, Stream<R>>\n}\nexport const combine: Combine = curry3(_combine)\ninterface CombineArray {\n  <Args extends unknown[], R>(fn: (...args: Args) => R, streams: ToStreamsArray<Args>): Stream<R>\n  <Args extends unknown[], R>(fn: (...args: Args) => R): (streams: ToStreamsArray<Args>) => Stream<R>\n}\nexport const combineArray: CombineArray = curry2(_combineArray as any) as any\n\n// -----------------------------------------------------------------------\n// Sampling\n\nimport { sample as _sample, snapshot as _snapshot } from './combinator/snapshot'\n\ninterface Sample {\n  <A, B>(values: Stream<A>, sampler: Stream<B>): Stream<A>\n  <A, B>(values: Stream<A>): (sampler: Stream<B>) => Stream<A>\n}\nexport const sample: Sample = curry2(_sample)\ninterface Snapshot {\n  <A, B, C>(f: (a: A, b: B) => C, values: Stream<A>, sampler: Stream<B>): Stream<C>\n  <A, B, C>(f: (a: A, b: B) => C, values: Stream<A>): (sampler: Stream<B>) => Stream<C>\n  <A, B, C>(f: (a: A, b: B) => C): Curried2<Stream<A>, Stream<B>, Stream<C>>\n}\nexport const snapshot: Snapshot = curry3(_snapshot)\n\n// -----------------------------------------------------------------------\n// Zipping\n\nimport { zipItems as _zipItems, withItems as _withItems } from './combinator/zipItems'\ninterface ZipItems {\n  <A, B, C> (f: (a: A, b: B) => C, a: Array<A>, s: Stream<B>): Stream<C>\n  <A, B, C> (f: (a: A, b: B) => C, a: Array<A>): (s: Stream<B>) => Stream<C>\n  <A, B, C> (f: (a: A, b: B) => C): Curried2<Array<A>, Stream<B>, Stream<C>>\n}\nexport const zipItems: ZipItems = curry3(_zipItems)\ninterface WithItems {\n  <A>(a: Array<A>, s: Stream<unknown>): Stream<A>\n  <A>(a: Array<A>): (s: Stream<unknown>) => Stream<A>\n}\nexport const withItems: WithItems = curry2(_withItems)\n\nimport { zip as _zip, zipArray as _zipArray } from './combinator/zip'\ninterface Zip {\n  <A, B, R>(fn: (a: A, b: B) => R, a: Stream<A>, b: Stream<B>): Stream<R>\n  <A, B, R>(fn: (a: A, b: B) => R, a: Stream<A>): (b: Stream<B>) => Stream<R>\n  <A, B, R>(fn: (a: A, b: B) => R): Curried2<Stream<A>, Stream<B>, Stream<R>>\n}\nexport const zip: Zip = curry3(_zip)\ninterface ZipArray {\n  <Args extends unknown[], R>(fn: (...args: Args) => R, streams: ToStreamsArray<Args>): Stream<R>\n  <Args extends unknown[], R>(fn: (...args: Args) => R): (streams: ToStreamsArray<Args>) => Stream<R>\n}\nexport const zipArray: ZipArray = curry2(_zipArray as any) as any\n\n// -----------------------------------------------------------------------\n// Switching\n\nexport { switchLatest } from './combinator/switch'\n\n// -----------------------------------------------------------------------\n// Filtering\n\nimport { filter as _filter, skipRepeats, skipRepeatsWith as _skipRepeatsWith } from './combinator/filter'\n\ninterface Filter {\n  <A, B extends A>(p: (a: A) => a is B, s: Stream<A>): Stream<B>\n  <A>(p: (a: A) => boolean, s: Stream<A>): Stream<A>\n  <A, B extends A>(p: (a: A) => a is B): (s: Stream<A>) => Stream<B>\n  <A>(p: (a: A) => boolean): (s: Stream<A>) => Stream<A>\n}\nexport const filter: Filter = curry2(_filter)\nexport { skipRepeats }\ninterface ShipRepeatsWith {\n  <A>(eq: (a1: A, a2: A) => boolean, s: Stream<A>): Stream<A>\n  <A>(eq: (a1: A, a2: A) => boolean): (s: Stream<A>) => Stream<A>\n}\nexport const skipRepeatsWith: ShipRepeatsWith = curry2(_skipRepeatsWith)\n\n// -----------------------------------------------------------------------\n// Slicing\n\nimport { take as _take, skip as _skip, slice as _slice, takeWhile as _takeWhile, skipWhile as _skipWhile, skipAfter as _skipAfter } from './combinator/slice'\n\ninterface Take {\n  <A>(n: number, s: Stream<A>): Stream<A>\n  <A>(n: number): (s: Stream<A>) => Stream<A>\n}\nexport const take: Take = curry2(_take)\ninterface Skip {\n  <A>(n: number, s: Stream<A>): Stream<A>\n  <A>(n: number): (s: Stream<A>) => Stream<A>\n}\nexport const skip: Skip = curry2(_skip)\ninterface Slice {\n  <A>(start: number, end: number, s: Stream<A>): Stream<A>\n  <A>(start: number, end: number): (s: Stream<A>) => Stream<A>\n  <A>(start: number): Curried2<number, Stream<A>, Stream<A>>\n}\nexport const slice: Slice = curry3(_slice)\ninterface TakeWhile {\n  <A>(p: (a: A) => boolean, s: Stream<A>): Stream<A>\n  <A>(p: (a: A) => boolean): (s: Stream<A>) => Stream<A>\n}\nexport const takeWhile: TakeWhile = curry2(_takeWhile)\ninterface SkipWhile {\n  <A>(p: (a: A) => boolean, s: Stream<A>): Stream<A>\n  <A>(p: (a: A) => boolean): (s: Stream<A>) => Stream<A>\n}\nexport const skipWhile: SkipWhile = curry2(_skipWhile)\ninterface SkipAfter {\n  <A>(p: (a: A) => boolean, s: Stream<A>): Stream<A>\n  <A>(p: (a: A) => boolean): (s: Stream<A>) => Stream<A>\n}\nexport const skipAfter: SkipAfter = curry2(_skipAfter)\n\n// -----------------------------------------------------------------------\n// Time slicing\n\nimport { until as _until, since as _since, during as _during } from './combinator/timeslice'\n\ninterface Until {\n  <A>(signal: Stream<any>, s: Stream<A>): Stream<A>\n  <A>(signal: Stream<any>): (s: Stream<A>) => Stream<A>\n}\nexport const until: Until = curry2(_until)\ninterface Since {\n  <A>(signal: Stream<any>, s: Stream<A>): Stream<A>\n  <A>(signal: Stream<any>): (s: Stream<A>) => Stream<A>\n}\nexport const since: Since = curry2(_since)\ninterface During {\n  <A>(timeWindow: Stream<Stream<any>>, s: Stream<A>): Stream<A>\n  <A>(timeWindow: Stream<Stream<any>>): (s: Stream<A>) => Stream<A>\n}\nexport const during: During = curry2(_during)\n\n// -----------------------------------------------------------------------\n// Delaying\n\nimport { delay as _delay } from './combinator/delay'\n\ninterface Delay {\n  <A>(dt: number, s: Stream<A>): Stream<A>\n  <A>(dt: number): (s: Stream<A>) => Stream<A>\n}\nexport const delay: Delay = curry2(_delay)\n\n// -----------------------------------------------------------------------\n// Rate limiting\n\nimport { throttle as _throttle, debounce as _debounce } from './combinator/limit'\n\ninterface Throttle {\n  <A>(period: number, s: Stream<A>): Stream<A>\n  <A>(period: number): (s: Stream<A>) => Stream<A>\n}\nexport const throttle: Throttle = curry2(_throttle)\ninterface Debounce {\n  <A>(period: number, s: Stream<A>): Stream<A>\n  <A>(period: number): (s: Stream<A>) => Stream<A>\n}\nexport const debounce: Debounce = curry2(_debounce)\n\n// -----------------------------------------------------------------------\n// Awaiting Promises\n\nexport { fromPromise, awaitPromises } from './combinator/promises'\n\n// -----------------------------------------------------------------------\n// Error handling\n\nimport { recoverWith as _recoverWith, throwError } from './combinator/errors'\n\ninterface RecoverWith {\n  <A, E extends Error, B = A>(p: (error: E) => Stream<B>, s: Stream<A>): Stream<A | B>\n  <A, E extends Error, B = A>(p: (error: E) => Stream<B>): (s: Stream<A>) => Stream<A | B>\n}\nexport const recoverWith: RecoverWith = curry2(_recoverWith)\nexport { throwError }\n\n// -----------------------------------------------------------------------\n// Multicasting\n\nexport { multicast, MulticastSource } from './combinator/multicast'\n\n// ----------------------------------------------------------------------\nimport {\n  propagateTask as _propagateTask,\n  propagateEventTask as _propagateEventTask,\n  propagateErrorTask as _propagateErrorTask,\n  propagateEndTask,\n  PropagateTaskRun,\n  PropagateTask as PropagateTaskResult\n} from './scheduler/PropagateTask'\nimport { Stream, Sink, Scheduler, Disposable, Time } from '@most/types'\nimport { ToStreamsArray } from './combinator/variadic'\n\ninterface PropagateTask {\n  <A>(run: PropagateTaskRun<A>, value: A, sink: Sink<A>): PropagateTaskResult\n  <A>(run: PropagateTaskRun<A>, value: A): (sink: Sink<A>) => PropagateTaskResult\n  <A>(run: PropagateTaskRun<A>): Curried2<A, Sink<A>, PropagateTaskResult>\n}\nexport const propagateTask: PropagateTask = curry3(_propagateTask)\ninterface PropagateEventTask {\n  <T>(value: T, sink: Sink<T>): PropagateTaskResult\n  <T>(value: T): (sink: Sink<T>) => PropagateTaskResult\n}\nexport const propagateEventTask: PropagateEventTask = curry2(_propagateEventTask)\nexport const propagateErrorTask: Curried2<Error, Sink<unknown>, PropagateTaskResult> = curry2(_propagateErrorTask)\nexport { propagateEndTask }\n"],"names":["fatal","scheduler","asap","disposeNone","delay","schedulePeriodic","curry2","schedulerRelativeTo","disposeBoth","disposeOnce","tryDispose","compose","disposeAll","apply","identity","reduce","mapArray","currentTime","disposable","cancelTask","scheduleDelay","append","findIndex","remove","run","curry3","_run","withLocalTime","_withLocalTime","loop","_loop","scan","_scan","startWith","_startWith","map","_map","constant","_constant","tap","_tap","ap","_ap","chain","_chain","continueWith","_continueWith","concatMap","_concatMap","mergeConcurrently","_mergeConcurrently","mergeMapConcurrently","_mergeMapConcurrently","merge","_merge","combine","_combine","combineArray","_combineArray","sample","_sample","snapshot","_snapshot","zipItems","_zipItems","withItems","_withItems","zip","_zip","zipArray","_zipArray","filter","_filter","skipRepeatsWith","_skipRepeatsWith","take","_take","skip","_skip","slice","_slice","takeWhile","_takeWhile","skipWhile","_skipWhile","skipAfter","_skipAfter","until","_until","since","_since","during","_during","_delay","throttle","_throttle","debounce","_debounce","recoverWith","_recoverWith","propagateTask","_propagateTask","propagateEventTask","_propagateEventTask","propagateErrorTask","_propagateErrorTask"],"mappings":"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"}