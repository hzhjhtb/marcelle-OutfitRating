/** @license MIT License (c) copyright 2010-2016 original author or authors */
/** @author Brian Cavalier */
/** @author John Hann */
import { Stream, Sink, Scheduler, Disposable } from '@most/types';
export default class Filter<A> implements Stream<A> {
    readonly p: (a: A) => boolean;
    readonly source: Stream<A>;
    constructor(p: (a: A) => boolean, source: Stream<A>);
    run(sink: Sink<A>, scheduler: Scheduler): Disposable;
    /**
     * Create a filtered source, fusing adjacent filter.filter if possible
     * @param {function(x:*):boolean} p filtering predicate
     * @param {{run:function}} source source to filter
     * @returns {Filter} filtered source
     */
    static create<A>(p: (a: A) => boolean, source: Stream<A>): Stream<A>;
}
