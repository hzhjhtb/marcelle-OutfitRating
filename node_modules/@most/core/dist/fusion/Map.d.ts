/** @license MIT License (c) copyright 2010-2016 original author or authors */
/** @author Brian Cavalier */
/** @author John Hann */
import { Stream, Sink, Scheduler, Disposable } from '@most/types';
export default class Map<A, B> implements Stream<B> {
    readonly f: (a: A) => B;
    readonly source: Stream<A>;
    constructor(f: (a: A) => B, source: Stream<A>);
    run(sink: Sink<B>, scheduler: Scheduler): Disposable;
    /**
     * Create a mapped source, fusing adjacent map.map, filter.map,
     * and filter.map.map if possible
     * @param {function(*):*} f mapping function
     * @param {{run:function}} source source to map
     * @returns {Map|FilterMap} mapped source, possibly fused
     */
    static create<A, B>(f: (a: A) => B, source: Stream<A>): Stream<B>;
}
