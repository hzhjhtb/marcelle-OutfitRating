{"version":3,"file":"index.es.js","sources":["../src/fatalError.ts","../src/scheduler/PropagateTask.ts","../src/source/empty.ts","../src/source/never.ts","../src/source/at.ts","../src/source/now.ts","../src/source/periodic.ts","../src/source/newStream.ts","../src/disposable/SettableDisposable.ts","../src/runEffects.ts","../src/run.ts","../src/sink/RelativeSink.ts","../src/combinator/withLocalTime.ts","../src/sink/Pipe.ts","../src/combinator/loop.ts","../src/combinator/scan.ts","../src/combinator/continueWith.ts","../src/combinator/startWith.ts","../src/fusion/Filter.ts","../src/fusion/FilterMap.ts","../src/fusion/Map.ts","../src/combinator/transform.ts","../src/sink/IndexSink.ts","../src/invoke.ts","../src/combinator/combine.ts","../src/combinator/applicative.ts","../src/combinator/mergeConcurrently.ts","../src/combinator/chain.ts","../src/combinator/concatMap.ts","../src/combinator/merge.ts","../src/combinator/snapshot.ts","../src/combinator/slice/bounds.ts","../src/combinator/slice/index.ts","../src/combinator/zipItems.ts","../src/Queue.ts","../src/combinator/zip.ts","../src/combinator/switch.ts","../src/combinator/filter.ts","../src/combinator/timeslice.ts","../src/combinator/delay.ts","../src/combinator/limit.ts","../src/combinator/promises.ts","../src/sink/SafeSink.ts","../src/source/tryEvent.ts","../src/combinator/errors.ts","../src/combinator/multicast.ts","../src/index.ts"],"sourcesContent":["/** @license MIT License (c) copyright 2010-2016 original author or authors */\n/** @author Brian Cavalier */\n/** @author John Hann */\n\nexport default function fatalError(e: unknown): void {\n  setTimeout(rethrow, 0, e)\n}\n\nfunction rethrow(e: unknown): never {\n  throw e\n}\n","/** @license MIT License (c) copyright 2010-2016 original author or authors */\n/** @author Brian Cavalier */\n/** @author John Hann */\n\nimport fatal from '../fatalError'\nimport { Sink, Time, Task, Disposable } from '@most/types'\n\nexport type PropagateTaskRun<A> =\n  (time: number, value: A, sink: Sink<A>) => void\n\nexport const propagateTask = <A>(run: PropagateTaskRun<A>, value: A, sink: Sink<A>): PropagateTask => new PropagateRunEventTask(run, value, sink)\n\nexport const propagateEventTask = <A>(value: A, sink: Sink<A>): PropagateTask => new PropagateEventTask(value, sink)\n\nexport const propagateEndTask = (sink: Sink<unknown>): PropagateTask => new PropagateEndTask(sink)\n\nexport const propagateErrorTask = (value: Error, sink: Sink<Error>): PropagateTask => new PropagateErrorTask(value, sink)\n\nexport abstract class PropagateTask implements Task, Disposable {\n  active: boolean = true\n\n  constructor(protected readonly sink: Sink<unknown>) {}\n\n  protected abstract runIfActive(t: Time): void\n\n  dispose(): void {\n    this.active = false\n  }\n\n  run(t: Time): void {\n    if (!this.active) {\n      return\n    }\n    this.runIfActive(t)\n  }\n\n  error(t: Time, e: Error): void {\n    // TODO: Remove this check and just do this.sink.error(t, e)?\n    if (!this.active) {\n      return fatal(e)\n    }\n    this.sink.error(t, e)\n  }\n}\n\nclass PropagateRunEventTask<A> extends PropagateTask implements Task, Disposable {\n  constructor(private readonly runEvent: PropagateTaskRun<A>, private readonly value: A, sink: Sink<A>) {\n    super(sink)\n  }\n\n  protected runIfActive(t: Time): void {\n    this.runEvent(t, this.value, this.sink)\n  }\n}\n\nclass PropagateEventTask<A> extends PropagateTask implements Task, Disposable {\n  constructor(private readonly value: A, sink: Sink<A>) {\n    super(sink)\n  }\n\n  protected runIfActive(t: Time): void {\n    this.sink.event(t, this.value)\n  }\n}\n\nclass PropagateEndTask extends PropagateTask implements Task, Disposable {\n  protected runIfActive(t: Time): void {\n    this.sink.end(t)\n  }\n}\n\nclass PropagateErrorTask extends PropagateTask implements Task, Disposable {\n  constructor(private readonly value: Error, sink: Sink<never>) {\n    super(sink)\n  }\n\n  protected runIfActive(t: Time): void {\n    this.sink.error(t, this.value)\n  }\n}\n","/** @license MIT License (c) copyright 2010-2017 original author or authors */\n\nimport { propagateEndTask } from '../scheduler/PropagateTask'\nimport { asap } from '@most/scheduler'\nimport { Stream, Sink, Scheduler, Disposable } from '@most/types'\n\nexport const empty = (): Stream<never> => EMPTY\n\nexport const isCanonicalEmpty = (stream: Stream<unknown>): boolean =>\n  stream === EMPTY\n\nexport const containsCanonicalEmpty = <A>(streams: ReadonlyArray<Stream<A>>): boolean =>\n  streams.some(isCanonicalEmpty)\n\nclass Empty implements Stream<never> {\n  run(sink: Sink<never>, scheduler: Scheduler): Disposable {\n    return asap(propagateEndTask(sink), scheduler)\n  }\n}\n\nconst EMPTY = new Empty()\n","/** @license MIT License (c) copyright 2010-2017 original author or authors */\n\nimport { disposeNone } from '@most/disposable'\nimport { Disposable, Stream } from '@most/types'\n\nexport const never = (): Stream<never> => NEVER\n\nclass Never implements Stream<never> {\n  run(): Disposable {\n    return disposeNone()\n  }\n}\n\nconst NEVER = new Never()\n","/** @license MIT License (c) copyright 2010-2017 original author or authors */\n\nimport { propagateTask } from '../scheduler/PropagateTask'\nimport { delay } from '@most/scheduler'\nimport { Time, Stream, Sink, Scheduler, Disposable } from '@most/types'\n\nexport const at = <A>(t: Time, x: A): Stream<A> => new At(t, x)\n\nclass At<A> implements Stream<A> {\n  private readonly time: Time;\n  private readonly value: A;\n\n  constructor(t: Time, x: A) {\n    this.time = t\n    this.value = x\n  }\n\n  run(sink: Sink<A>, scheduler: Scheduler): Disposable {\n    return delay(this.time, propagateTask(runAt, this.value, sink), scheduler)\n  }\n}\n\nfunction runAt<A>(t: Time, x: A, sink: Sink<A>): void {\n  sink.event(t, x)\n  sink.end(t)\n}\n","/** @license MIT License (c) copyright 2010-2017 original author or authors */\n\nimport { at } from './at'\nimport { Stream } from '@most/types'\n\nexport const now = <A>(x: A): Stream<A> => at(0, x)\n","/** @license MIT License (c) copyright 2010-2016 original author or authors */\n/** @author Brian Cavalier */\n/** @author John Hann */\n\nimport { propagateEventTask } from '../scheduler/PropagateTask'\nimport { periodic as schedulePeriodic } from '@most/scheduler'\nimport { Stream, Sink, Scheduler, Disposable } from '@most/types'\n\n/**\n * Create a stream of events that occur at a regular period\n * @param {Number} period periodicity of events\n * @returns {Stream} new stream of periodic events, the event value is undefined\n */\nexport const periodic = (period: number): Stream<void> =>\n  new Periodic(period)\n\nclass Periodic implements Stream<void> {\n  private readonly period: number;\n\n  constructor(period: number) {\n    this.period = period\n  }\n\n  run(sink: Sink<void>, scheduler: Scheduler): Disposable {\n    return schedulePeriodic(this.period, propagateEventTask(undefined, sink), scheduler)\n  }\n}\n","import { Sink, Scheduler, Disposable, Stream } from '@most/types'\n\n/** @license MIT License (c) copyright 2010-2017 original author or authors */\n\nexport type RunStream<A> = (sink: Sink<A>, scheduler: Scheduler) => Disposable\n\nexport const newStream = <A>(run: RunStream<A>): Stream<A> => new StreamImpl(run)\n\nclass StreamImpl<A> {\n  readonly run: RunStream<A>;\n  constructor(run: RunStream<A>) {\n    this.run = run\n  }\n}\n","/** @license MIT License (c) copyright 2010-2017 original author or authors */\nimport { Disposable } from '@most/types'\n\nexport default class SettableDisposable implements Disposable {\n  private disposable?: Disposable;\n  private disposed: boolean;\n\n  constructor() {\n    this.disposable = undefined\n    this.disposed = false\n  }\n\n  setDisposable(disposable: Disposable): void {\n    if (this.disposable !== undefined) {\n      throw new Error('setDisposable called more than once')\n    }\n\n    this.disposable = disposable\n\n    if (this.disposed) {\n      disposable.dispose()\n    }\n  }\n\n  dispose(): void {\n    if (this.disposed) {\n      return\n    }\n\n    this.disposed = true\n\n    if (this.disposable !== undefined) {\n      this.disposable.dispose()\n    }\n  }\n}\n","/** @license MIT License (c) copyright 2010-2017 original author or authors */\n\nimport { curry2 } from '@most/prelude'\nimport SettableDisposable from './disposable/SettableDisposable'\nimport { Stream, Scheduler, Time, Disposable, Sink } from '@most/types'\n\nexport interface RunEffects {\n  <A>(stream: Stream<A>, scheduler: Scheduler): Promise<void>\n  <A>(stream: Stream<A>): (scheduler: Scheduler) => Promise<void>\n}\n\nexport const runEffects: RunEffects = curry2((stream: Stream<unknown>, scheduler: Scheduler): Promise<void> =>\n  new Promise((resolve, reject) =>\n    runStream(stream, scheduler, resolve, reject)))\n\nfunction runStream <A>(stream: Stream<A>, scheduler: Scheduler, resolve: (a: A | undefined) => void, reject: (e: Error) => void): void {\n  const disposable = new SettableDisposable()\n  const observer = new RunEffectsSink(resolve, reject, disposable)\n\n  disposable.setDisposable(stream.run(observer, scheduler))\n}\n\nclass RunEffectsSink<A> implements Sink<A> {\n  private readonly _disposable: Disposable\n  private active: boolean;\n  private _error: (e: Error) => void\n  private _end: (x: A | undefined) => void\n\n  constructor(end: (x: A | undefined) => void, error: (e: Error) => void, disposable: Disposable) {\n    this._end = end\n    this._error = error\n    this._disposable = disposable\n    this.active = true\n  }\n\n  event(): void {}\n\n  end(): void {\n    if (!this.active) {\n      return\n    }\n    this.dispose(this._error, this._end, undefined)\n  }\n\n  error(_t: Time, e: Error): void {\n    this.dispose(this._error, this._error, e)\n  }\n\n  private dispose <X>(error: (e: Error) => void, end: (x: X) => void, x: X): void {\n    this.active = false\n    tryDispose(error, end, x, this._disposable)\n  }\n}\n\nfunction tryDispose <X>(error: (e: Error) => void, end: (x: X) => void, x: X, disposable: Disposable): void {\n  try {\n    disposable.dispose()\n  } catch (e) {\n    error(e)\n    return\n  }\n\n  end(x)\n}\n","/** @license MIT License (c) copyright 2010-2017 original author or authors */\nimport { Sink, Scheduler, Stream, Disposable } from '@most/types'\n\n/**\n * Run a Stream, sending all its events to the provided Sink.\n */\nexport const run = <A>(sink: Sink<A>, scheduler: Scheduler, stream: Stream<A>): Disposable =>\n  stream.run(sink, scheduler)\n","import { Sink, Time } from '@most/types'\n\nexport default class RelativeSink<A> implements Sink<A> {\n  readonly offset: number\n  readonly sink: Sink<A>\n\n  constructor(offset: number, sink: Sink<A>) {\n    this.sink = sink\n    this.offset = offset\n  }\n\n  event(t: Time, x: A): void {\n    this.sink.event(t + this.offset, x)\n  }\n\n  error(t: Time, e: Error): void {\n    this.sink.error(t + this.offset, e)\n  }\n\n  end(t: Time): void {\n    this.sink.end(t + this.offset)\n  }\n}\n","import RelativeSink from '../sink/RelativeSink'\nimport { schedulerRelativeTo } from '@most/scheduler'\nimport { Time, Stream, Sink, Scheduler, Disposable } from '@most/types'\n\n/**\n * Create a stream with its own local clock\n * This transforms time from the provided scheduler's clock to a stream-local\n * clock (which starts at 0), and then *back* to the scheduler's clock before\n * propagating events to sink.  In other words, upstream sources will see local times,\n * and downstream sinks will see non-local (original) times.\n */\nexport const withLocalTime = <A>(origin: Time, stream: Stream<A>): Stream<A> =>\n  new WithLocalTime(origin, stream)\n\nclass WithLocalTime<A> implements Stream<A> {\n  private readonly origin: Time;\n  private readonly source: Stream<A>;\n\n  constructor(origin: Time, source: Stream<A>) {\n    this.origin = origin\n    this.source = source\n  }\n\n  run(sink: Sink<A>, scheduler: Scheduler): Disposable {\n    return this.source.run(relativeSink(this.origin, sink), schedulerRelativeTo(this.origin, scheduler))\n  }\n}\n\n/**\n * Accumulate offsets instead of nesting RelativeSinks, which can happen\n * with higher-order stream and combinators like continueWith when they're\n * applied recursively.\n */\nexport const relativeSink = <A>(origin: Time, sink: Sink<A>): Sink<A> =>\n  sink instanceof RelativeSink\n    ? new RelativeSink(origin + sink.offset, sink.sink)\n    : new RelativeSink(origin, sink)\n","/** @license MIT License (c) copyright 2010-2017 original author or authors */\n/** @author Brian Cavalier */\nimport { Sink, Time } from '@most/types'\n\nexport default abstract class Pipe<A, B> implements Sink<A> {\n  protected readonly sink: Sink<B>\n\n  constructor(sink: Sink<B>) {\n    this.sink = sink\n  }\n\n  abstract event (t: Time, x: A): void\n\n  end(t: Time): void {\n    return this.sink.end(t)\n  }\n\n  error(t: Time, e: Error): void {\n    return this.sink.error(t, e)\n  }\n}\n","/** @license MIT License (c) copyright 2010 original author or authors */\n\nimport Pipe from '../sink/Pipe'\nimport { empty, isCanonicalEmpty } from '../source/empty'\nimport { Stream, Sink, Scheduler, Time, Disposable } from '@most/types'\n\nexport interface SeedValue<S, V> { seed: S, value: V }\n\n/**\n * Generalized feedback loop. Call a stepper function for each event. The stepper\n * will be called with 2 params: the current seed and the an event value.  It must\n * return a new { seed, value } pair. The `seed` will be fed back into the next\n * invocation of stepper, and the `value` will be propagated as the event value.\n * @param stepper loop step function\n * @param seed initial seed value passed to first stepper call\n * @param stream event stream\n * @returns new stream whose values are the `value` field of the objects\n * returned by the stepper\n */\nexport const loop = <A, B, S>(stepper: (seed: S, a: A) => SeedValue<S, B>, seed: S, stream: Stream<A>): Stream<B> =>\n  isCanonicalEmpty(stream) ? empty()\n    : new Loop(stepper, seed, stream)\n\nclass Loop<A, B, S> implements Stream<B> {\n  private readonly step: (seed: S, a: A) => SeedValue<S, B>\n  private readonly seed: S;\n  private readonly source: Stream<A>\n\n  constructor(stepper: (seed: S, a: A) => SeedValue<S, B>, seed: S, source: Stream<A>) {\n    this.step = stepper\n    this.seed = seed\n    this.source = source\n  }\n\n  run(sink: Sink<B>, scheduler: Scheduler): Disposable {\n    return this.source.run(new LoopSink(this.step, this.seed, sink), scheduler)\n  }\n}\n\nclass LoopSink<A, B, S> extends Pipe<A, B> implements Sink<A> {\n  private readonly step: (seed: S, a: A) => SeedValue<S, B>;\n  private seed: S;\n  constructor(stepper: (seed: S, a: A) => SeedValue<S, B>, seed: S, sink: Sink<B>) {\n    super(sink)\n    this.step = stepper\n    this.seed = seed\n  }\n\n  event(t: Time, x: A): void {\n    const result = this.step(this.seed, x)\n    this.seed = result.seed\n    this.sink.event(t, result.value)\n  }\n}\n","/** @license MIT License (c) copyright 2010-2016 original author or authors */\n/** @author Brian Cavalier */\n/** @author John Hann */\n\nimport Pipe from '../sink/Pipe'\nimport { disposeBoth } from '@most/disposable'\nimport { asap } from '@most/scheduler'\nimport { propagateEventTask } from '../scheduler/PropagateTask'\nimport { Stream, Sink, Scheduler, Time, Disposable } from '@most/types'\n\n/**\n * Create a stream containing successive reduce results of applying f to\n * the previous reduce result and the current stream item.\n * @param f reducer function\n * @param initial initial value\n * @param stream stream to scan\n * @returns new stream containing successive reduce results\n */\nexport const scan = <A, B>(f: (b: B, a: A) => B, initial: B, stream: Stream<A>): Stream<B> =>\n  new Scan(f, initial, stream)\n\nclass Scan<A, B> implements Stream<B> {\n  private readonly source: Stream<A>;\n  private readonly f: (b: B, a: A) => B;\n  private readonly value: B;\n\n  constructor(f: (b: B, a: A) => B, z: B, source: Stream<A>) {\n    this.source = source\n    this.f = f\n    this.value = z\n  }\n\n  run(sink: Sink<B>, scheduler: Scheduler): Disposable {\n    const d1 = asap(propagateEventTask(this.value, sink), scheduler)\n    const d2 = this.source.run(new ScanSink(this.f, this.value, sink), scheduler)\n    return disposeBoth(d1, d2)\n  }\n}\n\nclass ScanSink<A, B> extends Pipe<A, B> implements Sink<A> {\n  private readonly f: (b: B, a: A) => B\n  private value: B;\n\n  constructor(f: (b: B, a: A) => B, z: B, sink: Sink<B>) {\n    super(sink)\n    this.f = f\n    this.value = z\n  }\n\n  event(t: Time, x: A): void {\n    const f = this.f\n    this.value = f(this.value, x)\n    this.sink.event(t, this.value)\n  }\n}\n","/** @license MIT License (c) copyright 2010-2016 original author or authors */\n/** @author Brian Cavalier */\n/** @author John Hann */\n\nimport Pipe from '../sink/Pipe'\nimport { run } from '../run'\nimport { withLocalTime } from './withLocalTime'\nimport { disposeOnce, tryDispose } from '@most/disposable'\nimport { Stream, Scheduler, Time, Disposable, Sink } from '@most/types'\n\nexport const continueWith = <A, B = A>(f: () => Stream<B>, stream: Stream<A>): Stream<A | B> =>\n  new ContinueWith(f, stream)\n\nclass ContinueWith<A, B> implements Stream<A | B> {\n  private readonly f: () => Stream<B>\n  private readonly source: Stream<A>\n\n  constructor(f: () => Stream<B>, source: Stream<A>) {\n    this.f = f\n    this.source = source\n  }\n\n  run(sink: Sink<A | B>, scheduler: Scheduler): Disposable {\n    return new ContinueWithSink(this.f, this.source, sink, scheduler)\n  }\n}\n\nclass ContinueWithSink<A, B> extends Pipe<A, A | B> implements Sink<A>, Disposable {\n  private readonly f: () => Stream<B>;\n  private readonly scheduler: Scheduler;\n  private active: boolean;\n  private disposable: Disposable\n\n  constructor(f: () => Stream<B>, source: Stream<A>, sink: Sink<A | B>, scheduler: Scheduler) {\n    super(sink)\n    this.f = f\n    this.scheduler = scheduler\n    this.active = true\n    this.disposable = disposeOnce(source.run(this, scheduler))\n  }\n\n  event(t: Time, x: A): void {\n    if (!this.active) {\n      return\n    }\n    this.sink.event(t, x)\n  }\n\n  end(t: Time): void {\n    if (!this.active) {\n      return\n    }\n\n    tryDispose(t, this.disposable, this.sink)\n\n    this.startNext(t, this.sink)\n  }\n\n  private startNext(t: Time, sink: Sink<A | B>): void {\n    try {\n      this.disposable = this.continue(this.f, t, sink)\n    } catch (e) {\n      sink.error(t, e)\n    }\n  }\n\n  private continue(f: () => Stream<B>, t: Time, sink: Sink<A | B>): Disposable {\n    return run(sink, this.scheduler, withLocalTime(t, f()))\n  }\n\n  dispose(): void {\n    this.active = false\n    return this.disposable.dispose()\n  }\n}\n","/** @license MIT License (c) copyright 2010-2017 original author or authors */\n\nimport { now } from '../source/now'\nimport { continueWith } from './continueWith'\nimport { Stream } from '@most/types'\n\nexport const startWith = <A>(x: A, stream: Stream<A>): Stream<A> =>\n  continueWith(() => stream, now(x))\n","/** @license MIT License (c) copyright 2010-2016 original author or authors */\n/** @author Brian Cavalier */\n/** @author John Hann */\n\nimport Pipe from '../sink/Pipe'\nimport { isCanonicalEmpty } from '../source/empty'\nimport { Stream, Sink, Scheduler, Time, Disposable } from '@most/types'\n\nexport default class Filter<A> implements Stream<A> {\n  readonly p: (a: A) => boolean\n  readonly source: Stream<A>\n\n  constructor(p: (a: A) => boolean, source: Stream<A>) {\n    this.p = p\n    this.source = source\n  }\n\n  run(sink: Sink<A>, scheduler: Scheduler): Disposable {\n    return this.source.run(new FilterSink(this.p, sink), scheduler)\n  }\n\n  /**\n   * Create a filtered source, fusing adjacent filter.filter if possible\n   * @param {function(x:*):boolean} p filtering predicate\n   * @param {{run:function}} source source to filter\n   * @returns {Filter} filtered source\n   */\n  static create <A>(p: (a: A) => boolean, source: Stream<A>): Stream<A> {\n    if (isCanonicalEmpty(source)) {\n      return source\n    }\n\n    if (source instanceof Filter) {\n      return new Filter(and(source.p, p), source.source)\n    }\n\n    return new Filter(p, source)\n  }\n}\n\nclass FilterSink<A> extends Pipe<A, A> implements Sink<A> {\n  private readonly p: (a: A) => boolean\n\n  constructor(p: (a: A) => boolean, sink: Sink<A>) {\n    super(sink)\n    this.p = p\n  }\n\n  event(t: Time, x: A): void {\n    const p = this.p\n    p(x) && this.sink.event(t, x)\n  }\n}\n\nconst and = <A>(p: (a: A) => boolean, q: (a: A) => boolean) => (x: A): boolean => p(x) && q(x)\n","/** @license MIT License (c) copyright 2010-2016 original author or authors */\n/** @author Brian Cavalier */\n/** @author John Hann */\n\nimport Pipe from '../sink/Pipe'\nimport { Stream, Sink, Scheduler, Time, Disposable } from '@most/types'\n\nexport default class FilterMap<A, B> implements Stream<B> {\n  private readonly p: (a: A) => boolean;\n  private readonly f: (a: A) => B;\n  private readonly source: Stream<A>;\n\n  constructor(p: (a: A) => boolean, f: (a: A) => B, source: Stream<A>) {\n    this.p = p\n    this.f = f\n    this.source = source\n  }\n\n  run(sink: Sink<B>, scheduler: Scheduler): Disposable {\n    return this.source.run(new FilterMapSink(this.p, this.f, sink), scheduler)\n  }\n}\n\nclass FilterMapSink<A, B> extends Pipe<A, B> implements Sink<A> {\n  private readonly p: (a: A) => boolean;\n  private readonly f: (a: A) => B;\n\n  constructor(p: (a: A) => boolean, f: (a: A) => B, sink: Sink<B>) {\n    super(sink)\n    this.p = p\n    this.f = f\n  }\n\n  event(t: Time, x: A): void {\n    const f = this.f\n    const p = this.p\n    p(x) && this.sink.event(t, f(x))\n  }\n}\n","/** @license MIT License (c) copyright 2010-2016 original author or authors */\n/** @author Brian Cavalier */\n/** @author John Hann */\n\nimport Pipe from '../sink/Pipe'\nimport Filter from './Filter'\nimport FilterMap from './FilterMap'\nimport { compose } from '@most/prelude'\nimport { isCanonicalEmpty, empty } from '../source/empty'\nimport { Stream, Sink, Scheduler, Time, Disposable } from '@most/types'\n\nexport default class Map<A, B> implements Stream<B> {\n  readonly f: (a: A) => B;\n  readonly source: Stream<A>;\n\n  constructor(f: (a: A) => B, source: Stream<A>) {\n    this.f = f\n    this.source = source\n  }\n\n  run(sink: Sink<B>, scheduler: Scheduler): Disposable {\n    return this.source.run(new MapSink(this.f, sink), scheduler)\n  }\n\n  /**\n   * Create a mapped source, fusing adjacent map.map, filter.map,\n   * and filter.map.map if possible\n   * @param {function(*):*} f mapping function\n   * @param {{run:function}} source source to map\n   * @returns {Map|FilterMap} mapped source, possibly fused\n   */\n  static create <A, B>(f: (a: A) => B, source: Stream<A>): Stream<B> {\n    if (isCanonicalEmpty(source)) {\n      return empty()\n    }\n\n    if (source instanceof Map) {\n      return new Map(compose(f, source.f), source.source)\n    }\n\n    if (source instanceof Filter) {\n      return new FilterMap(source.p, f, source.source)\n    }\n\n    return new Map(f, source)\n  }\n}\n\nclass MapSink<A, B> extends Pipe<A, B> implements Sink<A> {\n  private readonly f: (a: A) => B;\n\n  constructor(f: (a: A) => B, sink: Sink<B>) {\n    super(sink)\n    this.f = f\n  }\n\n  event(t: Time, x: A): void {\n    const f = this.f\n    this.sink.event(t, f(x))\n  }\n}\n","/** @license MIT License (c) copyright 2010-2016 original author or authors */\n/** @author Brian Cavalier */\n/** @author John Hann */\n\nimport Map from '../fusion/Map'\nimport Pipe from '../sink/Pipe'\nimport { Stream, Sink, Scheduler, Time, Disposable } from '@most/types'\n\n/**\n * Transform each value in the stream by applying f to each\n * @param f mapping function\n * @param stream stream to map\n * @returns stream containing items transformed by f\n */\nexport const map = <A, B>(f: (a: A) => B, stream: Stream<A>): Stream<B> =>\n  Map.create(f, stream)\n\n/**\n* Replace each value in the stream with x\n* @param x\n* @param stream\n* @returns stream containing items replaced with x\n*/\nexport const constant = <A, B>(x: B, stream: Stream<A>): Stream<B> =>\n  map(() => x, stream)\n\n/**\n* Perform a side effect for each item in the stream\n* @param f side effect to execute for each item. The return value will be discarded.\n* @param stream stream to tap\n* @returns new stream containing the same items as this stream\n*/\nexport const tap = <A>(f: (a: A) => unknown, stream: Stream<A>): Stream<A> =>\n  new Tap(f, stream)\n\nclass Tap<A> implements Stream<A> {\n  private readonly f: (a: A) => unknown;\n  private readonly source: Stream<A>;\n\n  constructor(f: (a: A) => unknown, source: Stream<A>) {\n    this.source = source\n    this.f = f\n  }\n\n  run(sink: Sink<A>, scheduler: Scheduler): Disposable {\n    return this.source.run(new TapSink(this.f, sink), scheduler)\n  }\n}\n\nclass TapSink<A> extends Pipe<A, A> implements Sink<A> {\n  private readonly f: (a: A) => unknown;\n\n  constructor(f: (a: A) => unknown, sink: Sink<A>) {\n    super(sink)\n    this.f = f\n  }\n\n  event(t: Time, x: A): void {\n    const f = this.f\n    f(x)\n    this.sink.event(t, x)\n  }\n}\n","/** @license MIT License (c) copyright 2010-2016 original author or authors */\n/** @author Brian Cavalier */\n/** @author John Hann */\n\nimport Pipe from './Pipe'\nimport { Time, Sink } from '@most/types'\n\nexport interface IndexedValue<A> {\n  readonly index: number\n  readonly value: A\n  readonly active: boolean\n}\n\nexport class IndexSink<A> extends Pipe<A, IndexedValue<A | undefined>> implements Sink<A> {\n  readonly index: number\n  active: boolean\n  value: A | undefined\n\n  constructor(i: number, sink: Sink<IndexedValue<A | undefined>>) {\n    super(sink)\n    this.index = i\n    this.active = true\n    this.value = undefined\n  }\n\n  event(t: Time, x: A): void {\n    if (!this.active) {\n      return\n    }\n    this.value = x\n    this.sink.event(t, this)\n  }\n\n  end(t: Time): void {\n    if (!this.active) {\n      return\n    }\n    this.active = false\n    this.sink.event(t, this)\n  }\n}\n","/** @license MIT License (c) copyright 2010-2016 original author or authors */\n/** @author Brian Cavalier */\n/** @author John Hann */\n\n/**\n * TODO: find a better way (without `any`)\n */\nexport default function invoke <F extends(...args: any[]) => any>(f: F, args: Parameters<F>): ReturnType<F> {\n  /* eslint complexity: [2,7] */\n  switch (args.length) {\n    case 0: return f()\n    case 1: return f(args[0])\n    case 2: return f(args[0], args[1])\n    case 3: return f(args[0], args[1], args[2])\n    case 4: return f(args[0], args[1], args[2], args[3])\n    case 5: return f(args[0], args[1], args[2], args[3], args[4])\n    default:\n      return f.apply(undefined, args)\n  }\n}\n","/** @license MIT License (c) copyright 2010 original author or authors */\n\nimport { map } from './transform'\nimport { empty, containsCanonicalEmpty } from '../source/empty'\nimport Pipe from '../sink/Pipe'\nimport { IndexSink, IndexedValue } from '../sink/IndexSink'\nimport { disposeAll, tryDispose } from '@most/disposable'\nimport invoke from '../invoke'\nimport { Stream, Sink, Scheduler, Disposable, Time } from '@most/types'\nimport { ToStreamsArray } from './variadic'\n\n/**\n * Combine latest events from two streams\n * @param f function to combine most recent events\n * @param stream1\n * @param stream2\n * @returns stream containing the result of applying f to the most recent\n *  event of each input stream, whenever a new event arrives on any stream.\n */\nexport const combine = <A, B, C>(f: (a: A, b: B) => C, stream1: Stream<A>, stream2: Stream<B>): Stream<C> =>\n  combineArray(f, [stream1, stream2])\n\n/**\n* Combine latest events from all input streams\n* @param f function to combine most recent events\n* @param streams most recent events\n* @returns stream containing the result of applying f to the most recent\n*  event of each input stream, whenever a new event arrives on any stream.\n*/\nexport const combineArray = <Args extends unknown[], R>(f: (...args: Args) => R, streams: ToStreamsArray<Args>): Stream<R> =>\n  streams.length === 0 || containsCanonicalEmpty(streams) ? empty()\n    : streams.length === 1 ? map(f as any, streams[0])\n      : new Combine(f, streams)\n\nclass Combine<Args extends unknown[], B> implements Stream<B> {\n  private readonly f: (...args: Args) => B\n  private readonly sources: ToStreamsArray<Args>;\n\n  constructor(f: (...args: Args) => B, sources: ToStreamsArray<Args>) {\n    this.f = f\n    this.sources = sources\n  }\n\n  run(sink: Sink<B>, scheduler: Scheduler): Disposable {\n    const l = this.sources.length\n    const disposables = new Array(l)\n    const sinks = new Array(l)\n\n    const mergeSink = new CombineSink(disposables, sinks.length, sink, this.f)\n\n    for (let indexSink, i = 0; i < l; ++i) {\n      indexSink = sinks[i] = new IndexSink(i, mergeSink)\n      disposables[i] = this.sources[i].run(indexSink, scheduler)\n    }\n\n    return disposeAll(disposables)\n  }\n}\n\nclass CombineSink<A, Args extends A[], B> extends Pipe<IndexedValue<A>, B> implements Sink<IndexedValue<A>> {\n  private readonly disposables: Disposable[]\n  private readonly f: (...args: Args) => B\n  private awaiting: number\n  private readonly hasValue: boolean[]\n  private activeCount: number\n  private readonly values: Args\n\n  constructor(disposables: Disposable[], length: number, sink: Sink<B>, f: (...args: Args) => B) {\n    super(sink)\n    this.disposables = disposables\n    this.f = f\n\n    this.awaiting = length\n    this.values = new Array(length) as Args\n    this.hasValue = new Array(length).fill(false)\n    this.activeCount = length\n  }\n\n  event(t: Time, indexedValue: IndexedValue<A>): void {\n    if (!indexedValue.active) {\n      this.dispose(t, indexedValue.index)\n      return\n    }\n\n    const i = indexedValue.index\n    const awaiting = this.updateReady(i)\n\n    this.values[i] = indexedValue.value\n    if (awaiting === 0) {\n      this.sink.event(t, invoke(this.f, this.values))\n    }\n  }\n\n  private updateReady(index: number): number {\n    if (this.awaiting > 0) {\n      if (!this.hasValue[index]) {\n        this.hasValue[index] = true\n        this.awaiting -= 1\n      }\n    }\n    return this.awaiting\n  }\n\n  private dispose(t: Time, index: number): void {\n    tryDispose(t, this.disposables[index], this.sink)\n    if (--this.activeCount === 0) {\n      this.sink.end(t)\n    }\n  }\n}\n","/** @license MIT License (c) copyright 2010-2016 original author or authors */\n/** @author Brian Cavalier */\n/** @author John Hann */\n\nimport { combine } from './combine'\nimport { apply } from '@most/prelude'\nimport { Stream } from '@most/types'\n\n/**\n * Assume fs is a stream containing functions, and apply the latest function\n * in fs to the latest value in xs.\n * fs:         --f---------g--------h------>\n * xs:         -a-------b-------c-------d-->\n * ap(fs, xs): --fa-----fb-gb---gc--hc--hd->\n * @param {Stream} fs stream of functions to apply to the latest x\n * @param {Stream} xs stream of values to which to apply all the latest f\n * @returns {Stream} stream containing all the applications of fs to xs\n */\nexport function ap<A, B>(fs: Stream<(a: A) => B>, xs: Stream<A>): Stream<B> {\n  return combine(apply, fs, xs)\n}\n","/** @license MIT License (c) copyright 2010 original author or authors */\n\nimport { disposeAll, disposeNone, disposeOnce, tryDispose } from '@most/disposable'\nimport { empty, isCanonicalEmpty } from '../source/empty'\nimport { id as identity } from '@most/prelude'\nimport { schedulerRelativeTo } from '@most/scheduler'\nimport { Time, Disposable, Sink, Scheduler, Stream } from '@most/types'\n\nexport const mergeConcurrently = <A>(concurrency: number, stream: Stream<Stream<A>>): Stream<A> =>\n  mergeMapConcurrently(identity, concurrency, stream)\n\nexport const mergeMapConcurrently = <A, B>(f: (a: A) => Stream<B>, concurrency: number, stream: Stream<A>): Stream<B> =>\n  isCanonicalEmpty(stream) ? empty()\n    : new MergeConcurrently(f, concurrency, stream)\n\nclass MergeConcurrently<A, B> implements Stream<B> {\n  private readonly concurrency: number;\n  private readonly f: (a: A) => Stream<B>\n  private readonly source: Stream<A>\n\n  constructor(f: (a: A) => Stream<B>, concurrency: number, source: Stream<A>) {\n    this.f = f\n    this.concurrency = concurrency\n    this.source = source\n  }\n\n  run(sink: Sink<B>, scheduler: Scheduler): Disposable {\n    return new Outer(this.f, this.concurrency, this.source, sink, scheduler)\n  }\n}\n\ninterface NonEmptyArray<A> extends Array<A> {\n  readonly [0]: A\n  shift(): A\n}\nconst isNonEmpty = <A>(array: A[]): array is NonEmptyArray<A> => array.length > 0\n\nclass Outer<A, B> implements Sink<A>, Disposable {\n  private readonly scheduler: Scheduler;\n  private readonly disposable: Disposable;\n  private active: boolean;\n  private readonly concurrency: number;\n  private readonly f: (a: A) => Stream<B>;\n  private readonly sink: Sink<B>;\n  private readonly current: Disposable[];\n  private readonly pending: A[];\n\n  constructor(f: (a: A) => Stream<B>, concurrency: number, source: Stream<A>, sink: Sink<B>, scheduler: Scheduler) {\n    this.f = f\n    this.concurrency = concurrency\n    this.sink = sink\n    this.scheduler = scheduler\n    this.pending = []\n    this.current = []\n    this.disposable = disposeOnce(source.run(this, scheduler))\n    this.active = true\n  }\n\n  event(t: Time, x: A): void {\n    this.addInner(t, x)\n  }\n\n  private addInner(t: Time, x: A): void {\n    if (this.current.length < this.concurrency) {\n      this.startInner(t, x)\n    } else {\n      this.pending.push(x)\n    }\n  }\n\n  private startInner(t: Time, x: A): void {\n    try {\n      this.initInner(t, x)\n    } catch (e) {\n      this.error(t, e)\n    }\n  }\n\n  private initInner(t: Time, x: A): void {\n    const innerSink = new Inner(t, this, this.sink)\n    innerSink.disposable = mapAndRun(this.f, t, x, innerSink, this.scheduler)\n    this.current.push(innerSink)\n  }\n\n  end(t: Time): void {\n    this.active = false\n    tryDispose(t, this.disposable, this.sink)\n    this.checkEnd(t)\n  }\n\n  error(t: Time, e: Error): void{\n    this.active = false\n    this.sink.error(t, e)\n  }\n\n  dispose(): void {\n    this.active = false\n    this.pending.length = 0\n    this.disposable.dispose()\n    disposeAll(this.current).dispose()\n  }\n\n  endInner(t: Time, inner: Disposable): void {\n    const i = this.current.indexOf(inner)\n    if (i >= 0) {\n      this.current.splice(i, 1)\n    }\n    tryDispose(t, inner, this)\n\n    const pending = this.pending\n    if (isNonEmpty(pending)) {\n      this.startInner(t, pending.shift())\n    } else {\n      this.checkEnd(t)\n    }\n  }\n\n  private checkEnd(t: Time): void {\n    if (!this.active && this.current.length === 0) {\n      this.sink.end(t)\n    }\n  }\n}\n\nconst mapAndRun = <A, B>(f: (a: A) => Stream<B>, t: Time, x: A, sink: Sink<B>, scheduler: Scheduler): Disposable =>\n  f(x).run(sink, schedulerRelativeTo(t, scheduler))\n\nclass Inner<A, B> implements Sink<B>, Disposable {\n  private readonly time: number;\n  private readonly outer: Outer<A, B>;\n  disposable: Disposable;\n  private readonly sink: Sink<B>;\n\n  constructor(time: Time, outer: Outer<A, B>, sink: Sink<B>) {\n    this.time = time\n    this.outer = outer\n    this.sink = sink\n    this.disposable = disposeNone()\n  }\n\n  event(t: Time, x: B): void {\n    this.sink.event(t + this.time, x)\n  }\n\n  end(t: Time): void {\n    this.outer.endInner(t + this.time, this)\n  }\n\n  error(t: Time, e: Error): void {\n    this.outer.error(t + this.time, e)\n  }\n\n  dispose(): void {\n    return this.disposable.dispose()\n  }\n}\n","/** @license MIT License (c) copyright 2010-2016 original author or authors */\n/** @author Brian Cavalier */\n/** @author John Hann */\n\nimport { mergeConcurrently, mergeMapConcurrently } from './mergeConcurrently'\nimport { Stream } from '@most/types'\n\n/**\n * Map each value in the stream to a new stream, and merge it into the\n * returned outer stream. Event arrival times are preserved.\n * @param f chaining function, must return a Stream\n * @param stream\n * @returns new stream containing all events from each stream returned by f\n */\nexport const chain = <A, B>(f: (value: A) => Stream<B>, stream: Stream<A>): Stream<B> => mergeMapConcurrently(f, Infinity, stream)\n\n/**\n * Monadic join. Flatten a Stream<Stream<X>> to Stream<X> by merging inner\n * streams to the outer. Event arrival times are preserved.\n * @param stream stream of streams\n * @returns new stream containing all events of all inner streams\n */\nexport const join = <A>(stream: Stream<Stream<A>>): Stream<A> => mergeConcurrently(Infinity, stream)\n","/** @license MIT License (c) copyright 2010-2016 original author or authors */\n/** @author Brian Cavalier */\n/** @author John Hann */\n\nimport { mergeMapConcurrently } from './mergeConcurrently'\nimport { Stream } from '@most/types'\n\n/**\n * Map each value in stream to a new stream, and concatenate them all\n * stream:              -a---b---cX\n * f(a):                 1-1-1-1X\n * f(b):                        -2-2-2-2X\n * f(c):                                -3-3-3-3X\n * stream.concatMap(f): -1-1-1-1-2-2-2-2-3-3-3-3X\n * @param f function to map each value to a stream\n * @param stream\n * @returns new stream containing all events from each stream returned by f\n */\nexport const concatMap = <A, B>(f: (a: A) => Stream<B>, stream: Stream<A>): Stream<B> =>\n  mergeMapConcurrently(f, 1, stream)\n","/** @license MIT License (c) copyright 2010-2016 original author or authors */\n/** @author Brian Cavalier */\n/** @author John Hann */\n\nimport Pipe from '../sink/Pipe'\nimport { IndexSink, IndexedValue } from '../sink/IndexSink'\nimport { empty, isCanonicalEmpty } from '../source/empty'\nimport { disposeAll, tryDispose } from '@most/disposable'\nimport { reduce } from '@most/prelude'\nimport { Stream, Time, Disposable, Sink, Scheduler } from '@most/types'\n\n/**\n * @returns stream containing events from two streams in time order.\n * If two events are simultaneous they will be merged in arbitrary order.\n */\nexport function merge <A, B>(stream1: Stream<A>, stream2: Stream<B>): Stream<A | B> {\n  return mergeArray([stream1, stream2])\n}\n\n// TODO: use readonly Stream<any>[] once TS 3.4.x has been in the wild for \"enough\" time\ntype MergeArray<S extends ReadonlyArray<Stream<any>>> = Value<S[number]>\ntype Value<S> = S extends Stream<infer A> ? A : never\n\n/**\n * @param streams array of stream to merge\n * @returns stream containing events from all input observables\n * in time order.  If two events are simultaneous they will be merged in\n * arbitrary order.\n */\nexport const mergeArray = <S extends ReadonlyArray<Stream<any>>>(streams: S): Stream<MergeArray<S>> =>\n  mergeStreams(withoutCanonicalEmpty(streams))\n\n/**\n * This implements fusion/flattening for merge.  It will\n * fuse adjacent merge operations.  For example:\n * - a.merge(b).merge(c) effectively becomes merge(a, b, c)\n * - merge(a, merge(b, c)) effectively becomes merge(a, b, c)\n * It does this by concatenating the sources arrays of\n * any nested Merge sources, in effect \"flattening\" nested\n * merge operations into a single merge.\n * TODO: use {@link MergeArray}\n */\nconst mergeStreams = <A>(streams: Stream<A>[]): Stream<A> =>\n  streams.length === 0 ? empty()\n    : streams.length === 1 ? streams[0]\n      : new Merge(reduce<Stream<A>[], Stream<A>>(appendSources, [], streams))\n\nconst withoutCanonicalEmpty = <A>(streams: ReadonlyArray<Stream<A>>): Stream<A>[] =>\n  streams.filter(isNotCanonicalEmpty)\n\nconst isNotCanonicalEmpty = <A>(stream: Stream<A>): boolean =>\n  !isCanonicalEmpty(stream)\n\nconst appendSources = <A>(sources: Stream<A>[], stream: Stream<A>): Stream<A>[] =>\n  sources.concat(stream instanceof Merge ? stream.sources : stream)\n\nclass Merge<A> implements Stream<A> {\n  readonly sources: Stream<A>[];\n\n  constructor(sources: Stream<A>[]) {\n    this.sources = sources\n  }\n\n  run(sink: Sink<A>, scheduler: Scheduler): Disposable {\n    const l = this.sources.length\n    const disposables: Disposable[] = new Array(l)\n    const sinks: Sink<A>[] = new Array(l)\n\n    const mergeSink = new MergeSink(disposables, sinks, sink)\n\n    for (let indexSink, i = 0; i < l; ++i) {\n      indexSink = sinks[i] = new IndexSink(i, mergeSink)\n      disposables[i] = this.sources[i].run(indexSink, scheduler)\n    }\n\n    return disposeAll(disposables)\n  }\n}\n\nclass MergeSink<A> extends Pipe<IndexedValue<A>, A> implements Sink<IndexedValue<A>> {\n  private readonly disposables: Disposable[];\n  private activeCount: number;\n\n  constructor(disposables: Disposable[], sinks: Sink<unknown>[], sink: Sink<A>) {\n    super(sink)\n    this.disposables = disposables\n    this.activeCount = sinks.length\n  }\n\n  event(t: Time, indexValue: IndexedValue<A>): void {\n    if (!indexValue.active) {\n      this.dispose(t, indexValue.index)\n      return\n    }\n    this.sink.event(t, indexValue.value)\n  }\n\n  private dispose(t: Time, index: number): void {\n    tryDispose(t, this.disposables[index], this.sink)\n    if (--this.activeCount === 0) {\n      this.sink.end(t)\n    }\n  }\n}\n","/** @license MIT License (c) copyright 2010 original author or authors */\n\nimport Pipe from '../sink/Pipe'\nimport { disposeBoth } from '@most/disposable'\nimport { empty, isCanonicalEmpty } from '../source/empty'\nimport { Stream, Sink, Scheduler, Time, Disposable } from '@most/types'\n\nexport const sample = <A, B>(values: Stream<A>, sampler: Stream<B>): Stream<A> =>\n  snapshot(x => x, values, sampler)\n\nexport const snapshot = <A, B, C>(f: (a: A, b: B) => C, values: Stream<A>, sampler: Stream<B>): Stream<C> =>\n  isCanonicalEmpty(sampler) || isCanonicalEmpty(values)\n    ? empty()\n    : new Snapshot(f, values, sampler)\n\nexport class Snapshot<A, B, C> implements Stream<C> {\n  private readonly f: (a: A, b: B) => C\n  private readonly values: Stream<A>\n  private readonly sampler: Stream<B>\n\n  constructor(f: (a: A, b: B) => C, values: Stream<A>, sampler: Stream<B>) {\n    this.f = f\n    this.values = values\n    this.sampler = sampler\n  }\n\n  run(sink: Sink<C>, scheduler: Scheduler): Disposable {\n    const sampleSink = new SnapshotSink(this.f, sink)\n    const valuesDisposable = this.values.run(sampleSink.latest, scheduler)\n    const samplerDisposable = this.sampler.run(sampleSink, scheduler)\n\n    return disposeBoth(samplerDisposable, valuesDisposable)\n  }\n}\n\nexport class SnapshotSink<A, B, C> extends Pipe<B, C> implements Sink<B> {\n  private readonly f: (a: A, b: B) => C\n  readonly latest: LatestValueSink<A>;\n\n  constructor(f: (a: A, b: B) => C, sink: Sink<C>) {\n    super(sink)\n    this.f = f\n    this.latest = new LatestValueSink(this)\n  }\n\n  event(t: Time, x: B): void {\n    if (this.latest.hasValue) {\n      const f = this.f\n      // TODO: value should be boxed to avoid ! bang\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      this.sink.event(t, f(this.latest.value!, x))\n    }\n  }\n}\n\nexport class LatestValueSink<A> extends Pipe<A, A> implements Sink<A> {\n  hasValue: boolean;\n  value?: A;\n\n  constructor(sink: Sink<unknown>) {\n    super(sink)\n    this.hasValue = false\n  }\n\n  event(_t: Time, x: A): void {\n    this.value = x\n    this.hasValue = true\n  }\n\n  end(): void {}\n}\n","/** @license MIT License (c) copyright 2010 original author or authors */\n\n// A slice Bounds type that narrows min values via accumulation\n// and max values via Math.min.\n// type Bounds = { min: number, max: number }\n// Notes:\n// 0 <= min <= max\n// slice(min2, max2, slice(min1, max1, s)) ~ slice(min1 + min2, Math.min(max1, min1 + max2), s)\n// A bounds has a 1d coord system with origin 0, extending to Infinity.  Both min and max\n// are relative to the origin (0).  However, when merging bounds b1 and b2, we\n// *interpret* b2 as being relative to b1, hence adding min1 to *both* min2 and max2.\n// This essentially translates b2's coordinates back into origin coordinates\n// as bounds are merged.\n\nexport interface Bounds {\n  readonly min: number\n  readonly max: number\n}\n\n// Construct a constrained bounds\nexport const boundsFrom = (unsafeMin: number, unsafeMax: number): Bounds => {\n  const min = Math.max(0, unsafeMin)\n  const max = Math.max(min, unsafeMax)\n  return { min, max }\n}\n\n// Combine 2 bounds by narrowing min and max\nexport const mergeBounds = (b1: Bounds, b2: Bounds): Bounds =>\n  boundsFrom(b1.min + b2.min, Math.min(b1.max, b1.min + b2.max))\n\n// Nil bounds excludes all slice indices\nexport const isNilBounds = (b: Bounds): boolean =>\n  b.min >= b.max\n\n// Infinite bounds includes all slice indices\nexport const isInfiniteBounds = (b: Bounds): boolean =>\n  b.min <= 0 && b.max === Infinity\n","import { empty, isCanonicalEmpty } from '../../source/empty'\nimport { boundsFrom, isNilBounds, isInfiniteBounds, mergeBounds, Bounds } from './bounds'\nimport Map from '../../fusion/Map'\nimport Pipe from '../../sink/Pipe'\nimport SettableDisposable from '../../disposable/SettableDisposable'\nimport { Stream, Sink, Scheduler, Disposable, Time } from '@most/types'\n\n// TODO: split into smaller files\n\n/**\n * @param n\n * @param stream\n * @returns new stream containing only up to the first n items from stream\n */\nexport const take = <A>(n: number, stream: Stream<A>): Stream<A> =>\n  slice(0, n, stream)\n\n/**\n * @param n\n * @param stream\n * @returns new stream with the first n items removed\n */\nexport const skip = <A>(n: number, stream: Stream<A>): Stream<A> =>\n  slice(n, Infinity, stream)\n\n/**\n * Slice a stream by index. Negative start/end indexes are not supported\n * @param start\n * @param end\n * @param stream\n * @returns stream containing items where start <= index < end\n */\nexport const slice = <A>(start: number, end: number, stream: Stream<A>): Stream<A> =>\n  sliceBounds(boundsFrom(start, end), stream)\n\nconst sliceBounds = <A>(bounds: Bounds, stream: Stream<A>): Stream<A> =>\n  isSliceEmpty(bounds, stream) ? empty()\n    : stream instanceof Map ? commuteMapSlice(bounds, stream)\n      : stream instanceof Slice ? fuseSlice(bounds, stream)\n        : createSlice(bounds, stream)\n\nconst isSliceEmpty = <A>(bounds: Bounds, stream: Stream<A>): boolean =>\n  isCanonicalEmpty(stream) || isNilBounds(bounds)\n\nconst createSlice = <A>(bounds: Bounds, stream: Stream<A>): Stream<A> =>\n  isInfiniteBounds(bounds) ? stream : new Slice(bounds, stream)\n\nconst commuteMapSlice = <A, B>(bounds: Bounds, mapStream: Map<A, B>): Stream<B> =>\n  Map.create(mapStream.f, sliceBounds(bounds, mapStream.source))\n\nconst fuseSlice = <A>(bounds: Bounds, sliceStream: Slice<A>): Stream<A> =>\n  sliceBounds(mergeBounds(sliceStream.bounds, bounds), sliceStream.source)\n\nexport class Slice<A> implements Stream<A> {\n  readonly bounds: Bounds;\n  readonly source: Stream<A>;\n\n  constructor(bounds: Bounds, source: Stream<A>) {\n    this.source = source\n    this.bounds = bounds\n  }\n\n  run(sink: Sink<A>, scheduler: Scheduler): Disposable {\n    const disposable = new SettableDisposable()\n    const sliceSink = new SliceSink(this.bounds.min, this.bounds.max - this.bounds.min, sink, disposable)\n\n    disposable.setDisposable(this.source.run(sliceSink, scheduler))\n\n    return disposable\n  }\n}\n\nclass SliceSink<A> extends Pipe<A, A> implements Sink<A> {\n  private skip: number\n  private take: number\n  private readonly disposable: Disposable\n  constructor(skip: number, take: number, sink: Sink<A>, disposable: Disposable) {\n    super(sink)\n    this.skip = skip\n    this.take = take\n    this.disposable = disposable\n  }\n\n  event(t: Time, x: A): void {\n    /* eslint complexity: [1, 4] */\n    if (this.skip > 0) {\n      this.skip -= 1\n      return\n    }\n\n    if (this.take === 0) {\n      return\n    }\n\n    this.take -= 1\n    this.sink.event(t, x)\n    if (this.take === 0) {\n      this.disposable.dispose()\n      this.sink.end(t)\n    }\n  }\n}\n\nexport const takeWhile = <A>(p: (a: A) => boolean, stream: Stream<A>): Stream<A> =>\n  isCanonicalEmpty(stream) ? empty()\n    : new TakeWhile(p, stream)\n\nclass TakeWhile<A> implements Stream<A> {\n  private readonly p: (a: A) => boolean;\n  private readonly source: Stream<A>;\n\n  constructor(p: (a: A) => boolean, source: Stream<A>) {\n    this.p = p\n    this.source = source\n  }\n\n  run(sink: Sink<A>, scheduler: Scheduler): Disposable {\n    const disposable = new SettableDisposable()\n    const takeWhileSink = new TakeWhileSink(this.p, sink, disposable)\n\n    disposable.setDisposable(this.source.run(takeWhileSink, scheduler))\n\n    return disposable\n  }\n}\n\nclass TakeWhileSink<A> extends Pipe<A, A> implements Sink<A> {\n  private readonly p: (a: A) => boolean\n  private readonly disposable: Disposable\n  private active: boolean;\n\n  constructor(p: (a: A) => boolean, sink: Sink<A>, disposable: Disposable) {\n    super(sink)\n    this.p = p\n    this.active = true\n    this.disposable = disposable\n  }\n\n  event(t: Time, x: A): void {\n    if (!this.active) {\n      return\n    }\n\n    const p = this.p\n    this.active = p(x)\n\n    if (this.active) {\n      this.sink.event(t, x)\n    } else {\n      this.disposable.dispose()\n      this.sink.end(t)\n    }\n  }\n}\n\nexport const skipWhile = <A>(p: (a: A) => boolean, stream: Stream<A>): Stream<A> =>\n  isCanonicalEmpty(stream) ? empty()\n    : new SkipWhile(p, stream)\n\nclass SkipWhile<A> implements Stream<A> {\n  private readonly p: (a: A) => boolean\n  private readonly source: Stream<A>\n\n  constructor(p: (a: A) => boolean, source: Stream<A>) {\n    this.p = p\n    this.source = source\n  }\n\n  run(sink: Sink<A>, scheduler: Scheduler): Disposable {\n    return this.source.run(new SkipWhileSink(this.p, sink), scheduler)\n  }\n}\n\nclass SkipWhileSink<A> extends Pipe<A, A> implements Sink<A> {\n  private readonly p: (a: A) => boolean;\n  private skipping: boolean;\n\n  constructor(p: (a: A) => boolean, sink: Sink<A>) {\n    super(sink)\n    this.p = p\n    this.skipping = true\n  }\n\n  event(t: Time, x: A): void {\n    if (this.skipping) {\n      const p = this.p\n      this.skipping = p(x)\n      if (this.skipping) {\n        return\n      }\n    }\n\n    this.sink.event(t, x)\n  }\n}\n\nexport const skipAfter = <A>(p: (a: A) => boolean, stream: Stream<A>): Stream<A> =>\n  isCanonicalEmpty(stream) ? empty()\n    : new SkipAfter(p, stream)\n\nclass SkipAfter<A> implements Stream<A> {\n  private readonly p: (a: A) => boolean\n  private readonly source: Stream<A>\n\n  constructor(p: (a: A) => boolean, source: Stream<A>) {\n    this.p = p\n    this.source = source\n  }\n\n  run(sink: Sink<A>, scheduler: Scheduler): Disposable {\n    return this.source.run(new SkipAfterSink(this.p, sink), scheduler)\n  }\n}\n\nclass SkipAfterSink<A> extends Pipe<A, A> implements Sink<A> {\n  private readonly p: (a: A) => boolean;\n  private skipping: boolean;\n\n  constructor(p: (a: A) => boolean, sink: Sink<A>) {\n    super(sink)\n    this.p = p\n    this.skipping = false\n  }\n\n  event(t: Time, x: A): void {\n    if (this.skipping) {\n      return\n    }\n\n    const p = this.p\n    this.skipping = p(x)\n    this.sink.event(t, x)\n\n    if (this.skipping) {\n      this.sink.end(t)\n    }\n  }\n}\n","/** @license MIT License (c) copyright 2017 original author or authors */\n\nimport Pipe from '../sink/Pipe'\nimport { empty, isCanonicalEmpty } from '../source/empty'\nimport { take } from './slice'\nimport { Stream, Sink, Scheduler, Disposable, Time } from '@most/types'\n\nexport const withItems = <A> (items: Array<A>, stream: Stream<unknown>): Stream<A> =>\n  zipItems(keepLeft, items, stream)\n\nexport const zipItems = <A, B, C> (f: (a: A, b: B) => C, items: ArrayLike<A>, stream: Stream<B>): Stream<C> =>\n  isCanonicalEmpty(stream) || items.length === 0\n    ? empty()\n    : new ZipItems(f, items, take(items.length, stream))\n\nconst keepLeft = <A>(a: A): A => a\n\nclass ZipItems<A, B, C> implements Stream<C> {\n  private readonly f: (a: A, b: B) => C\n  private readonly items: ArrayLike<A>\n  private readonly source: Stream<B>\n\n  constructor(f: (a: A, b: B) => C, items: ArrayLike<A>, source: Stream<B>) {\n    this.f = f\n    this.items = items\n    this.source = source\n  }\n\n  run(sink: Sink<C>, scheduler: Scheduler): Disposable {\n    return this.source.run(new ZipItemsSink(this.f, this.items, sink), scheduler)\n  }\n}\n\nclass ZipItemsSink<A, B, C> extends Pipe<B, C> implements Sink<B> {\n  private readonly f: (a: A, b: B) => C\n  private readonly items: ArrayLike<A>\n  private index: number;\n\n  constructor(f: (a: A, b: B) => C, items: ArrayLike<A>, sink: Sink<C>) {\n    super(sink)\n    this.f = f\n    this.items = items\n    this.index = 0\n  }\n\n  event(t: Time, b: B): void {\n    const f = this.f\n    this.sink.event(t, f(this.items[this.index], b))\n    this.index += 1\n  }\n}\n","// Copied and modified from https://github.com/invertase/denque\n// MIT License\n\n// These constants were extracted directly from denque's shift()\n// It's not clear exactly why the authors chose these particular\n// values, but given denque's stated goals, it seems likely that\n// they were chosen for speed/memory reasons.\n\n// Max value of _head at which Queue is willing to shink\n// its internal array\nconst HEAD_MAX_SHRINK = 2\n\n// Min value of _tail at which Queue is willing to shink\n// its internal array\nconst TAIL_MIN_SHRINK = 10000\n\nexport default class Queue<A> {\n  private head: number;\n  private tail: number;\n  private capacityMask: number;\n  private list: Array<A | undefined>;\n\n  constructor() {\n    this.head = 0\n    this.tail = 0\n    this.capacityMask = 0x3\n    this.list = new Array(4)\n  }\n\n  push(x: A): number {\n    const tail = this.tail\n    this.list[tail] = x\n    this.tail = (tail + 1) & this.capacityMask\n    if (this.tail === this.head) {\n      this.growArray()\n    }\n\n    if (this.head < this.tail) {\n      return this.tail - this.head\n    } else {\n      return this.capacityMask + 1 - (this.head - this.tail)\n    }\n  }\n\n  shift(): A | undefined {\n    const head = this.head\n    if (head === this.tail) {\n      return undefined\n    }\n\n    const x = this.list[head]\n    this.list[head] = undefined\n    this.head = (head + 1) & this.capacityMask\n    if (head < HEAD_MAX_SHRINK &&\n      this.tail > TAIL_MIN_SHRINK &&\n      this.tail <= this.list.length >>> 2) {\n      this.shrinkArray()\n    }\n\n    return x\n  }\n\n  isEmpty(): boolean {\n    return this.head === this.tail\n  }\n\n  length(): number {\n    if (this.head === this.tail) {\n      return 0\n    } else if (this.head < this.tail) {\n      return this.tail - this.head\n    } else {\n      return this.capacityMask + 1 - (this.head - this.tail)\n    }\n  }\n\n  private growArray(): void {\n    if (this.head) {\n      // copy existing data, head to end, then beginning to tail.\n      this.list = this.copyArray()\n      this.head = 0\n    }\n\n    // head is at 0 and array is now full, safe to extend\n    this.tail = this.list.length\n\n    this.list.length *= 2\n    this.capacityMask = (this.capacityMask << 1) | 1\n  }\n\n  private shrinkArray(): void {\n    this.list.length >>>= 1\n    this.capacityMask >>>= 1\n  }\n\n  private copyArray(): Array<A | undefined> {\n    const newArray: Array<A | undefined> = []\n    const list = this.list\n    const len = list.length\n\n    let i\n    for (i = this.head; i < len; i++) {\n      newArray.push(list[i])\n    }\n    for (i = 0; i < this.tail; i++) {\n      newArray.push(list[i])\n    }\n\n    return newArray\n  }\n}\n","/** @license MIT License (c) copyright 2010 original author or authors */\n\nimport { map } from './transform'\nimport { empty, containsCanonicalEmpty } from '../source/empty'\nimport Pipe from '../sink/Pipe'\nimport { IndexSink, IndexedValue } from '../sink/IndexSink'\nimport { disposeAll } from '@most/disposable'\nimport { map as mapArray } from '@most/prelude'\nimport invoke from '../invoke'\nimport Queue from '../Queue'\nimport { Stream, Sink, Scheduler, Disposable, Time } from '@most/types'\nimport { ToStreamsArray } from './variadic'\n\ninterface NonEmptyQueue<A> extends Queue<A> {\n  shift(): A\n}\n\n/**\n * Combine two streams pairwise by index by applying f to values at corresponding\n * indices.  The returned stream ends when either of the input streams ends.\n * @param {function} f function to combine values\n * @returns {Stream} new stream with items at corresponding indices combined\n *  using f\n */\nexport function zip <A, B, R>(f: (a: A, b: B) => R, stream1: Stream<A>, stream2: Stream<B>): Stream<R> {\n  return zipArray(f, [stream1, stream2])\n}\n\n/**\n* Combine streams pairwise (or tuple-wise) by index by applying f to values\n* at corresponding indices.  The returned stream ends when any of the input\n* streams ends.\n* @param {function} f function to combine values\n* @param {[Stream]} streams streams to zip using f\n* @returns {Stream} new stream with items at corresponding indices combined\n*  using f\n*/\nexport const zipArray = <Args extends unknown[], R>(f: (...args: Args) => R, streams: ToStreamsArray<Args>): Stream<R> =>\n  streams.length === 0 || containsCanonicalEmpty(streams) ? empty()\n    : streams.length === 1 ? map(f as any, streams[0])\n      : new Zip(f as any, streams)\n\nclass Zip<A, R> implements Stream<R> {\n  private readonly f: (...args: ReadonlyArray<A>) => R\n  private readonly sources: ArrayLike<Stream<A>>\n\n  constructor(f: (...args: ReadonlyArray<A>) => R, sources: ArrayLike<Stream<A>>) {\n    this.f = f\n    this.sources = sources\n  }\n\n  run(sink: Sink<R>, scheduler: Scheduler): Disposable {\n    const l = this.sources.length\n    const disposables = new Array(l)\n    const sinks = new Array(l)\n    const buffers = new Array(l)\n\n    const zipSink = new ZipSink(this.f, buffers, sinks, sink)\n\n    for (let indexSink, i = 0; i < l; ++i) {\n      buffers[i] = new Queue()\n      indexSink = sinks[i] = new IndexSink(i, zipSink)\n      disposables[i] = this.sources[i].run(indexSink, scheduler)\n    }\n\n    return disposeAll(disposables)\n  }\n}\n\nclass ZipSink<A, R> extends Pipe<IndexedValue<A>, R> implements Sink<IndexedValue<A>> {\n  private readonly f: (...args: ReadonlyArray<A>) => R\n  private readonly buffers: ArrayLike<Queue<A>>\n  private readonly sinks: ArrayLike<IndexSink<A>>\n\n  constructor(f: (...args: ReadonlyArray<A>) => R, buffers: ArrayLike<Queue<A>>, sinks: ArrayLike<IndexSink<A>>, sink: Sink<R>) {\n    super(sink)\n    this.f = f\n    this.sinks = sinks\n    this.buffers = buffers\n  }\n\n  event(t: Time, indexedValue: IndexedValue<A>): void {\n    /* eslint complexity: [1, 5] */\n    if (!indexedValue.active) {\n      this.dispose(t, indexedValue.index)\n      return\n    }\n\n    const buffers = this.buffers\n    const buffer = buffers[indexedValue.index]\n\n    buffer.push(indexedValue.value)\n\n    if (buffer.length() === 1) {\n      if (!ready(buffers)) {\n        return\n      }\n\n      emitZipped(this.f, t, buffers, this.sink)\n\n      if (ended(this.buffers, this.sinks)) {\n        this.sink.end(t)\n      }\n    }\n  }\n\n  private dispose(t: Time, index: number): void {\n    const buffer = this.buffers[index]\n    if (buffer.isEmpty()) {\n      this.sink.end(t)\n    }\n  }\n}\n\nconst emitZipped = <A, R>(f: (...args: A[]) => R, t: Time, buffers: ArrayLike<NonEmptyQueue<A>>, sink: Sink<R>): void =>\n  sink.event(t, invoke(f, mapArray(head, buffers)))\n\nconst head = <A>(buffer: NonEmptyQueue<A>): A => buffer.shift()\n\nfunction ended <A>(buffers: ArrayLike<Queue<unknown>>, sinks: ArrayLike<IndexSink<A>>): boolean {\n  for (let i = 0, l = buffers.length; i < l; ++i) {\n    if (buffers[i].isEmpty() && !sinks[i].active) {\n      return true\n    }\n  }\n  return false\n}\n\nfunction ready <A>(buffers: ArrayLike<Queue<A>>): buffers is ArrayLike<NonEmptyQueue<A>> {\n  for (let i = 0, l = buffers.length; i < l; ++i) {\n    if (buffers[i].isEmpty()) {\n      return false\n    }\n  }\n  return true\n}\n","/** @license MIT License (c) copyright 2010-2016 original author or authors */\n/** @author Brian Cavalier */\n/** @author John Hann */\n\nimport { disposeBoth, tryDispose } from '@most/disposable'\nimport { schedulerRelativeTo, currentTime } from '@most/scheduler'\nimport { empty, isCanonicalEmpty } from '../source/empty'\nimport { Stream, Sink, Scheduler, Disposable, Time } from '@most/types'\n\n/**\n * Given a stream of streams, return a new stream that adopts the behavior\n * of the most recent inner stream.\n * @param stream of streams on which to switch\n * @returns switching stream\n */\nexport const switchLatest = <A>(stream: Stream<Stream<A>>): Stream<A> =>\n  isCanonicalEmpty(stream)\n    ? empty()\n    : new Switch(stream)\n\nclass Switch<A> implements Stream<A> {\n  private readonly source: Stream<Stream<A>>\n\n  constructor(source: Stream<Stream<A>>) {\n    this.source = source\n  }\n\n  run(sink: Sink<A>, scheduler: Scheduler): Disposable {\n    const switchSink = new SwitchSink(sink, scheduler)\n    return disposeBoth(switchSink, this.source.run(switchSink, scheduler))\n  }\n}\n\nclass SwitchSink<A> implements Sink<Stream<A>>, Disposable {\n  private readonly sink: Sink<A>\n  private readonly scheduler: Scheduler\n  private ended: boolean\n  private current: Segment<A> | null\n\n  constructor(sink: Sink<A>, scheduler: Scheduler) {\n    this.sink = sink\n    this.scheduler = scheduler\n    this.current = null\n    this.ended = false\n  }\n\n  event(t: Time, stream: Stream<A>): void {\n    this.disposeCurrent(t)\n    this.current = new Segment(stream, t, Infinity, this, this.sink, this.scheduler)\n  }\n\n  end(t: Time): void {\n    this.ended = true\n    this.checkEnd(t)\n  }\n\n  error(t: Time, e: Error): void {\n    this.ended = true\n    this.sink.error(t, e)\n  }\n\n  dispose(): void {\n    return this.disposeCurrent(currentTime(this.scheduler))\n  }\n\n  private disposeCurrent(t: Time): void {\n    if (this.current !== null) {\n      return this.current.dispose(t)\n    }\n  }\n\n  private disposeInner(t: Time, inner: Segment<A>): void {\n    inner.dispose(t)\n    if (inner === this.current) {\n      this.current = null\n    }\n  }\n\n  private checkEnd(t: Time): void {\n    if (this.ended && this.current === null) {\n      this.sink.end(t)\n    }\n  }\n\n  endInner(t: Time, inner: Segment<A>): void {\n    this.disposeInner(t, inner)\n    this.checkEnd(t)\n  }\n\n  errorInner(t: Time, e: Error, inner: Segment<A>): void {\n    this.disposeInner(t, inner)\n    this.sink.error(t, e)\n  }\n}\n\nclass Segment<A> implements Sink<A> {\n  private readonly min: Time\n  private readonly max: Time\n  private readonly outer: SwitchSink<A>\n  private readonly sink: Sink<A>\n  private readonly disposable: Disposable\n\n  constructor(source: Stream<A>, min: Time, max: Time, outer: SwitchSink<A>, sink: Sink<A>, scheduler: Scheduler) {\n    this.min = min\n    this.max = max\n    this.outer = outer\n    this.sink = sink\n    this.disposable = source.run(this, schedulerRelativeTo(min, scheduler))\n  }\n\n  event(t: Time, x: A): void {\n    const time = Math.max(0, t + this.min)\n    if (time < this.max) {\n      this.sink.event(time, x)\n    }\n  }\n\n  end(t: Time): void {\n    this.outer.endInner(t + this.min, this)\n  }\n\n  error(t: Time, e: Error): void {\n    this.outer.errorInner(t + this.min, e, this)\n  }\n\n  dispose(t: Time): void {\n    tryDispose(t, this.disposable, this.sink)\n  }\n}\n","/** @license MIT License (c) copyright 2010-2016 original author or authors */\n/** @author Brian Cavalier */\n/** @author John Hann */\n\nimport Pipe from '../sink/Pipe'\nimport Filter from '../fusion/Filter'\nimport { empty, isCanonicalEmpty } from '../source/empty'\nimport { Stream, Sink, Scheduler, Time, Disposable } from '@most/types'\n\n/**\n * Retain only items matching a predicate\n * @param p filtering predicate called for each item\n * @param stream stream to filter\n * @returns stream containing only items for which predicate returns truthy\n */\nexport function filter<A, B extends A>(p: (a: A) => a is B, stream: Stream<A>): Stream<B>\nexport function filter<A>(p: (a: A) => boolean, stream: Stream<A>): Stream<A>\nexport function filter<A>(p: (a: A) => boolean, stream: Stream<A>): Stream<A> {\n  return Filter.create(p, stream)\n}\n\n/**\n * Skip repeated events, using === to detect duplicates\n * @param stream stream from which to omit repeated events\n * @returns stream without repeated events\n */\nexport const skipRepeats = <A>(stream: Stream<A>): Stream<A> =>\n  skipRepeatsWith(same, stream)\n\n/**\n * Skip repeated events using the provided equals function to detect duplicates\n * @param equals optional function to compare items\n * @param stream stream from which to omit repeated events\n * @returns stream without repeated events\n */\nexport const skipRepeatsWith = <A>(equals: (a1: A, a2: A) => boolean, stream: Stream<A>): Stream<A> =>\n  isCanonicalEmpty(stream) ? empty()\n    : new SkipRepeats(equals, stream)\n\nclass SkipRepeats<A> implements Stream<A> {\n  private readonly equals: (a1: A, a2: A) => boolean\n  private readonly source: Stream<A>\n  constructor(equals: (a1: A, a2: A) => boolean, source: Stream<A>) {\n    this.equals = equals\n    this.source = source\n  }\n\n  run(sink: Sink<A>, scheduler: Scheduler): Disposable {\n    return this.source.run(new SkipRepeatsSink(this.equals, sink), scheduler)\n  }\n}\n\nclass SkipRepeatsSink<A> extends Pipe<A, A> implements Sink<A> {\n  private readonly equals: (a1: A, a2: A) => boolean\n  private value?: A;\n  private init: boolean;\n  constructor(equals: (a1: A, a2: A) => boolean, sink: Sink<A>) {\n    super(sink)\n    this.equals = equals\n    this.value = undefined\n    this.init = true\n  }\n\n  event(t: Time, x: A): void {\n    if (this.init) {\n      this.init = false\n      this.value = x\n      this.sink.event(t, x)\n      // TODO: value should be boxed to avoid ! bang\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    } else if (!this.equals(this.value!, x)) {\n      this.value = x\n      this.sink.event(t, x)\n    }\n  }\n}\n\nfunction same <A>(a: A, b: A): boolean {\n  return a === b\n}\n","/** @license MIT License (c) copyright 2010-2016 original author or authors */\n/** @author Brian Cavalier */\n/** @author John Hann */\n\nimport Pipe from '../sink/Pipe'\nimport { disposeBoth } from '@most/disposable'\nimport { join } from './chain'\nimport SettableDisposable from '../disposable/SettableDisposable'\nimport { Stream, Scheduler, Sink, Disposable, Time } from '@most/types'\n\nexport const until = <A>(signal: Stream<unknown>, stream: Stream<A>): Stream<A> =>\n  new Until(signal, stream)\n\nexport const since = <A>(signal: Stream<unknown>, stream: Stream<A>): Stream<A> =>\n  new Since(signal, stream)\n\nexport const during = <A>(timeWindow: Stream<Stream<unknown>>, stream: Stream<A>): Stream<A> =>\n  until(join(timeWindow), since(timeWindow, stream))\n\nclass Until<A> implements Stream<A> {\n  private readonly maxSignal: Stream<unknown>\n  private readonly source: Stream<A>\n\n  constructor(maxSignal: Stream<unknown>, source: Stream<A>) {\n    this.maxSignal = maxSignal\n    this.source = source\n  }\n\n  run(sink: Sink<A>, scheduler: Scheduler): Disposable {\n    const disposable = new SettableDisposable()\n\n    const d1 = this.source.run(sink, scheduler)\n    const d2 = this.maxSignal.run(new UntilSink(sink, disposable), scheduler)\n    disposable.setDisposable(disposeBoth(d1, d2))\n\n    return disposable\n  }\n}\n\nclass Since<A> implements Stream<A> {\n  private readonly minSignal: Stream<Stream<unknown>>\n  private readonly source: Stream<A>\n\n  constructor(minSignal: Stream<Stream<unknown>>, source: Stream<A>) {\n    this.minSignal = minSignal\n    this.source = source\n  }\n\n  run(sink: Sink<A>, scheduler: Scheduler): Disposable {\n    const min = new LowerBoundSink(this.minSignal, sink, scheduler)\n    const d = this.source.run(new SinceSink(min, sink), scheduler)\n\n    return disposeBoth(min, d)\n  }\n}\n\nclass SinceSink<A> extends Pipe<A, A> implements Sink<A> {\n  private readonly min: LowerBoundSink<A>\n\n  constructor(min: LowerBoundSink<A>, sink: Sink<A>) {\n    super(sink)\n    this.min = min\n  }\n\n  event(t: Time, x: A): void {\n    if (this.min.allow) {\n      this.sink.event(t, x)\n    }\n  }\n}\n\nclass LowerBoundSink<A> extends Pipe<A, A> implements Sink<A>, Disposable {\n  allow: boolean\n  private disposable: Disposable\n\n  constructor(signal: Stream<unknown>, sink: Sink<A>, scheduler: Scheduler) {\n    super(sink)\n    this.allow = false\n    this.disposable = signal.run(this, scheduler)\n  }\n\n  event(): void {\n    this.allow = true\n    this.dispose()\n  }\n\n  end(): void {}\n\n  dispose(): void {\n    this.disposable.dispose()\n  }\n}\n\nclass UntilSink<A> extends Pipe<A, A> implements Sink<A> {\n  private readonly disposable: Disposable\n\n  constructor(sink: Sink<A>, disposable: Disposable) {\n    super(sink)\n    this.disposable = disposable\n  }\n\n  event(t: Time): void {\n    this.disposable.dispose()\n    this.sink.end(t)\n  }\n\n  end(): void {}\n}\n","/** @license MIT License (c) copyright 2010-2016 original author or authors */\n/** @author Brian Cavalier */\n/** @author John Hann */\n\nimport Pipe from '../sink/Pipe'\nimport { disposeBoth } from '@most/disposable'\nimport { cancelTask, delay as scheduleDelay } from '@most/scheduler'\nimport { propagateEndTask, propagateEventTask } from '../scheduler/PropagateTask'\nimport { Stream, Sink, Scheduler, Disposable, ScheduledTask, Time } from '@most/types'\n\n/**\n * @param delayTime milliseconds to delay each item\n * @param stream\n * @returns new stream containing the same items, but delayed by ms\n */\nexport const delay = <A>(delayTime: number, stream: Stream<A>): Stream<A> =>\n  delayTime <= 0 ? stream : new Delay(delayTime, stream)\n\nclass Delay<A> implements Stream<A> {\n  private readonly dt: number\n  private readonly source: Stream<A>\n\n  constructor(dt: number, source: Stream<A>) {\n    this.dt = dt\n    this.source = source\n  }\n\n  run(sink: Sink<A>, scheduler: Scheduler): Disposable {\n    const delaySink = new DelaySink(this.dt, sink, scheduler)\n    return disposeBoth(delaySink, this.source.run(delaySink, scheduler))\n  }\n}\n\nclass DelaySink<A> extends Pipe<A, A> implements Sink<A>, Disposable {\n  private readonly dt: number;\n  private readonly scheduler: Scheduler;\n  private readonly tasks: ScheduledTask[];\n  constructor(dt: number, sink: Sink<A>, scheduler: Scheduler) {\n    super(sink)\n    this.dt = dt\n    this.scheduler = scheduler\n    this.tasks = []\n  }\n\n  dispose(): void {\n    this.tasks.forEach(cancelTask)\n  }\n\n  event(_t: Time, x: A): void {\n    this.tasks.push(scheduleDelay(this.dt, propagateEventTask(x, this.sink), this.scheduler))\n  }\n\n  end(): void {\n    this.tasks.push(scheduleDelay(this.dt, propagateEndTask(this.sink), this.scheduler))\n  }\n}\n","/** @license MIT License (c) copyright 2010-2017 original author or authors */\n\nimport Pipe from '../sink/Pipe'\nimport Map from '../fusion/Map'\nimport { empty, isCanonicalEmpty } from '../source/empty'\nimport { delay } from '@most/scheduler'\nimport { Stream, Time, Sink, Scheduler, Disposable, ScheduledTask, Task } from '@most/types'\n\n/**\n * Limit the rate of events by suppressing events that occur too often\n * @param period time to suppress events\n * @param stream\n */\nexport const throttle = <A>(period: number, stream: Stream<A>): Stream<A> =>\n  isCanonicalEmpty(stream) ? empty()\n    : stream instanceof Map ? commuteMapThrottle(period, stream)\n      : stream instanceof Throttle ? fuseThrottle(period, stream)\n        : new Throttle(period, stream)\n\nconst commuteMapThrottle = <A, B>(period: number, mapStream: Map<A, B>): Stream<B> =>\n  Map.create(mapStream.f, throttle(period, mapStream.source))\n\nconst fuseThrottle = <A>(period: number, throttleStream: Throttle<A>): Stream<A> =>\n  new Throttle(Math.max(period, throttleStream.period), throttleStream.source)\n\nexport class Throttle<A> implements Stream<A> {\n  readonly period: number;\n  readonly source: Stream<A>;\n\n  constructor(period: number, source: Stream<A>) {\n    this.period = period\n    this.source = source\n  }\n\n  run(sink: Sink<A>, scheduler: Scheduler): Disposable {\n    return this.source.run(new ThrottleSink(this.period, sink), scheduler)\n  }\n}\n\nclass ThrottleSink<A> extends Pipe<A, A> implements Sink<A> {\n  private time: Time\n  private readonly period: number;\n\n  constructor(period: number, sink: Sink<A>) {\n    super(sink)\n    this.time = 0\n    this.period = period\n  }\n\n  event(t: Time, x: A): void {\n    if (t >= this.time) {\n      this.time = t + this.period\n      this.sink.event(t, x)\n    }\n  }\n}\n/**\n * Wait for a burst of events to subside and emit only the last event in the burst\n * @param period events occuring more frequently than this will be suppressed\n * @param stream stream to debounce\n * @returns new debounced stream\n */\nexport const debounce = <A>(period: number, stream: Stream<A>): Stream<A> =>\n  isCanonicalEmpty(stream) ? empty()\n    : new Debounce(period, stream)\n\nclass Debounce<A> implements Stream<A> {\n  private readonly dt: number;\n  private readonly source: Stream<A>\n\n  constructor(dt: number, source: Stream<A>) {\n    this.dt = dt\n    this.source = source\n  }\n\n  run(sink: Sink<A>, scheduler: Scheduler): Disposable {\n    return new DebounceSink(this.dt, this.source, sink, scheduler)\n  }\n}\n\nclass DebounceSink<A> implements Sink<A>, Disposable {\n  private readonly dt: number;\n  private readonly sink: Sink<A>;\n  private readonly scheduler: Scheduler\n  private value: A | undefined;\n  private timer: ScheduledTask | null\n  private disposable: Disposable\n\n  constructor(dt: number, source: Stream<A>, sink: Sink<A>, scheduler: Scheduler) {\n    this.dt = dt\n    this.sink = sink\n    this.scheduler = scheduler\n    this.timer = null\n\n    this.disposable = source.run(this, scheduler)\n  }\n\n  event(_t: Time, x: A): void {\n    this.clearTimer()\n    this.value = x\n    this.timer = delay(this.dt, new DebounceTask(this, x), this.scheduler)\n  }\n\n  handleEventFromTask(t: Time, x: A): void {\n    this.clearTimer()\n    this.sink.event(t, x)\n  }\n\n  end(t: Time): void {\n    if (this.clearTimer()) {\n      // TODO: value should be boxed to avoid ! bang\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      this.sink.event(t, this.value!)\n      this.value = undefined\n    }\n    this.sink.end(t)\n  }\n\n  error(t: Time, x: Error): void {\n    this.clearTimer()\n    this.sink.error(t, x)\n  }\n\n  dispose(): void {\n    this.clearTimer()\n    this.disposable.dispose()\n  }\n\n  private clearTimer(): boolean {\n    if (this.timer === null) {\n      return false\n    }\n    this.timer.dispose()\n    this.timer = null\n    return true\n  }\n}\n\nclass DebounceTask<A> implements Task {\n  private readonly sink: DebounceSink<A>;\n  private readonly value: A;\n\n  constructor(sink: DebounceSink<A>, value: A) {\n    this.sink = sink\n    this.value = value\n  }\n\n  run(t: Time): void {\n    this.sink.handleEventFromTask(t, this.value)\n  }\n\n  error(t: Time, e: Error): void {\n    this.sink.error(t, e)\n  }\n\n  dispose(): void {}\n}\n","/** @license MIT License (c) copyright 2010-2016 original author or authors */\n/** @author Brian Cavalier */\n/** @author John Hann */\n\nimport fatal from '../fatalError'\nimport { now } from '../source/now'\nimport { empty, isCanonicalEmpty } from '../source/empty'\nimport { currentTime } from '@most/scheduler'\nimport { Stream, Sink, Scheduler, Time, Disposable } from '@most/types'\n\n/**\n * Turn a Stream<Promise<T>> into Stream<T> by awaiting each promise.\n * Event order is preserved. The stream will fail if any promise rejects.\n */\nexport const awaitPromises = <A>(stream: Stream<Promise<A>>): Stream<A> =>\n  isCanonicalEmpty(stream) ? empty() : new Await(stream)\n\n/**\n * Create a stream containing only the promise's fulfillment\n * value at the time it fulfills.\n * @param promise\n * @return stream containing promise's fulfillment value.\n *  If the promise rejects, the stream will error\n */\nexport const fromPromise = <A>(promise: Promise<A>): Stream<A> => awaitPromises(now(promise))\n\nclass Await<A> implements Stream<A> {\n  private readonly source: Stream<Promise<A>>\n\n  constructor(source: Stream<Promise<A>>) {\n    this.source = source\n  }\n\n  run(sink: Sink<A>, scheduler: Scheduler): Disposable {\n    return this.source.run(new AwaitSink(sink, scheduler), scheduler)\n  }\n}\n\nclass AwaitSink<A> implements Sink<Promise<A>> {\n  private readonly sink: Sink<A>;\n  private readonly scheduler: Scheduler;\n  private queue: Promise<unknown>;\n\n  constructor(sink: Sink<A>, scheduler: Scheduler) {\n    this.sink = sink\n    this.scheduler = scheduler\n    this.queue = Promise.resolve()\n  }\n\n  event(_t: Time, promise: Promise<A>): void {\n    this.queue = this.queue.then(() => this.handlePromise(promise))\n      .catch(this.errorBound)\n  }\n\n  end(): void {\n    this.queue = this.queue.then(this.endBound)\n      .catch(this.errorBound)\n  }\n\n  error(_t: Time, e: Error): void {\n    // Don't resolve error values, propagate directly\n    this.queue = this.queue.then(() => this.errorBound(e))\n      .catch(fatal)\n  }\n\n  private handlePromise(promise: Promise<A>): Promise<void> {\n    return promise.then(this.eventBound)\n  }\n\n  // Pre-create closures, to avoid creating them per event\n  private eventBound = (x: A): void => this.sink.event(currentTime(this.scheduler), x)\n  private endBound = (): void => this.sink.end(currentTime(this.scheduler))\n  private errorBound = (e: Error): void => this.sink.error(currentTime(this.scheduler), e)\n}\n","/** @license MIT License (c) copyright 2010-2016 original author or authors */\n/** @author Brian Cavalier */\n/** @author John Hann */\nimport { Sink, Time } from '@most/types'\n\nexport default class SafeSink<A> implements Sink<A> {\n  private readonly sink: Sink<A>\n  private active: boolean;\n\n  constructor(sink: Sink<A>) {\n    this.sink = sink\n    this.active = true\n  }\n\n  event(t: Time, x: A): void {\n    if (!this.active) {\n      return\n    }\n    this.sink.event(t, x)\n  }\n\n  end(t: Time): void{\n    if (!this.active) {\n      return\n    }\n    this.disable()\n    this.sink.end(t)\n  }\n\n  error(t: Time, e: Error): void{\n    this.disable()\n    this.sink.error(t, e)\n  }\n\n  disable(): Sink<A> {\n    this.active = false\n    return this.sink\n  }\n}\n","/** @license MIT License (c) copyright 2010-2016 original author or authors */\n/** @author Brian Cavalier */\n/** @author John Hann */\n\nimport { Time, Sink } from '@most/types'\n\nexport function tryEvent <A>(t: Time, x: A, sink: Sink<A>): void {\n  try {\n    sink.event(t, x)\n  } catch (e) {\n    sink.error(t, e)\n  }\n}\n\nexport function tryEnd(t: Time, sink: Sink<unknown>): void {\n  try {\n    sink.end(t)\n  } catch (e) {\n    sink.error(t, e)\n  }\n}\n","/** @license MIT License (c) copyright 2010-2016 original author or authors */\n/** @author Brian Cavalier */\n/** @author John Hann */\n\nimport SafeSink from '../sink/SafeSink'\nimport { tryDispose } from '@most/disposable'\nimport { asap } from '@most/scheduler'\nimport { tryEvent, tryEnd } from '../source/tryEvent'\nimport { empty, isCanonicalEmpty } from '../source/empty'\nimport { propagateErrorTask } from '../scheduler/PropagateTask'\nimport { run } from '../run'\nimport { withLocalTime } from './withLocalTime'\nimport { Stream, Sink, Scheduler, Disposable, Time } from '@most/types'\n\n/**\n * If stream encounters an error, recover and continue with items from stream\n * returned by f.\n * @param f which returns a new stream\n * @param stream\n * @returns new stream which will recover from an error by calling f\n */\nexport const recoverWith = <A, E extends Error, B = A>(f: (error: E) => Stream<B>, stream: Stream<A>): Stream<A | B> =>\n  isCanonicalEmpty(stream) ? empty()\n    : new RecoverWith(f, stream)\n\n/**\n * Create a stream containing only an error\n * @param e error value, preferably an Error or Error subtype\n * @returns new stream containing only an error\n */\nexport const throwError = (e: Error): Stream<never> =>\n  new ErrorStream(e)\n\nclass ErrorStream implements Stream<never> {\n  private readonly value: Error;\n\n  constructor(e: Error) {\n    this.value = e\n  }\n\n  run(sink: Sink<never>, scheduler: Scheduler): Disposable {\n    return asap(propagateErrorTask(this.value, sink), scheduler)\n  }\n}\n\nclass RecoverWith<A, E extends Error, B> implements Stream<A | B> {\n  private readonly f: (error: E) => Stream<B>;\n  private readonly source: Stream<A>;\n\n  constructor(f: (error: E) => Stream<B>, source: Stream<A>) {\n    this.f = f\n    this.source = source\n  }\n\n  run(sink: Sink<A>, scheduler: Scheduler): Disposable {\n    return new RecoverWithSink(this.f, this.source, sink, scheduler)\n  }\n}\n\nclass RecoverWithSink<A, E extends Error, B> implements Sink<A>, Disposable {\n  private readonly f: (error: E) => Stream<B>\n  private readonly sink: SafeSink<A>\n  private readonly scheduler: Scheduler\n  private disposable: Disposable\n\n  constructor(f: (error: E) => Stream<B>, source: Stream<A>, sink: Sink<A | B>, scheduler: Scheduler) {\n    this.f = f\n    this.sink = new SafeSink(sink)\n    this.scheduler = scheduler\n    this.disposable = source.run(this, scheduler)\n  }\n\n  event(t: Time, x: A): void {\n    tryEvent(t, x, this.sink)\n  }\n\n  end(t: Time): void {\n    tryEnd(t, this.sink)\n  }\n\n  error(t: Time, e: E): void {\n    const nextSink = this.sink.disable()\n\n    tryDispose(t, this.disposable, this.sink)\n\n    this._startNext(t, e, nextSink)\n  }\n\n  private _startNext(t: Time, x: E, sink: Sink<A>): void {\n    try {\n      this.disposable = this._continue(this.f, t, x, sink)\n    } catch (e) {\n      sink.error(t, e)\n    }\n  }\n\n  private _continue(f: (error: E) => Stream<B>, t: Time, x: E, sink: Sink<A | B>): Disposable {\n    return run(sink, this.scheduler, withLocalTime(t, f(x)))\n  }\n\n  dispose(): void {\n    return this.disposable.dispose()\n  }\n}\n","import { append, findIndex, remove } from '@most/prelude'\nimport { disposeNone, disposeOnce } from '@most/disposable'\nimport { tryEnd, tryEvent } from '../source/tryEvent'\nimport { isCanonicalEmpty } from '../source/empty'\nimport { Stream, Scheduler, Sink, Disposable, Time } from '@most/types'\n\nexport const multicast = <A>(stream: Stream<A>): Stream<A> =>\n  stream instanceof Multicast || isCanonicalEmpty(stream)\n    ? stream\n    : new Multicast(stream)\n\nclass Multicast<A> implements Stream<A> {\n  private readonly source: Stream<A>;\n  constructor(source: Stream<A>) {\n    this.source = new MulticastSource(source)\n  }\n  run(sink: Sink<A>, scheduler: Scheduler): Disposable {\n    return this.source.run(sink, scheduler)\n  }\n}\n\nexport class MulticastSource<A> implements Stream<A>, Disposable {\n  private readonly source: Stream<A>;\n  private sinks: Sink<A>[];\n  private disposable: Disposable;\n\n  constructor(source: Stream<A>) {\n    this.source = source\n    this.sinks = []\n    this.disposable = disposeNone()\n  }\n\n  run(sink: Sink<A>, scheduler: Scheduler): Disposable {\n    const n = this.add(sink)\n    if (n === 1) {\n      this.disposable = this.source.run(this, scheduler)\n    }\n    return disposeOnce(new MulticastDisposable(this, sink))\n  }\n\n  dispose(): void {\n    const disposable = this.disposable\n    this.disposable = disposeNone()\n    return disposable.dispose()\n  }\n\n  add(sink: Sink<A>): number {\n    this.sinks = append(sink, this.sinks)\n    return this.sinks.length\n  }\n\n  remove(sink: Sink<A>): number {\n    const i = findIndex(sink, this.sinks)\n    // istanbul ignore next\n    if (i >= 0) {\n      this.sinks = remove(i, this.sinks)\n    }\n\n    return this.sinks.length\n  }\n\n  event(time: Time, value: A): void {\n    const s = this.sinks\n    if (s.length === 1) {\n      return s[0].event(time, value)\n    }\n    for (let i = 0; i < s.length; ++i) {\n      tryEvent(time, value, s[i])\n    }\n  }\n\n  end(time: Time): void {\n    const s = this.sinks\n    for (let i = 0; i < s.length; ++i) {\n      tryEnd(time, s[i])\n    }\n  }\n\n  error(time: Time, err: Error): void {\n    const s = this.sinks\n    for (let i = 0; i < s.length; ++i) {\n      s[i].error(time, err)\n    }\n  }\n}\n\nexport class MulticastDisposable<A> implements Disposable {\n  private readonly source: MulticastSource<A>\n  private readonly sink: Sink<A>\n\n  constructor(source: MulticastSource<A>, sink: Sink<A>) {\n    this.source = source\n    this.sink = sink\n  }\n\n  dispose(): void {\n    if (this.source.remove(this.sink) === 0) {\n      this.source.dispose()\n    }\n  }\n}\n","/** @license MIT License (c) copyright 2016 original author or authors */\n/* eslint-disable import/first */\nimport { curry2, curry3, Curried2 } from '@most/prelude'\n\nexport { empty } from './source/empty'\nexport { never } from './source/never'\nexport { now } from './source/now'\nexport { at } from './source/at'\n\nexport { periodic } from './source/periodic'\n\nexport { newStream } from './source/newStream'\n\n// -----------------------------------------------------------------------\n// Observing\n\nexport { runEffects } from './runEffects'\nimport { run as _run } from './run'\n\ninterface Run {\n  <A> (sink: Sink<A>, scheduler: Scheduler, s: Stream<A>): Disposable\n  <A> (sink: Sink<A>, scheduler: Scheduler): (s: Stream<A>) => Disposable\n  <A> (sink: Sink<A>): Curried2<Scheduler, Stream<A>, Disposable>\n}\nexport const run: Run = curry3(_run)\n\n// -------------------------------------------------------\n\nimport { withLocalTime as _withLocalTime } from './combinator/withLocalTime'\n\ninterface WithLocalTime {\n  <A>(origin: Time, s: Stream<A>): Stream<A>\n  <A>(origin: Time): (s: Stream<A>) => Stream<A>\n}\nexport const withLocalTime: WithLocalTime = curry2(_withLocalTime)\n\n// -------------------------------------------------------\n\nimport { loop as _loop, SeedValue } from './combinator/loop'\n\ninterface Loop {\n  <A, B, S>(f: (seed: S, a: A) => SeedValue<S, B>, seed: S, s: Stream<A>): Stream<B>\n  <A, B, S>(f: (seed: S, a: A) => SeedValue<S, B>, seed: S): (s: Stream<A>) => Stream<B>\n  <A, B, S>(f: (seed: S, a: A) => SeedValue<S, B>): Curried2<S, Stream<A>, Stream<B>>\n}\nexport const loop: Loop = curry3(_loop)\n\n// -------------------------------------------------------\n\nimport { scan as _scan } from './combinator/scan'\n\ninterface Scan {\n  <A, B>(f: (b: B, a: A) => B, b: B, s: Stream<A>): Stream<B>\n  <A, B>(f: (b: B, a: A) => B, b: B): (s: Stream<A>) => Stream<B>\n  <A, B>(f: (b: B, a: A) => B): Curried2<B, Stream<A>, Stream<B>>\n}\nexport const scan: Scan = curry3(_scan)\n\n// -----------------------------------------------------------------------\n// Extending\n\nimport { startWith as _startWith } from './combinator/startWith'\n\ninterface StartWith {\n  <A>(value: A, stream: Stream<A>): Stream<A>\n  <A>(value: A): (stream: Stream<A>) => Stream<A>\n}\nexport const startWith: StartWith = curry2(_startWith)\n\n// -----------------------------------------------------------------------\n// Transforming\n\nimport { map as _map, constant as _constant, tap as _tap } from './combinator/transform'\nimport { ap as _ap } from './combinator/applicative'\n\ninterface Map {\n  <A, B>(f: (a: A) => B, s: Stream<A>): Stream<B>\n  <A, B>(f: (a: A) => B): (s: Stream<A>) => Stream<B>\n}\nexport const map: Map = curry2(_map)\ninterface Constant {\n  <A, B>(b: B, s: Stream<A>): Stream<B>\n  <A, B>(b: B): (s: Stream<A>) => Stream<B>\n}\nexport const constant: Constant = curry2(_constant)\ninterface Tap {\n  <A>(f: (a: A) => any, s: Stream<A>): Stream<A>\n  <A>(f: (a: A) => any): (s: Stream<A>) => Stream<A>\n}\nexport const tap: Tap = curry2(_tap)\ninterface Ap {\n  <A, B>(streamofFunctions: Stream<(a: A) => B>, streamOfValues: Stream<A>): Stream<B>\n  <A, B>(streamofFunctions: Stream<(a: A) => B>): (streamOfValues: Stream<A>) => Stream<B>\n}\nexport const ap: Ap = curry2(_ap)\n\n// -----------------------------------------------------------------------\n// FlatMapping\n\nimport { chain as _chain, join } from './combinator/chain'\ninterface Chain {\n  <A, B>(f: (value: A) => Stream<B>, stream: Stream<A>): Stream<B>\n  <A, B>(f: (value: A) => Stream<B>): (stream: Stream<A>) => Stream<B>\n}\nexport const chain: Chain = curry2(_chain)\nexport { join }\n\nimport { continueWith as _continueWith } from './combinator/continueWith'\ninterface ContinueWith {\n  <A, B = A>(f: () => Stream<B>, s: Stream<A>): Stream<A | B>\n  <A, B = A>(f: () => Stream<B>): (s: Stream<A>) => Stream<A | B>\n}\nexport const continueWith: ContinueWith = curry2(_continueWith)\n\nimport { concatMap as _concatMap } from './combinator/concatMap'\ninterface ConcatMap {\n  <A, B>(f: (a: A) => Stream<B>, stream: Stream<A>): Stream<B>\n  <A, B>(f: (a: A) => Stream<B>): (stream: Stream<A>) => Stream<B>\n}\nexport const concatMap: ConcatMap = curry2(_concatMap)\n\n// -----------------------------------------------------------------------\n// Concurrent merging\n\nimport { mergeConcurrently as _mergeConcurrently, mergeMapConcurrently as _mergeMapConcurrently } from './combinator/mergeConcurrently'\n\ninterface MergeConcurrently {\n  <A>(concurrency: number, s: Stream<Stream<A>>): Stream<A>\n  <A>(concurrency: number): (s: Stream<Stream<A>>) => Stream<A>\n}\nexport const mergeConcurrently: MergeConcurrently = curry2<number, Stream<Stream<unknown>>, Stream<unknown>>(_mergeConcurrently)\ninterface MergeMapConcurrently {\n  <A, B>(f: (a: A) => Stream<B>, concurrency: number, s: Stream<A>): Stream<B>\n  <A, B>(f: (a: A) => Stream<B>, concurrency: number): (s: Stream<A>) => Stream<B>\n  <A, B>(f: (a: A) => Stream<B>): Curried2<number, Stream<A>, Stream<B>>\n}\nexport const mergeMapConcurrently: MergeMapConcurrently = curry3(_mergeMapConcurrently)\n\n// -----------------------------------------------------------------------\n// Merging\n\nimport { merge as _merge, mergeArray } from './combinator/merge'\n\ninterface Merge {\n  <A, B>(s1: Stream<A>, s2: Stream<B>): Stream<A | B>\n  <A, B>(s1: Stream<A>): (s2: Stream<B>) => Stream<A | B>\n}\nexport const merge: Merge = curry2(_merge)\nexport { mergeArray }\n\n// -----------------------------------------------------------------------\n// Combining\n\nimport { combine as _combine, combineArray as _combineArray } from './combinator/combine'\n\ninterface Combine {\n  <A, B, R>(fn: (a: A, b: B) => R, a: Stream<A>, b: Stream<B>): Stream<R>\n  <A, B, R>(fn: (a: A, b: B) => R, a: Stream<A>): (b: Stream<B>) => Stream<R>\n  <A, B, R>(fn: (a: A, b: B) => R): Curried2<Stream<A>, Stream<B>, Stream<R>>\n}\nexport const combine: Combine = curry3(_combine)\ninterface CombineArray {\n  <Args extends unknown[], R>(fn: (...args: Args) => R, streams: ToStreamsArray<Args>): Stream<R>\n  <Args extends unknown[], R>(fn: (...args: Args) => R): (streams: ToStreamsArray<Args>) => Stream<R>\n}\nexport const combineArray: CombineArray = curry2(_combineArray as any) as any\n\n// -----------------------------------------------------------------------\n// Sampling\n\nimport { sample as _sample, snapshot as _snapshot } from './combinator/snapshot'\n\ninterface Sample {\n  <A, B>(values: Stream<A>, sampler: Stream<B>): Stream<A>\n  <A, B>(values: Stream<A>): (sampler: Stream<B>) => Stream<A>\n}\nexport const sample: Sample = curry2(_sample)\ninterface Snapshot {\n  <A, B, C>(f: (a: A, b: B) => C, values: Stream<A>, sampler: Stream<B>): Stream<C>\n  <A, B, C>(f: (a: A, b: B) => C, values: Stream<A>): (sampler: Stream<B>) => Stream<C>\n  <A, B, C>(f: (a: A, b: B) => C): Curried2<Stream<A>, Stream<B>, Stream<C>>\n}\nexport const snapshot: Snapshot = curry3(_snapshot)\n\n// -----------------------------------------------------------------------\n// Zipping\n\nimport { zipItems as _zipItems, withItems as _withItems } from './combinator/zipItems'\ninterface ZipItems {\n  <A, B, C> (f: (a: A, b: B) => C, a: Array<A>, s: Stream<B>): Stream<C>\n  <A, B, C> (f: (a: A, b: B) => C, a: Array<A>): (s: Stream<B>) => Stream<C>\n  <A, B, C> (f: (a: A, b: B) => C): Curried2<Array<A>, Stream<B>, Stream<C>>\n}\nexport const zipItems: ZipItems = curry3(_zipItems)\ninterface WithItems {\n  <A>(a: Array<A>, s: Stream<unknown>): Stream<A>\n  <A>(a: Array<A>): (s: Stream<unknown>) => Stream<A>\n}\nexport const withItems: WithItems = curry2(_withItems)\n\nimport { zip as _zip, zipArray as _zipArray } from './combinator/zip'\ninterface Zip {\n  <A, B, R>(fn: (a: A, b: B) => R, a: Stream<A>, b: Stream<B>): Stream<R>\n  <A, B, R>(fn: (a: A, b: B) => R, a: Stream<A>): (b: Stream<B>) => Stream<R>\n  <A, B, R>(fn: (a: A, b: B) => R): Curried2<Stream<A>, Stream<B>, Stream<R>>\n}\nexport const zip: Zip = curry3(_zip)\ninterface ZipArray {\n  <Args extends unknown[], R>(fn: (...args: Args) => R, streams: ToStreamsArray<Args>): Stream<R>\n  <Args extends unknown[], R>(fn: (...args: Args) => R): (streams: ToStreamsArray<Args>) => Stream<R>\n}\nexport const zipArray: ZipArray = curry2(_zipArray as any) as any\n\n// -----------------------------------------------------------------------\n// Switching\n\nexport { switchLatest } from './combinator/switch'\n\n// -----------------------------------------------------------------------\n// Filtering\n\nimport { filter as _filter, skipRepeats, skipRepeatsWith as _skipRepeatsWith } from './combinator/filter'\n\ninterface Filter {\n  <A, B extends A>(p: (a: A) => a is B, s: Stream<A>): Stream<B>\n  <A>(p: (a: A) => boolean, s: Stream<A>): Stream<A>\n  <A, B extends A>(p: (a: A) => a is B): (s: Stream<A>) => Stream<B>\n  <A>(p: (a: A) => boolean): (s: Stream<A>) => Stream<A>\n}\nexport const filter: Filter = curry2(_filter)\nexport { skipRepeats }\ninterface ShipRepeatsWith {\n  <A>(eq: (a1: A, a2: A) => boolean, s: Stream<A>): Stream<A>\n  <A>(eq: (a1: A, a2: A) => boolean): (s: Stream<A>) => Stream<A>\n}\nexport const skipRepeatsWith: ShipRepeatsWith = curry2(_skipRepeatsWith)\n\n// -----------------------------------------------------------------------\n// Slicing\n\nimport { take as _take, skip as _skip, slice as _slice, takeWhile as _takeWhile, skipWhile as _skipWhile, skipAfter as _skipAfter } from './combinator/slice'\n\ninterface Take {\n  <A>(n: number, s: Stream<A>): Stream<A>\n  <A>(n: number): (s: Stream<A>) => Stream<A>\n}\nexport const take: Take = curry2(_take)\ninterface Skip {\n  <A>(n: number, s: Stream<A>): Stream<A>\n  <A>(n: number): (s: Stream<A>) => Stream<A>\n}\nexport const skip: Skip = curry2(_skip)\ninterface Slice {\n  <A>(start: number, end: number, s: Stream<A>): Stream<A>\n  <A>(start: number, end: number): (s: Stream<A>) => Stream<A>\n  <A>(start: number): Curried2<number, Stream<A>, Stream<A>>\n}\nexport const slice: Slice = curry3(_slice)\ninterface TakeWhile {\n  <A>(p: (a: A) => boolean, s: Stream<A>): Stream<A>\n  <A>(p: (a: A) => boolean): (s: Stream<A>) => Stream<A>\n}\nexport const takeWhile: TakeWhile = curry2(_takeWhile)\ninterface SkipWhile {\n  <A>(p: (a: A) => boolean, s: Stream<A>): Stream<A>\n  <A>(p: (a: A) => boolean): (s: Stream<A>) => Stream<A>\n}\nexport const skipWhile: SkipWhile = curry2(_skipWhile)\ninterface SkipAfter {\n  <A>(p: (a: A) => boolean, s: Stream<A>): Stream<A>\n  <A>(p: (a: A) => boolean): (s: Stream<A>) => Stream<A>\n}\nexport const skipAfter: SkipAfter = curry2(_skipAfter)\n\n// -----------------------------------------------------------------------\n// Time slicing\n\nimport { until as _until, since as _since, during as _during } from './combinator/timeslice'\n\ninterface Until {\n  <A>(signal: Stream<any>, s: Stream<A>): Stream<A>\n  <A>(signal: Stream<any>): (s: Stream<A>) => Stream<A>\n}\nexport const until: Until = curry2(_until)\ninterface Since {\n  <A>(signal: Stream<any>, s: Stream<A>): Stream<A>\n  <A>(signal: Stream<any>): (s: Stream<A>) => Stream<A>\n}\nexport const since: Since = curry2(_since)\ninterface During {\n  <A>(timeWindow: Stream<Stream<any>>, s: Stream<A>): Stream<A>\n  <A>(timeWindow: Stream<Stream<any>>): (s: Stream<A>) => Stream<A>\n}\nexport const during: During = curry2(_during)\n\n// -----------------------------------------------------------------------\n// Delaying\n\nimport { delay as _delay } from './combinator/delay'\n\ninterface Delay {\n  <A>(dt: number, s: Stream<A>): Stream<A>\n  <A>(dt: number): (s: Stream<A>) => Stream<A>\n}\nexport const delay: Delay = curry2(_delay)\n\n// -----------------------------------------------------------------------\n// Rate limiting\n\nimport { throttle as _throttle, debounce as _debounce } from './combinator/limit'\n\ninterface Throttle {\n  <A>(period: number, s: Stream<A>): Stream<A>\n  <A>(period: number): (s: Stream<A>) => Stream<A>\n}\nexport const throttle: Throttle = curry2(_throttle)\ninterface Debounce {\n  <A>(period: number, s: Stream<A>): Stream<A>\n  <A>(period: number): (s: Stream<A>) => Stream<A>\n}\nexport const debounce: Debounce = curry2(_debounce)\n\n// -----------------------------------------------------------------------\n// Awaiting Promises\n\nexport { fromPromise, awaitPromises } from './combinator/promises'\n\n// -----------------------------------------------------------------------\n// Error handling\n\nimport { recoverWith as _recoverWith, throwError } from './combinator/errors'\n\ninterface RecoverWith {\n  <A, E extends Error, B = A>(p: (error: E) => Stream<B>, s: Stream<A>): Stream<A | B>\n  <A, E extends Error, B = A>(p: (error: E) => Stream<B>): (s: Stream<A>) => Stream<A | B>\n}\nexport const recoverWith: RecoverWith = curry2(_recoverWith)\nexport { throwError }\n\n// -----------------------------------------------------------------------\n// Multicasting\n\nexport { multicast, MulticastSource } from './combinator/multicast'\n\n// ----------------------------------------------------------------------\nimport {\n  propagateTask as _propagateTask,\n  propagateEventTask as _propagateEventTask,\n  propagateErrorTask as _propagateErrorTask,\n  propagateEndTask,\n  PropagateTaskRun,\n  PropagateTask as PropagateTaskResult\n} from './scheduler/PropagateTask'\nimport { Stream, Sink, Scheduler, Disposable, Time } from '@most/types'\nimport { ToStreamsArray } from './combinator/variadic'\n\ninterface PropagateTask {\n  <A>(run: PropagateTaskRun<A>, value: A, sink: Sink<A>): PropagateTaskResult\n  <A>(run: PropagateTaskRun<A>, value: A): (sink: Sink<A>) => PropagateTaskResult\n  <A>(run: PropagateTaskRun<A>): Curried2<A, Sink<A>, PropagateTaskResult>\n}\nexport const propagateTask: PropagateTask = curry3(_propagateTask)\ninterface PropagateEventTask {\n  <T>(value: T, sink: Sink<T>): PropagateTaskResult\n  <T>(value: T): (sink: Sink<T>) => PropagateTaskResult\n}\nexport const propagateEventTask: PropagateEventTask = curry2(_propagateEventTask)\nexport const propagateErrorTask: Curried2<Error, Sink<unknown>, PropagateTaskResult> = curry2(_propagateErrorTask)\nexport { propagateEndTask }\n"],"names":["fatal","delay","schedulePeriodic","tryDispose","identity","mapArray","scheduleDelay","run","_run","withLocalTime","_withLocalTime","loop","_loop","scan","_scan","startWith","_startWith","map","_map","constant","_constant","tap","_tap","ap","_ap","chain","_chain","continueWith","_continueWith","concatMap","_concatMap","mergeConcurrently","_mergeConcurrently","mergeMapConcurrently","_mergeMapConcurrently","merge","_merge","combine","_combine","combineArray","_combineArray","sample","_sample","snapshot","_snapshot","zipItems","_zipItems","withItems","_withItems","zip","_zip","zipArray","_zipArray","filter","_filter","skipRepeatsWith","_skipRepeatsWith","take","_take","skip","_skip","slice","_slice","takeWhile","_takeWhile","skipWhile","_skipWhile","skipAfter","_skipAfter","until","_until","since","_since","during","_during","_delay","throttle","_throttle","debounce","_debounce","recoverWith","_recoverWith","propagateTask","_propagateTask","propagateEventTask","_propagateEventTask","propagateErrorTask","_propagateErrorTask"],"mappings":"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"}